<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Kwik</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/</link><description>Recent content in Tools on Kwik</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://kwiksher.github.io/kwik5docs/get_started/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>httpYac REST API</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/httpyac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/httpyac/</guid><description>httpYac Restful API Representational State Transfer (REST) model for a programming framework
server/tests
bookTest01_editor.http
@host=http://localhost:9090 ### run pegasus server if not running, and return books GET /app ### GET /bookTest01 ### GET /bookTest01/page1 ### selectLayer GET /bookTest01/page1/imageOne ### GET /bookTest01/page1/imageOne/?class=linear ### modify layer props POST /bookTest01/page1/imageOne/ Content-Type: application/yaml { alpha=0.5 } ### save layer props with the current value PUT /bookTest01/page1/imageOne/ Content-Type: application/yaml PUT you can create a lua file and index.</description></item><item><title>Unit Test</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/unittest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/unittest/</guid><description>Unit Test Examples cmponents/editor/tests/suite_controller.lua cmponents/editor/tests/suite_selector.lua components/editor/index.lua
local unitTestOn = true components/editor/tests/index.lua
require &amp;#34;extlib.lunatest&amp;#34; local M = { run = function (props) print(&amp;#34;============ lunatest =============&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_controller&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_selector&amp;#34;, props) lunatest.run() print(&amp;#34;============ end =============&amp;#34;) end } return M Examples cmponents/editor/tests/suite_controller.lua it tests editor/controller/index.lua
controller:render(book, page, layer, tool, class, props)
controller:save(book, page, layer,tool, nil, props ) assert_string(dst, &amp;ldquo;fail&amp;rdquo;)
&amp;hellip;
module(..., package.seeall) function suite_setup() controller = require &amp;#34;components.editor.controller.index&amp;#34; files = {} updatedScene = nil end function setup() book = &amp;#34;bookFree&amp;#34; page = &amp;#34;page1&amp;#34; tool = &amp;#34;interaction&amp;#34; layer = &amp;#34;butWhite&amp;#34; -- Update scenes.</description></item><item><title>Visual Studio Code</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/vscode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/vscode/</guid><description>VS Code the following extensions helps your coding with Solar2D simulator.
Solar2D Autocomplete Solar2d Companion for Visual Studio Code Local Lua Debugger Run Terminal Command Local Lua Debugger For debugging with Local Lua Deubgger, launch.json should be placed in your workspace folder. For instance,
Assuming Kwik projects are located in ~/Kwik folder and this is your workplace folder of Visual Studio Code. launch.json will be created under .vscode/ folder
~/Kwik/.vscode/launch.json</description></item><item><title>Audacity</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/audacity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/audacity/</guid><description>https://manual.audacityteam.org/man/label_tracks.html</description></item></channel></rss>