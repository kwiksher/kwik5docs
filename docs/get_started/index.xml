<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Get Started on Kwik</title><link>https://kwiksher.github.io/kwik5docs/get_started/</link><description>Recent content in Get Started on Kwik</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://kwiksher.github.io/kwik5docs/get_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Step 1 - UXP</title><link>https://kwiksher.github.io/kwik5docs/get_started/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/step1/</guid><description>UXP/kwik-exporter Open Adobe UXP Developer Tool
Add Plugin to select develop/UXP/kwik-exporter/dist
TODO alpla release folder structure may be different to the current develop
Load it
Kwik Exporter Panel apppears
Photoshop Files &amp;gt; Open
you can select the following folder that comes with demo .psd files and kwikconfig.json. You may open a folder of yours which contains psd files.
sample-projects/SingleBook/book01
page1.psd page2.psd kwikconfig.json { &amp;#34;name&amp;#34;:&amp;#34;book one&amp;#34;, &amp;#34;output&amp;#34;:&amp;#34;../../Solar2D/src/App/book&amp;#34;, &amp;#34;pages&amp;#34;:[ {&amp;#34;psd&amp;#34;:&amp;#34;page01.psd&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;page one&amp;#34;}, {&amp;#34;psd&amp;#34;:&amp;#34;page02.</description></item><item><title>Step2 - Solar2D</title><link>https://kwiksher.github.io/kwik5docs/get_started/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/step2/</guid><description>Solar2D Simulator Open main.lua in Solar2D/src with Solar2D Simulator
TODO UXP::Publish to include swipe page or A/D keys for navigation ⭐️
kwiconfig.lua
debug = {enable = true, navigation= &amp;#34;swipe/keys&amp;#34;} Kwik Visual Code Editor</description></item><item><title>PSD Naming Rule</title><link>https://kwiksher.github.io/kwik5docs/get_started/naming_rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/naming_rule/</guid><description>Naming .psd file anad layers in documents Project and file names
Avoid long names for your projects and files and, DO NOT use characters like +-&amp;lt;&amp;gt;%,#;!.
Layer names
Before you start adding buttons and animations, follow the rules below. It is much easier to add interactivity with finalized names rather than to edit all of them afterward. Basic rules include:
Only user Western characters are allowed for layer names.
DO NOT use characters such as + - &amp;lt;&amp;gt; %,#;!</description></item><item><title>Components</title><link>https://kwiksher.github.io/kwik5docs/get_started/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/components/</guid><description>Components For instance components/pageX/page/swip.lua enables a page transition, and components/pageX/audios folder can have multiple audio lua files for instance short/audioOne.lua, long/audioTwo.lua. short audio file is loaded in to memory with audio.loadSound(), and long audio file is streaming with audio.loadStream().
local sceneName = ... -- local scene = require(&amp;#39;controller.scene&amp;#39;).new(sceneName, { name = &amp;#34;pageX&amp;#34;, components = { layers = { { bg={} }, }, audios = { short = {&amp;#34;audioOne&amp;#34;}, long= {&amp;#34;audioTwo&amp;#34; }, groups = { }, timers = { }, variables = { }, page = { &amp;#34;controllers.</description></item><item><title>Commands &amp; Events</title><link>https://kwiksher.github.io/kwik5docs/get_started/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/events/</guid><description>Commands &amp;amp; Events For an event for a page in a book commands/myAction.lua are triggeded with a dispatchEvent fucntion
UI:dispatchEvent({ name = &amp;#34;myAction&amp;#34;, UI = UI }) this myAction is defined in commands table in components/pageX/index.lua
For a button, you see in components/pageX/index.lua, buttonOne layer has two events. they are tap and drag. These tap and drag events are handleld with commands/buttonOne/tap.lua and commands/buttonOne/drag.lua
commands are called as Action in Kwik.</description></item><item><title>Tools</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/</guid><description>Tools Kwik Visual Code Editor Launcher Harness Custom Code generate_scene_index tool Kwik Visual Code Editor update the test-proj/Solar2D/component/editor to develop/Solar2D/tools/kwik-editor
This tool visually edits Soar2D/src files of a Kwik project and is harnessed by Pegasus http-server
↑ Select a layer or an event to review. You can edit values of properties
TODO each kwik component with default values
TODO ui components like checkbox/selectors &amp;hellip; for each component ⭐️
react compnents on webview &amp;ndash; can be shared with UXP panel which may send params via http to pegasus in kwik editor</description></item><item><title>Unit Test</title><link>https://kwiksher.github.io/kwik5docs/get_started/unittest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/unittest/</guid><description>Unit Test Examples cmponents/editor/tests/suite_controller.lua cmponents/editor/tests/suite_selector.lua components/editor/index.lua
local unitTestOn = true components/editor/tests/index.lua
require &amp;#34;extlib.lunatest&amp;#34; local M = { run = function (props) print(&amp;#34;============ lunatest =============&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_controller&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_selector&amp;#34;, props) lunatest.run() print(&amp;#34;============ end =============&amp;#34;) end } return M Examples cmponents/editor/tests/suite_controller.lua it tests editor/controller/index.lua
controller:render(book, page, layer, tool, class, props)
controller:save(book, page, layer,tool, nil, props ) assert_string(dst, &amp;ldquo;fail&amp;rdquo;)
&amp;hellip;
module(..., package.seeall) function suite_setup() controller = require &amp;#34;components.editor.controller.index&amp;#34; files = {} updatedScene = nil end function setup() book = &amp;#34;bookFree&amp;#34; page = &amp;#34;page1&amp;#34; tool = &amp;#34;interaction&amp;#34; layer = &amp;#34;butWhite&amp;#34; -- Update scenes.</description></item><item><title>Visual Studio Code</title><link>https://kwiksher.github.io/kwik5docs/get_started/vscode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/vscode/</guid><description>VS Code the following extensions helps your coding with Solar2D simulator.
Solar2D Autocomplete Solar2d Companion for Visual Studio Code Local Lua Debugger Run Terminal Command Local Lua Debugger For debugging with Local Lua Deubgger, launch.json should be placed in your workspace folder. For instance,
Assuming Kwik projects are located in ~/Kwik folder and this is your workplace folder of Visual Studio Code. launch.json will be created under .vscode/ folder
~/Kwik/.vscode/launch.json</description></item></channel></rss>