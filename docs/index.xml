<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Kwik</title><link>https://kwiksher.github.io/kwik5docs/</link><description>Recent content in Home on Kwik</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="https://kwiksher.github.io/kwik5docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Components</title><link>https://kwiksher.github.io/kwik5docs/bookstore/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/bookstore/components/</guid><description>Components bookstore consists of the following files and modules
Photoshop files library.psd dialog.psd table.psd Solar2D components model view controller Photoshop files library.psd dialog.psd table.psd Solar2D components App/bookTOC
├── App │ ├── bookFree │ ├── bookOne │ ├── bookTOC | ├── components | | ├── library | | ├── layers | | | ├── bg.lua | | | ├── bookFreeIcon.lua | | | ├── bookOneIcon.lua | | | ├── downloadBtn.lua | | | ├── purchaseBtn.</description></item><item><title>Step 1 - UXP</title><link>https://kwiksher.github.io/kwik5docs/get_started/step1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/step1/</guid><description>UXP/kwik-exporter Open Adobe UXP Developer Tool
Add Plugin to select develop/UXP/kwik-exporter/dist
TODO alpla release folder structure may be different to the current develop
Load it
Kwik Exporter Panel apppears
Photoshop Files &amp;gt; Open
you can select the following folder that comes with demo .psd files and kwikconfig.json. You may open a folder of yours which contains psd files.
sample-projects/SingleBook/book01
page1.psd page2.psd kwikconfig.json { &amp;#34;name&amp;#34;:&amp;#34;book one&amp;#34;, &amp;#34;output&amp;#34;:&amp;#34;../../Solar2D/src/App/book&amp;#34;, &amp;#34;pages&amp;#34;:[ {&amp;#34;psd&amp;#34;:&amp;#34;page01.psd&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;page one&amp;#34;}, {&amp;#34;psd&amp;#34;:&amp;#34;page02.</description></item><item><title>Step2 - Solar2D</title><link>https://kwiksher.github.io/kwik5docs/get_started/step2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/step2/</guid><description>Solar2D Simulator Open main.lua in Solar2D/src with Solar2D Simulator
TODO UXP::Publish to include swipe page or A/D keys for navigation ⭐️
kwiconfig.lua
debug = {enable = true, navigation= &amp;#34;swipe/keys&amp;#34;} Kwik Visual Code Editor</description></item><item><title>PSD Naming Rule</title><link>https://kwiksher.github.io/kwik5docs/get_started/naming_rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/naming_rule/</guid><description>Naming .psd file anad layers in documents Project and file names
Avoid long names for your projects and files and, DO NOT use characters like +-&amp;lt;&amp;gt;%,#;!.
Layer names
Before you start adding buttons and animations, follow the rules below. It is much easier to add interactivity with finalized names rather than to edit all of them afterward. Basic rules include:
Only user Western characters are allowed for layer names.
DO NOT use characters such as + - &amp;lt;&amp;gt; %,#;!</description></item><item><title>Steps</title><link>https://kwiksher.github.io/kwik5docs/bookstore/steps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/bookstore/steps/</guid><description>Steps Project folders
Photsohop/bookShopX
bookTOC library.psd {{bookName}}Icon downloadBtn saveBtn savingTxt purchaseBtn restoreBtn infoTxt Buy Product Action dialog.psd {{bookName}}Icon downloadBtn saveBtn savingTxt purchaseBtn infoTxt hideOverlayBtn bookFree page1.psd page2.psd bookOne page1.psd page2.psd Solar2D
main.lua
require(&amp;#34;controller.index&amp;#34;).bootstrap({name=&amp;#34;book&amp;#34;, sceneIndex = 1}) -- scenes.index {&amp;#34;library&amp;#34;, &amp;#34;dialog&amp;#34;} components/bookstore/model.lua
Host URL of yours if you set up your own server.
local YourHost = &amp;#34;http://localhost:8080&amp;#34; M.URL = YourHost..&amp;#34;/bookshelf/&amp;#34; M.backgroundImg = &amp;#34;bg.png&amp;#34; books model
M.books = { bookFree = { name = &amp;#34;bookFree&amp;#34;, versions = {&amp;#34;en&amp;#34;, &amp;#34;jp&amp;#34;}, titles = {en=&amp;#34;bookOne&amp;#34;, jp=&amp;#34;&amp;#34;}, descriptions = {en=&amp;#34;desc&amp;#34;, jp =&amp;#34;&amp;#34;}, isFree = true, isOnlineImg = false, image = &amp;#34;App/bookFree/assets/images/title/bg.</description></item><item><title>Book Server</title><link>https://kwiksher.github.io/kwik5docs/bookstore/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/bookstore/server/</guid><description>Book Server Preparation After published your Book&amp;rsquo;s projects, you can use compress_assets/main.lua
BookServer/compress_assets/main.lua
the script makes json and zip files
compress_assets/main.lua
local command = require(&amp;#34;compress_assets&amp;#34;) command.setServerFolder(&amp;#34;macos&amp;#34;, &amp;#34;bookstore&amp;#34;) --command.setServerFolder(&amp;#34;win32&amp;#34;, &amp;#34;bookstore&amp;#34;) -- the name of Kwik project and the name of In App Purchase product -- local books = { {project = &amp;#34;Book01&amp;#34;, serverFolder = &amp;#34;book01&amp;#34;}, {project = &amp;#34;Book02&amp;#34;, serverFolder = &amp;#34;book02&amp;#34;}, } -- Use Online Images needs an image file -- local onLineImages = { {project = &amp;#34;Book01&amp;#34;, serverFolder = &amp;#34;book01&amp;#34;, image = &amp;#34;assets/images/page1/bg@4x.</description></item><item><title>Components</title><link>https://kwiksher.github.io/kwik5docs/get_started/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/components/</guid><description>Components For instance components/pageX/page/swip.lua enables a page transition, and components/pageX/audios folder can have multiple audio lua files for instance short/audioOne.lua, long/audioTwo.lua. short audio file is loaded in to memory with audio.loadSound(), and long audio file is streaming with audio.loadStream().
local sceneName = ... -- local scene = require(&amp;#39;controller.scene&amp;#39;).new(sceneName, { name = &amp;#34;pageX&amp;#34;, components = { layers = { { bg={} }, }, audios = { short = {&amp;#34;audioOne&amp;#34;}, long= {&amp;#34;audioTwo&amp;#34; }, groups = { }, timers = { }, variables = { }, page = { &amp;#34;controllers.</description></item><item><title>Commands &amp; Events</title><link>https://kwiksher.github.io/kwik5docs/get_started/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/events/</guid><description>Commands &amp;amp; Events For an event for a page in a book commands/myAction.lua are triggeded with a dispatchEvent fucntion
UI:dispatchEvent({ name = &amp;#34;myAction&amp;#34;, UI = UI }) this myAction is defined in commands table in components/pageX/index.lua
For a button, you see in components/pageX/index.lua, buttonOne layer has two events. they are tap and drag. These tap and drag events are handleld with commands/buttonOne/tap.lua and commands/buttonOne/drag.lua
commands are called as Action in Kwik.</description></item><item><title>Photoshop File</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/photoshop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/photoshop/</guid><description>Photoshop File https://www.ios-resolution.com/
iPhone 13 Pro Max 1284x2778
iPad Pro 2048 x 2732
iPhone X 1125 x 2436
iPhone 11 Pro 1242 x 2688
https://forums.solar2d.com/t/iphone-11-pro-max-screen-shots-in-simulator/151266/11
Kwik4 Ulitimate Config
1280 x 1920
https://kwiksher.com/doc/getting_startted/guidelines/blend_mode/
https://kwiksher.com/doc/getting_startted/guidelines/screenshot/
background
1440 x 2280
iPhone X 1440 × 2772
https://forums.solar2d.com/t/how-to-define-application-working-area-on-the-screen/351066/11
https://forums.solar2d.com/t/safe-area-on-iphone-x-and-11-problem/353608
https://github.com/SpyricGames/Solar2D-Plugins-Public</description></item><item><title>Tools</title><link>https://kwiksher.github.io/kwik5docs/get_started/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/tools/</guid><description>Tools Kwik Visual Code Editor Launcher Harness Custom Code generate_scene_index tool Kwik Visual Code Editor update the test-proj/Solar2D/component/editor to develop/Solar2D/tools/kwik-editor
This tool visually edits Soar2D/src files of a Kwik project and is harnessed by Pegasus http-server
↑ Select a layer or an event to review. You can edit values of properties
TODO each kwik component with default values
TODO ui components like checkbox/selectors &amp;hellip; for each component ⭐️
react compnents on webview &amp;ndash; can be shared with UXP panel which may send params via http to pegasus in kwik editor</description></item><item><title>Icons</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/icons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/icons/</guid><description>https://forums.solar2d.com/t/new-icon-size-for-ios/354492
114x114</description></item><item><title>Simulator</title><link>https://kwiksher.github.io/kwik5docs/bookstore/simulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/bookstore/simulator/</guid><description>Simulator &amp;amp; Device Build Run with Simulator loading main.lua of BookShelfEmbedded with Corona Simulator, clicking purchase text will show up the IAP dialog Files &amp;gt; Show Project Sandbox, you find downloaded zip and bg.png. If you want to refresh the state beginning, delete the files from the Sandbox folders. TemporaryFiles must be cleared because the files from Internet are cached there. Build for device After everything all right with simulator, turn off debug mode IAP.</description></item><item><title>Unit Test</title><link>https://kwiksher.github.io/kwik5docs/get_started/unittest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/unittest/</guid><description>Unit Test Examples cmponents/editor/tests/suite_controller.lua cmponents/editor/tests/suite_selector.lua components/editor/index.lua
local unitTestOn = true components/editor/tests/index.lua
require &amp;#34;extlib.lunatest&amp;#34; local M = { run = function (props) print(&amp;#34;============ lunatest =============&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_controller&amp;#34;) lunatest.suite(&amp;#34;components.editor.tests.suite_selector&amp;#34;, props) lunatest.run() print(&amp;#34;============ end =============&amp;#34;) end } return M Examples cmponents/editor/tests/suite_controller.lua it tests editor/controller/index.lua
controller:render(book, page, layer, tool, class, props)
controller:save(book, page, layer,tool, nil, props ) assert_string(dst, &amp;ldquo;fail&amp;rdquo;)
&amp;hellip;
module(..., package.seeall) function suite_setup() controller = require &amp;#34;components.editor.controller.index&amp;#34; files = {} updatedScene = nil end function setup() book = &amp;#34;bookFree&amp;#34; page = &amp;#34;page1&amp;#34; tool = &amp;#34;interaction&amp;#34; layer = &amp;#34;butWhite&amp;#34; -- Update scenes.</description></item><item><title>Visual Studio Code</title><link>https://kwiksher.github.io/kwik5docs/get_started/vscode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/get_started/vscode/</guid><description>VS Code the following extensions helps your coding with Solar2D simulator.
Solar2D Autocomplete Solar2d Companion for Visual Studio Code Local Lua Debugger Run Terminal Command Local Lua Debugger For debugging with Local Lua Deubgger, launch.json should be placed in your workspace folder. For instance,
Assuming Kwik projects are located in ~/Kwik folder and this is your workplace folder of Visual Studio Code. launch.json will be created under .vscode/ folder
~/Kwik/.vscode/launch.json</description></item><item><title>Book Versions</title><link>https://kwiksher.github.io/kwik5docs/bookstore/versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/bookstore/versions/</guid><description>Book Versions It is a feature to download a different language version of a book. A user pays for a book and choose to download a book with his/her language
Modified sample project is here.
book01en book01jp book02en book02jp bookTOC library.psd dialog.psd
BookSever BookSever/compress_assets/main.lua
command.setServerFolder(&amp;#34;macos&amp;#34;, &amp;#34;bookshelf&amp;#34;) --command.setServerFolder(&amp;#34;win32&amp;#34;, &amp;#34;bookshelf&amp;#34;) local books = { {project = &amp;#34;Book01en&amp;#34;, serverFolder = &amp;#34;book01en&amp;#34;}, {project = &amp;#34;Book01jp&amp;#34;, serverFolder = &amp;#34;book01jp&amp;#34;}, {project = &amp;#34;Book02en&amp;#34;, serverFolder = &amp;#34;book02en&amp;#34;}, {project = &amp;#34;Book02jp&amp;#34;, serverFolder = &amp;#34;book02jp&amp;#34;}, } local onLineImages = { {project = &amp;#34;Book01en&amp;#34;, serverFolder = &amp;#34;book01en&amp;#34;, image = &amp;#34;build4/assets/images/p1/bg@4x.</description></item><item><title>Architecure</title><link>https://kwiksher.github.io/kwik5docs/design/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/architecture/</guid><description>Architecure UXP panel
flowchart LR Designer((fas:fa-user Designer)) Developer((fas:fa-user Developer)) subgraph Photoshop[Photoshop UXP] graphics(images/lua renderer&amp;lt;br&amp;gt;scaffolder) end subgraph Editor[Kwik Visual Editor] subgraph App assets[(assets/images&amp;lt;br&amp;gt;models/json)] lua[(Source .lua)] end tools(GUI tools&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;renderer&amp;lt;br&amp;gt;scaffolder) httpServer RestApi(RestApi&amp;lt;br&amp;gt;transform&amp;lt;br&amp;gt;animation) RestApi -.- tools end subgraph RestApi[REST API] form(Properties &amp;lt;br&amp;gt; CRUD) end subgraph VSCode httpYac(httpYac) coding end Photoshop -.img/json.-&amp;gt; assets RestApi &amp;lt;-.img/json.-&amp;gt; httpServer httpServer &amp;lt;-.-&amp;gt; assets httpServer -.- tools tools -.- App Browser-.maybe in future.- RestApi httpYac -.- RestApi coding -.- lua RestApi -.</description></item><item><title>Content X Structure</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/content/</guid><description>Content X Structure test/base-proj/Solar2D/App/bookX
obsolete develop/UXP/kwik-exporter/plugin/kwik/base-proj/Solar2D/App/bookX
. ├── assets │ ├── audios │ │ ├── long │ │ ├── short │ │ └── sync │ │ ├── en │ │ ├── jp │ ├── fonts │ ├── images │ │ └── pageX │ ├── model.json │ ├── particles │ ├── sprites │ ├── thumbnails │ ├── videos │ └── www ├── build.settings ├── commands │ └── pageX ├── components │ └── pageX │ ├── audios │ ├── layers │ │ ├── layer_image.</description></item><item><title>Layer</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/image/</guid><description>Layer scenes/pageX/background.lua
local _K = require &amp;#34;Application&amp;#34; local _M = require(&amp;#34;components.kwik.layer_image&amp;#34;).new() _M.weight = 1 local Props = { blendMode = &amp;#34;normal&amp;#34;, height = 520, width = 1000, kind = pixel, name = &amp;#34;bg&amp;#34;, x = 1000 -1000/2, y = 520/2, alpha = 100/100, } -- _M.imageWidth = Props.width/4 _M.imageHeight = Props.height/4 _M.mX, _M.mY = _K.ultimatePosition(Props.x, Props.y, &amp;#34;&amp;#34;) _M.randXStart = _K.ultimatePosition() _M.randXEnd = _K.ultimatePosition() _M.dummy, _M.randYStart = _K.ultimatePosition(0, ) _M.dummy, _M.randYEnd = _K.</description></item><item><title>Lua Code</title><link>https://kwiksher.github.io/kwik5docs/design/workflow/lua/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/workflow/lua/</guid><description>Lua you don&amp;rsquo;t need to use kwik-generate-model nor kwik-editor to output lua files. You can skip making .json files of these tools, and you create a lua file manually into a folder, and append a name of additional file to scenes/pageX/index.lua
commands/pageX/**/*.lua components/pageX/**/*.lua At runtime, Kwik Code Framework reads scenes/pageX/index.lua to load each .lua files of pageX. The object names for commands, compnents, scenes are defined in the index.lua.
components/pageX/index.lua kwik-genereate-index is a tool to update the index.</description></item><item><title>REST API</title><link>https://kwiksher.github.io/kwik5docs/design/workflow/workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/workflow/workflow/</guid><description>REST API - YAML put images in App/demo/assets/page01
logo panel message button background shape1 shape2 Tool
Finder/File Expolorer Plugin for Photoshop or XD will export images Editor html post image form network display.loadRemoteImage
https://solar2d.com/images/logo.png
access images of XD shared view? or able to load them all?
network.download
Create layer structure
Editor lists the images Order Top/Bottom/Up/Down frontEnd uses Adobe React Spectrum (in future, support screen reader etc)
REST API to get the list of images and post the orderd list back</description></item><item><title>UXP Plugins</title><link>https://kwiksher.github.io/kwik5docs/design/tools/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/tools/plugins/</guid><description>UXP Plugins Kwik4 created a project folder where psd files are placed. Kwik5 you can creat a folder for your psd files on your own. When Kwik Exporter opens, it asks for the folder location.
Exporter plugins for PS, XD develop/UXP/kwik-exporter
the folder name/path is saved in a json
Photoshop Files
Open psd files from a folder
Drag &amp;amp; Drop to change the order of psd files
one psd file corresponds one scene in Solar2D code.</description></item><item><title>Animation</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/animation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/animation/</guid><description>Animation</description></item><item><title>Animation Editor</title><link>https://kwiksher.github.io/kwik5docs/design/class/class_animation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/class/class_animation/</guid><description>classDiagram editorIndex editorIndex *-- menu : 1. User clicks Layer commands o-- selectBook commands o-- selectPage commands o-- selectLayer commands o-- selectTool class selectors{ - List: App, Book,Page - List: Layer, Audio, Group, Timer .. + projectPageSelector + componentSelector - componentHandler() } class selectorBase{ + selectorIcon + entries + onClick() } selectors &amp;lt;|..selectorBase: 1.1 onClick calls componentHandler menu *-- selectors selectors ..&amp;gt; store :1.2 commandHandler sets Layer entries class commands { + page + book + layer * class store.</description></item><item><title>Editor</title><link>https://kwiksher.github.io/kwik5docs/design/tools/editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/tools/editor/</guid><description>Editor React Solar2D Kwik functions
Command
File
Project New Project Open Project Recent Page New Edit
Paste/Copy components Delete pages components Publish
Compress PNGs &amp;ndash; TBI notarized compress.app in Kwik Assemble PNGs A-Gif or A-PNG Publish Images One page or Selected pages Open Solar2D simulator options Enable child components &amp;ndash; TBI as layerSet as a group or independent option Debug show memory (trace/print control) Spritsheet @2x Importer for a Kwik3 project</description></item><item><title>Group Editor</title><link>https://kwiksher.github.io/kwik5docs/design/class/class_group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/class/class_group/</guid><description>menu.controller.selector.selectGroup is linked to group.controller.selectGroup
local instance = require(&amp;#34;components.editor.group.controller.selectGroup&amp;#34;) classDiagram commands o-- selectLayer commands o-- selectGroup selectors ..&amp;gt; store selectGroup --&amp;gt; _selectGroup class _selectGroup{ &amp;lt;&amp;lt;Controller&amp;gt;&amp;gt; decodede = util.read layersbox store.set(decodede) layersTable store.set(decoded) return instance.new() } class add{ &amp;lt;&amp;lt;Controller&amp;gt;&amp;gt; layersbox:set(decodede) layersTable:set(decoded) } class remove{ &amp;lt;&amp;lt;Controller&amp;gt;&amp;gt; layersbox:set(decodede) layersTable:set(decoded) } class editorGroup { + groupTable as selectbox + controlbox + buttons + layersbox + groupTable } class groupTable { + groups oncllick() } class layersbox { + layers setValue() override } layersbox &amp;lt;|.</description></item><item><title>REST Server</title><link>https://kwiksher.github.io/kwik5docs/design/tools/webapp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/tools/webapp/</guid><description>Rest Server Get
returns .json of layer components(classes) or events/commands. It also returns default values of compoent properties
POST
receives Props of layers and Commands and then renders .lua components/commands. It also stores the request params in .json
/develop/Solar2D/tools/pegasus-harness /develop/Solar2D/tools/pegasus-launcher</description></item><item><title>Timer Editor</title><link>https://kwiksher.github.io/kwik5docs/design/class/class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/class/class/</guid><description>classDiagram editorIndex editorIndex *-- menu : 1. User clicks Timer commands o-- selectBook commands o-- selectPage commands o-- selectLayer commands o-- selectTimer class selectors{ - List: App, Book,Page - List: Layer, Audio, Group, Timer .. + projectPageSelector + componentSelector - componentHandler() } class selectorBase{ + selectorIcon + entries + onClick() } selectors &amp;lt;|..selectorBase: 1.1 onClick calls componentHandler menu *-- selectors selectors ..&amp;gt; store :1.2 commandHandler sets Timer entries class commands { + page + book + layer * class store.</description></item><item><title>Audio</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/audio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/audio/</guid><description>Audio index template
App.bookX.componetns/pageX/index.lua
{ name = &amp;#34;pageX&amp;#34;, components = { layers = { {background={}}, }, audios = { long = {&amp;#34;streamOne&amp;#34;, &amp;#34;streamTwo&amp;#34;}, short = {&amp;#34;shortOne&amp;#34;, &amp;#34;shortTwo&amp;#34;} }, }, commands = {}, } template
App.bookX.components.pageX.audios.aduio
local props = { autoPlay = {{autoPlay}}, channel = {{channel}}, delay = {{delay}}, filename = &amp;#34;{{filename}}&amp;#34;, folder = &amp;#34;{{folder}}&amp;#34;, loops = {{loops}}, -- 1 + 3 = 4 times name = &amp;#34;{{name}}&amp;#34;, type = &amp;#34;{{type}}&amp;#34;, } return require(&amp;#34;components.</description></item><item><title>Button</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/button/</guid><description>Button</description></item><item><title>Group</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/group/</guid><description>Group</description></item><item><title>Template strurcture</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/template/</guid><description>template structure ├── App ├── contentX ├── assets │ ├── audios │ │ ├── short │ │ ├── long │ │ └── sync │ ├── images │ └── model.json ├── commands │ └── pageX ├── components │ ├── pageX │ │ ├── audios │ │── layers │ │ ├── animations │ │ ├── images │ │ ├── interactions │ │ ├── physics │ │ └── replacements │ ├── groups │ ├── page │ ├── timers │ ├── variables │ └── index.</description></item><item><title>Spritesheet</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/spritesheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/spritesheet/</guid><description>Spritesheet</description></item><item><title>Template Model</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/template_model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/template_model/</guid><description>Code Template Model assets/model/schema
embedded in codes &amp;ndash; TBI to be extracted
external codes - export it to .lua or can be imported directly physics path read2me - timecodes spritesheet info TODO:add ext codes
extCodes libs p1 user_codes.lua ext_001.lua ext_002.lua commands/ button_name_001.lua action_name_001.lua user_codes.lua p2/ =&amp;gt; build4/
```lua function ActionCommand:new() local command = {} -- function command:execute(params) local UI = params.UI local sceneGroup = UI.scene.view local layer = UI.layer local phase = params.</description></item><item><title>Utilities</title><link>https://kwiksher.github.io/kwik5docs/design/tools/utilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/tools/utilities/</guid><description>Utilities /develop/Solar2D/tools/yaml2lua
there is a vscode extention to convert yaml to json , json to yaml etc
- name: Loading01 from: from to: x: 100 y: 100 alpha: 1 duration: 2000 xScale: 1.5 yScale: 1.5 rotation: 0 controls: restart: false easing: Linear reverse: false delay: 1000 loop: 1 angle: 45 xSwipe: 0 ySwipe: 0 referncePoint: Center breadcrumbs: dispose: true shape: &amp;#34;&amp;#34; color: - 1 - 0 - 1 interval: 300 time: 2000 width: 30 height: 30 lua</description></item><item><title>Sync Audio&amp;Text</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/sync_audio_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/sync_audio_text/</guid><description>Sync Audio &amp;amp; Text test/base-proj/Solar2D/App/bookFree/components/page3/index.lua
local sceneName = ... -- local scene = require(&amp;#39;controller.scene&amp;#39;).new(sceneName, { name = &amp;#34;page3&amp;#34;, components = { layers = { { test={}}, { alphabet = {class={&amp;#34;sync&amp;#34;}}}, { iamacat = {class={&amp;#34;sync&amp;#34;}}}, { mynameiskwik = {class={&amp;#34;sync&amp;#34;}}}, }, audios = { long = {&amp;#34;GentleRain&amp;#34;, &amp;#34;Tranquility&amp;#34; }, short ={&amp;#34;ballsCollision&amp;#34;} , }, groups = {}, timers = {}, variables = {}, page = { } }, commands = { &amp;#34;onComplete&amp;#34;, &amp;#34;play&amp;#34; }, onInit = function(scene) print(&amp;#34;onInit&amp;#34;) end }) -- return scene</description></item><item><title>Timer</title><link>https://kwiksher.github.io/kwik5docs/design/project_model/components/timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/project_model/components/timer/</guid><description>Timer template
App.bookX.components.pageX.timers.timer
local props = { actionName = &amp;#34;{{actionName}}&amp;#34;, delay = {{delay}}, iterations = {{iterations}}, name = &amp;#34;{{name}}&amp;#34;, } return require(&amp;#34;components.kwik.page_timer&amp;#34;).new(props) module
components.kwik.page_timer
local M = {} ... ... function M:didShow(UI) self.timerObj = timer.performWithDelay( self.delay, function() if self.actionName then UI.scene:dispatchEvent({name = self.actionName }) end end, self.iterations) end -- components.editor.timer timer ├── buttons.lua ├── controller │ ├── cancel.lua │ └── save.lua ├── defaults │ └── timer.lua ├── index.lua └── timerTable.lua comonents.</description></item><item><title>New Features</title><link>https://kwiksher.github.io/kwik5docs/design/new_features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kwiksher.github.io/kwik5docs/design/new_features/</guid><description>New Features Solar2D API to be included
Audio
seek rewind cross fade function Social
twitter facebook instagram transition.*
chaining them mesh
2.5D — Perspective and Depth
game controllers
Solar2D video texture
https://github.com/ANSH3LL/plugin_movie Tiled
https://forums.solar2d.com/t/smooth-scrolling-of-top-down-tiled-map/150199/2
&amp;ldquo;cull based on a 3x3 area of sub-screens centered around player. &amp;quot;
https://gamedev.stackexchange.com/questions/83253/is-there-any-way-to-load-pieces-of-a-tile-map-as-and-when-needed-and-not-the-en
https://www.dynetisgames.com/2018/02/24/manage-big-maps-phaser-3/
A tool to split an existing Tiled tilemap into chunks How to reason about chunks based on their ID’s and the world dimensions How to load and destroy them on the fly using Phaser 3 Texture atlas function in kwik?</description></item></channel></rss>