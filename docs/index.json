[{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/components/","title":"Components","tags":[],"description":"","content":"Components bookstore consists of the following files and modules\nPhotoshop files library.psd dialog.psd table.psd Solar2D components model view controller Photoshop files library.psd dialog.psd table.psd Solar2D components App/bookTOC\n├── App │ ├── bookFree │ ├── bookOne │ ├── bookTOC | ├── components | | ├── library | | ├── layers | | | ├── bg.lua | | | ├── bookFreeIcon.lua | | | ├── bookOneIcon.lua | | | ├── downloadBtn.lua | | | ├── purchaseBtn.lua | | | ├── restoreBtn.lua | | | ├── savedBtn.lua | | | └── savingTxt.lua | | ├── page | | | └── bookstore.lua ⭐️ | | └── index.lua　⭐️ | └── dialog | └── layers | ├── bg.lua | ├── bookIcon.lua | ├── downloadBtn.lua | ├── hideOverlayBtn.lua | ├── infoTxt.lua | ├── purchaseBtn.lua | ├── savedBtn.lua | ├── savingTxt.lua | └── inddx.lua │ ├── components ├── bookstore ├── controller ├── model ├── smc ├── view ├── index.lua └── model.lua ⭐️ bookstore component is defined in components.pages table. This calls bookstore.lua\nApp/bookTOC/scenes/library/index.lua\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;library\u0026#34;, components = { layers = { { bg ={ } }, { bookIcon ={ } }, ... ... }, audios = { }, groups = { }, timers = { }, variables = { }, pages = { \u0026#34;bookstore\u0026#34; } }, commands = { }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene App/bookTOC/components/libary/pages/bookstore.lua\nlocal _M = {} local bookstore = require(\u0026#34;components.bookstore.index\u0026#34;).new() -- function _M:init(UI) end -- function _M:create(UI) local sceneGroup = UI.scene.view local layers = UI.layers -- --for k, v in pairs(UI.props) do print(k, v) end bookstore:init(sceneGroup, UI.props) end -- function _M:didShow(UI) local layers = UI.layers bookstore:setSceneGroup(UI.scene.view) end -- -- function _M:toDispose(UI) bookstore:destory() end -- return _M bookstore.lua calls components.bookstore.model\nmodel Please fill the bookstore model with values of each book\ncompoents/bookstore/index.lua\nlocal M = {} -- local pageCommand = require(\u0026#34;components.bookstore.controller.pageCommand\u0026#34;) local model = require(\u0026#34;components.bookstore.model.base\u0026#34;) -- model.debug = true model.URL = \u0026#34;http://localhost:8080/bookshop/\u0026#34; -- model.URL = nil means simple IAP store without network download -- downloadBtn, savingTxt won\u0026#39;T be used. You don\u0026#39;t need to create them. ---------- model.TOC = \u0026#34;bookTOC\u0026#34; model.LIBRARY_PAGES = {en = \u0026#34;scenes.library\u0026#34;} model.DIALOG_PAGES = {en = \u0026#34;scenes.dialog\u0026#34;} -- model.name = \u0026#34;catalog01\u0026#34; -- model.books = { bookFree = { name = \u0026#34;bookFree\u0026#34;, versions = {}, titles = {en=\u0026#34;bookOne\u0026#34;}, descriptions = {en=\u0026#34;desc\u0026#34;}, isFree = true, isOnlineImg = true, isDownloadable = true, image = \u0026#34;App/bookFree/assets/images/page1/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookFree\u0026#34;, google = \u0026#34;bookFree\u0026#34;, amazon = \u0026#34;bookFree\u0026#34;}, }, bookOne = { name = \u0026#34;bookOne\u0026#34;, versions = {}, titles = {en=\u0026#34;bookOne\u0026#34;}, descriptions = {en=\u0026#34;desc\u0026#34;}, isFree = false, isOnlineImg = true, -- true isDownloadable = true, -- true image = \u0026#34;App/bookOne/assets/images/page1/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookOne\u0026#34;, google = \u0026#34;bookOne\u0026#34;, amazon = \u0026#34;bookOne\u0026#34;}, } } -- model.purchaseAlertMessages = {en=\u0026#34;Your purchase was successful\u0026#34;} model.restoreAlertMessages = {en=\u0026#34;Your items are being restored\u0026#34;} model.downloadErrorMessages = {en=\u0026#34;Check network alive to download the content\u0026#34;} model.descriptions = {en=\u0026#34;\u0026#34;} model.titles = {en=\u0026#34;\u0026#34;} -- model.gotoSceneEffect = \u0026#34;slideRight\u0026#34; model.showOverlayEffect = \u0026#34;slideBottom\u0026#34; -- M.new = function() return pageCommand.newBookstore(model) end -- M.model = model -- return M debug\nif true, IAPBadger is in debug mode.\nURL\nif book assets are downlodable, please set the server url\nLIBRARY_PAGES\nbookstore shows one of library page with lang value\nDIALOG_PAGES\nbookstore shows one of dialog with lang value\nname\nthe name for IAP catalog. You may create another model.lua with a differnet name\nbooks\nname\nversions\nyou can put language codes for multilingual books.\nyou may invent a new lang code for versions. For example, instead of language code, use blue, red, gree of colors as version\ntitles\ndescriptions\nisFree\ntrue or falase\nisOnlineImg\nif true, thumbnail image is loaded with the following given path in App folder\nif false, from URL ..\u0026quot;/\u0026quot;..image\nimage\nthumbnail image path\nproductNames\nif debug is false, productNames should be replaced with values of Apple store, Google play, Amazon store\nview You would like to customize the looks\nmarker\nupdateText\ncomponents/bookstore/view/marker.lua\nlocal M = {} -- function M.new (dst, group) print(dst, group) if dst.updateMark == nil then local obj = display.newCircle(0,0,4) obj.x = dst.x + dst.width/2 obj.y = dst.y - dst.height/2 obj:setFillColor(1,0,0) group:insert(obj) dst.updateMark = obj else dst.updateMark.alpha = 1 end end --- return M components/bookstore/view/spinner.lua\nlocal M = {} -- function M.new (host) local obj = {} local spinner obj.host = host -- function obj:show(host) if not spinner then spinner = display.newGroup() local hostName = host or obj.host or \u0026#34;\u0026#34; --Place a progress spinner on screen and tell the user the app is contating the store local spinnerBackground = display.newRect(0,0,360,600) spinnerBackground:setFillColor(1,1,1,0.75) --Spinner consumes all taps so the user cannot tap the purchase button twice spinnerBackground:addEventListener(\u0026#34;tap\u0026#34;, function() return true end) local spinnerText = display.newText(\u0026#34;Contacting \u0026#34; .. hostName .. \u0026#34;...\u0026#34;, 0, -20, native.systemFont, 18) spinnerText:setFillColor(0,0,0) --Add a little spinning rectangle local spinnerRect = display.newRect(0, 0,35,35) spinnerRect:setFillColor(0, 0) spinnerRect:setStrokeColor(1,1,1) spinnerRect.strokeWidth = 2 transition.to(spinnerRect, { time=4000, rotation=360, iterations=999999, transition=easing.inOutQuad}) --Create a group and add all these objects to it spinner:insert(spinnerBackground) spinner:insert(spinnerText) spinner:insert(spinnerRect) spinner.x, spinner.y = _W/2, _H/2 spinner.spinnerText = spinnerText end end updateText\nstartTime: the start time of a book download size: the size in progress bookSize:the total size of assets of a book function obj:updateText() local percent = self.size/self.bookSize local sec = os.difftime( os.time(), self.startTime) local remain = math.floor(sec * (1.0/percent)) local time = os.date(\u0026#34;*t\u0026#34;, remain) self.spinnerText.text = math.floor(percent*100)..\u0026#34; % (\u0026#34; ..self.size ..\u0026#34;/\u0026#34; ..self.bookSize ..\u0026#34; Mb) \\n left \u0026#34; ..time.min..\u0026#34;:\u0026#34;..time.sec end controller These functions are available for page\u0026amp;book navigation. You can set it for an event action.\ncomponents/bookstore/controller/pageCommand.lua gotoTOC() showView(page, options) gotoSceneBook(book, page, version) gotoSceneNextBook(version) gotoScenePreviousBook(version) gotoScene(event, version) event = {target = {selectedPurchase= \u0026ldquo;bookOne\u0026rdquo;}} "},{"uri":"https://kwiksher.github.io/kwik5docs/","title":"Home","tags":[],"description":"","content":"Kwik5 consists of the following two tools,\nKwik exporter for Adobe Photoshop UXP plugin\nit publishes images(1x, 2x, 4x) and lua files of layer properties (x, y, width, height) to a selected App/book folder of a Solar2D project.\nkwik Visual Code editor for Solar2D\nthe publsiehd project from Kwik exporter has an editing capabiliy on Solar2D simulator\nit attaches animation, button etc to a layer, and updates the project codes(lua files) when you save each properteis of kwik components/events(actions).\ncircled A, B images are helper objects of Kwik to specify a Layer Animation position from pos A to pos B. You can drag A to starting position, B to ending podistion of a target layer.\nLively preview is available when you enter a new value to component properties.\nSolar2D simulator automatically reloads itself when there are updated files. (Kwik4 needed publsihing code to update a solar2d project)\nthe kwik editor can read single or mutiple books project.\nYou can create a single book app and mutiple books project with the following project structure.\nPlease set a App/book folder as the output folde when you publsih images/codes with Kwik exporter UXP plugin.\nsingle book\nKwik5 publshies images/codes to App/book folder. (kwik4 publshied everything under build4 folder)\nmultiple books (bookstore)\nYou can work each book folder one by one with Kwik exporter(UXP) to publsih images of psd files of each book. So please select one of book folder when you use Kwik exporter\nKwik5 you can publsih each book under App folder directly. (Kwik4 needed to collect each book project to App folder from build4 folder by a batch file for making a bookshelf app.)\n"},{"uri":"https://kwiksher.github.io/kwik5docs/introduction/","title":"Introduction","tags":[],"description":"","content":"Introduction Modified UXP Folder structure Lua New Features UXP Kwik Editor in Solar2D Lua Bookstore Modified UXP Open\nkwik4 kwik5 the psd files are under Kwik/{Project Name} folder. Please choose a folder that has the psf files to be published Solar2D Project\nthis tells where to publish images of a PSD to a solar2D project Kwik4 was under build4 folder and no choice was available\nNew\ncreates a book folder under App folder. A book has scenes(pages). Each scene is genereted from each psd file.\nSelect\nyou can select a book where a psd is published as a scene(page).\nApp/{bookName} Folder structure Book \u0026gt; scene (page) \u0026gt; layer\nnames of psd files are used to create a scene lua file for Solar2D composer\nkwik4 kwik5 pageOne.psd uses \u0026ldquo;page01\u0026rdquo; - assets/images/p1 - components/page01 - commands/page01 - views/page01Scene.lua. pageOne.psd uses \u0026ldquo;pageOne\u0026rdquo;\n- assets/images/pageOne - components/pageOne - commands/pageOne - components/pageOne/index.lua dist folder\nkwik4 kwik5 build4 - assets/images/p1 - components/page01 - commands/page01 - views/page01Scene.lua. App/{bookName}\n- assets/images/pageOne - components/pageOne - commands/pageOne - components/pageOne/index.lua commands/common components/common\ncomponents/bookstore bookshelf is renamed to bookstore that is an enhancement of the kwik4\u0026rsquo;s bookshefl imlementation (it was provided with kwikshelf.plugin)\nLua main.lua\nyou can load a book project with the following code.\nrequire(\u0026#34;controller.index\u0026#34;).bootstrap({name=\u0026#34;bookFree\u0026#34;, sceneIndex = 1 }) sceneIndex is defined in App/{bookName}/index.lua\nlocal scenes = { \u0026#34;page1\u0026#34;, \u0026#34;page2\u0026#34;, } return scenes App/{bookName}/components/{pageName}/layers/{layerName}.lua\na component or layer lua file is retrived from composer library of Solar2D.\nkwik4 kwik5 UI.layer local bg = UI.layer.bg UI.scene.view local bg = UI.scene.view.bg kwik4\u0026rsquo;s UI.layer is obsolete.\nKwik5 holds all layers in UI.layers as an array, and also UI.scene.view contains all the layers with it.\nfunction M:create(UI) local sceneGroup = UI.scene.view -- layers is a array local layers = UI.layers for i=1, #layers do print(layers[i].name) end -- sceneGroup is a hash table local bg = sceneGroup[\u0026#34;bg\u0026#34;] print(bg.name) end New Features UXP Validate Names: layer names in Japanese Kana\nsymbols are converted to \u0026lsquo;_\u0026rsquo; \u0026lsquo;レイヤー 1\u0026rsquo; is converted to \u0026lsquo;reiya_1\u0026rsquo; Layer Groups: publish images of a nested layer group.\nKwik Editor in Solar2D animation, button, layer repleacements(spritesheet,video, particles) are editied with Kwik Editor in Solar2D.\nIt helpes to change values of components properties easily, or add/attach a component class to a layer visually for designers to do a no-code editing\nKwik5 is aimed to be a low code tool faster to work with .lua code easily and directly. See the next Lua section\nkwik4 kwik5 1. kwik\u0026rsquo;s component panel saves props to .kwk(XML) 2. Publish .lua from .kwk 1. UXP Publish code(.lua) as base 2. Create/modify .lua for animation, button .. with Kwik editor in Solar2D simulator For developers, use a text editor to edit .lua directly Lua Kwik4 had .kwk xml to hold a properties/values of a Kwik project. Kwik5 uses .lua mainly\nApp/{bookName}/index.lua\nyou can add your own(custom) page to the index.lua\nlocal scenes = { \u0026#34;page1\u0026#34;, \u0026#34;page2\u0026#34;, \u0026#34;yourPageName\u0026#34; } return scenes App/{bookName}/components/{pageName}/index.lua\nlayers form photoshop(images) and other resouces are separated.\nyou can add your own(custom) layers to the layers table\nnested layres are supported\nlayers = { ... { title = {}}, { customLayeTop = { {panelOne ={ }}, {panelTwo = { {buttonOne={} }, {buttonTwo={} }} } } } you can add your own(custom) components to the components table\npage sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;page(sceneName, { name = \u0026#34;page1\u0026#34;, components = { layers = { { bg={} }, { gotoBtn={} }, { title={} }, { customLayerName={} }, }, audios = { }, groups = { }, timers = { }, variables = { }, pages = { \u0026#34;yourComponentName\u0026#34; } }, commnands = { }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene layer has a class\nKwik4\u0026rsquo;s animation, button, layer replacements(spritesheet,video, particles,,) equal to a class in kwik5\nyou may add your own custom class to a layer\nlayers = { ... { title = {}, class={\u0026#34;animation\u0026#34;, \u0026#34;button\u0026#34;, \u0026#34;yourClass\u0026#34;}}, } components\nKwik4\u0026rsquo;s audio, group, timer, varaible are treated as components in a scene in Kwik5\ncomponents = { layers = { { bg={} }, { gotoBtn={} }, { title={} }, }, audios = { long = {\u0026#34;longOne\u0026#34;, \u0026#34;longTwo\u0026#34; }, short ={\u0026#34;shortOne\u0026#34;,\u0026#34;shortTwo\u0026#34;} , sync = {\u0026#34;syncOne\u0026#34;, \u0026#34;syncTtwo\u0026#34;, en={\u0026#34;helloen\u0026#34;}, jp={\u0026#34;hellojp\u0026#34;}} } groups = {\u0026#34;groupOne\u0026#34;,\u0026#34;groupTwo\u0026#34;}, timers = {\u0026#34;timerOne\u0026#34;, \u0026#34;timerTwo\u0026#34;}, variables = {\u0026#34;varOne\u0026#34;, \u0026#34;varTwo\u0026#34;}, }, common component examples\nnavigation WASD key navigation swipes thumbnails bookstore navigation Commands App/{bookName}/components/{pageName}/index.lua has commnands for events.\nFor example, panelOne.OK event that comes from a button in panelOne. It fires OK event, and actions code in panelOne.OK.lua in App/{bookName}/commnads/{pageName} will be exectued.\npage sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;page(sceneName, { name = \u0026#34;page1\u0026#34;, layers = { { bg={} }, ... }, components = { ... }, commnands = { \u0026#34;panelOne.OK\u0026#34;, \u0026#34;panelOne.Cancel\u0026#34;, \u0026#34;timerOne\u0026#34;, \u0026#34;actionOne\u0026#34;, }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene Bookstore portrait view for library book table view each book status: isFree, isPurchased, isDownloadable, isDownloaded\nonline icon See the section of bookstore/components/#Photoshop files table.psd\nrestore \u0026amp; download all\n"},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/step1/","title":"Step 1 - UXP","tags":[],"description":"","content":"UXP/kwik-exporter Open Adobe UXP Developer Tool\nAdd Plugin to select develop/UXP/kwik-exporter/dist\nTODO alpla release folder structure may be different to the current develop\nLoad it\nKwik Exporter Panel apppears\nPhotoshop Files \u0026gt; Open\nyou can select the following folder that comes with demo .psd files and kwikconfig.json. You may open a folder of yours which contains psd files.\nsample-projects/SingleBook/book01\npage1.psd page2.psd kwikconfig.json { \u0026#34;name\u0026#34;:\u0026#34;book one\u0026#34;, \u0026#34;output\u0026#34;:\u0026#34;../../Solar2D/src/App/book\u0026#34;, \u0026#34;pages\u0026#34;:[ {\u0026#34;psd\u0026#34;:\u0026#34;page01.psd\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;page one\u0026#34;}, {\u0026#34;psd\u0026#34;:\u0026#34;page02.psd\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;page two\u0026#34;} ] } TODO Project Name Text Box to display a selected folder name as default.\nTODO User can change it and Kwik uses it for a folder name when publshing\nTODO kwikconfig.json will be created in the selected folder.\nDouble Click the one of .psd in the list to open it for editing.\nSolar2D Project \u0026gt; New\nNew button, a set of Solar2D project will be generated to a selected folder. Create a new Soler2D project TODO dialog for choice - create a pair of Photoshop \u0026amp; Solar2D project folder\nit will scafold a Solar2D folder of a template to a folder you choose. NG Current implementation copies Solar2D folder w/o App TODO it would be better to scafold the entire structure of SingleBook sample - create a book folder into Photoshop folder select a distination folder TODO select portrait or landscape\nThe following folder structure will be created under Solar2D folder\n├── Photoshop │ └── book01 │ ├── kwikconfig.json │ └── page01.psd └── Solar2D ├── rel ├── src │ ├── App │ │ └── book │ ├── Images.xcassets │ ├── LaunchScreen.storyboardc │ ├── assets │ ├── build.settings │ ├── commands │ ├── components │ ├── config.lua │ ├── controller │ ├── en.lproj │ ├── extlib │ ├── jp.lproj │ ├── main.lua │ └── mySplashScreen.png ├── templates └── tools Solar2D Project \u0026gt; Select Book\nSelect Book\nplease select an output folder where each psf files are published. It must be under App folder.\nPublish\nselected psd files are publihsed to App/book folder\ncheckbox all\nit will select all the psd files in the list\nInput text box\nyou can input the index number of psd files to be published for example,\n0, 2-3\nPublish button\nExport Settings Dialog appears, click Export\nTODO show the project name with the default output folder\nBrowse button\nSelect the folder for output if you like to change the destination. The default is defined in kwikconfig.json as \u0026quot;../../Solar2D/src/App/book\u0026quot;\nKwik will publish images/source code. You can find them in\nTODO change dist to src with SimpleBook sample\nActive Document\nYou can publish images/codes from active document only.\nExport Images Export Code Layer Groups\nTODO Kwik4_1280x1920 to be renamed as page1\nYou can export images of a layer group individually.\nSelect layer groups and then click Unmerge button.\nIf you want to cancel a layer group to be unmerged, Check it and click Cancel button. It will disppaer from the list.\nThe source files and the images are exported when you publish.\nTODO fix the bug that unmerged group is not indexed at the right position in index.lua\nlocal scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;kwik4_1280x1920\u0026#34;, layers = { { bg={} }, { copyright={} }, { star={} }, { hello={} }, { mycircle={} }, { myrect={}, { GroupA={ { SubA = {} },} }, }, "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/step2/","title":"Step2 - Solar2D","tags":[],"description":"","content":"Solar2D Simulator Open main.lua in Solar2D/src with Solar2D Simulator\nTODO UXP::Publish to include swipe page or A/D keys for navigation ⭐️\nkwiconfig.lua\ndebug = {enable = true, navigation= \u0026#34;swipe/keys\u0026#34;} Kwik Visual Code Editor "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/","title":"Get Started","tags":[],"description":"","content":"TODO\nswipe page or A/D keys for navigation\ndoc test layer groups and add how to work with a layer group in get started\nlayer group in Kwik Visual Code a test .psd and publish it clean image template lua\nadd animation and button\naction group animation, an example for multiple animations sliders, switches for true/false, option/checkbox add audio \u0026amp; video\nnagivation \u0026amp; thumnail images\nrefactor kNavi.lua doc Get Started UXP/kwik-exporter A project folder Solar2D Simulator/kwik-editor UXP/kwik-exporter Open Adobe UXP Developer Tool\nAdd Plugin by selecting develop/UXP/kwik-exporter/dist/manifest.json\nKwik Exporter Panel apppears\nFrom the UXP plugin\nPhotoshop Files \u0026gt; Open\nDouble Click the one of .psd in the list to open it for editing.\nSolar2D Project \u0026gt; Select Book or create a new Solar2D project\nPublish\nselected psd files are publihsed to App/book folder\nA project folder ├── Photoshop │ └── book │ ├── kwikconfig.json │ ├── page1,psd │ └── page2.psd └── Solar2D ├── rel ├── src │ ├── App │ │ └── book \u0026lt;==== the published images/lua files are inside this folder │ ├── Images.xcassets │ ├── LaunchScreen.storyboardc │ ├── assets │ ├── build.settings │ ├── commands │ ├── components │ ├── config.lua │ ├── controller │ ├── en.lproj │ ├── extlib │ ├── jp.lproj │ ├── main.lua │ └── mySplashScreen.png ├── templates └── tools Solar2D Simulator/kwik-editor Open main.lua in Solar2D/src with Solar2D Simulator\nKwik Visual Code Editor wiil be loaded and your content(App/book) of your psd files are previewd\nFor instance, animtion editing Action editing "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/naming_rule/","title":"PSD Naming Rule","tags":[],"description":"","content":"Naming .psd file anad layers in documents Project and file names\nAvoid long names for your projects and files and, DO NOT use characters like +-\u0026lt;\u0026gt;%,#;!.\nLayer names\nBefore you start adding buttons and animations, follow the rules below. It is much easier to add interactivity with finalized names rather than to edit all of them afterward. Basic rules include:\nOnly user Western characters are allowed for layer names.\nDO NOT use characters such as + - \u0026lt;\u0026gt; %,#;!. for naming layers\nThese characters conflict with Lua language. Kwik removes these “strange” characters but, if they were used before in any button actions, it would generate errors during export.\nDo NOT name your layers starting with numbers.\nFor example, a layer named \u0026ldquo;1\u0026rdquo;, will generate an error. A layer named \u0026ldquo;01_Name\u0026rdquo; will also generate an error. However, a layer named \u0026ldquo;Name_01\u0026rdquo; is correct.\nDo not use Lua commands as names.\nFor example, a layer named “if” will conflict with the command if. Some Lua commands are: if, end, local, transition, play. A full list of Lua commands is here. Kwik will generate an alert error if it finds layers named with Lua commands\nAvoid having multiple layers with the same name.\nKwik will not export the second layer with the same name as it will overwrite the first one, (which will make the Lua code crazy). Kwik will provide an alert error if it finds layers with identical names.\nAvoid long names.\nAll layer names become variables when exported, meaning they use more memory and are more difficult to read. Also, they are going to be shortening anyways, as Lua will not allow variable names with more than 15 characters.\nKeep Layer Names Short for text layers\nText layer names are originally created using the content of the text from the canvas in Photoshop. If you have a long paragraph, the layer name will be the entire content of the long paragraph! Long layer names cause problems in the generated code, so edit the layer names to make them shorter. (This is the most common problem we have seen from our users reporting issues.) Don’t forget all text, besides the ones used in Sync audio feature, also are exported as images.\nGrouped layers\nKwik can export grouped layers as a single image. Use them to create more complex elements (for example, a multi-layered button with text, shadows, etc.), or for the creation of static elements. A common issue is to have all page elements in a group layer that images are not rendered separately. If you have a group with several layers, try to flatten them whenever it is possible. It will make the export process much faster.\nButton and Animation names of Kwik components\nAlthough Kwik offers an auto-naming feature, try to enter your own names (follow the rules above). It will help you to quickly edit your actions from the project view. This is a time saver for a project with several actions.\n"},{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/steps/","title":"Steps","tags":[],"description":"","content":"Steps Project folders\nPhotsohop/bookShopX\nbookTOC library.psd {{bookName}}Icon downloadBtn saveBtn savingTxt purchaseBtn restoreBtn infoTxt Buy Product Action dialog.psd {{bookName}}Icon downloadBtn saveBtn savingTxt purchaseBtn infoTxt hideOverlayBtn bookFree page1.psd page2.psd bookOne page1.psd page2.psd Solar2D\nmain.lua\nrequire(\u0026#34;controller.index\u0026#34;).bootstrap({name=\u0026#34;book\u0026#34;, sceneIndex = 1}) -- scenes.index {\u0026#34;library\u0026#34;, \u0026#34;dialog\u0026#34;} components/bookstore/model.lua\nHost URL of yours if you set up your own server.\nlocal YourHost = \u0026#34;http://localhost:8080\u0026#34; M.URL = YourHost..\u0026#34;/bookshelf/\u0026#34; M.backgroundImg = \u0026#34;bg.png\u0026#34; books model\nM.books = { bookFree = { name = \u0026#34;bookFree\u0026#34;, versions = {\u0026#34;en\u0026#34;, \u0026#34;jp\u0026#34;}, titles = {en=\u0026#34;bookOne\u0026#34;, jp=\u0026#34;\u0026#34;}, descriptions = {en=\u0026#34;desc\u0026#34;, jp =\u0026#34;\u0026#34;}, isFree = true, isOnlineImg = false, image = \u0026#34;App/bookFree/assets/images/title/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookFree\u0026#34;, google = \u0026#34;bookFree\u0026#34;, amazon = \u0026#34;bookFree\u0026#34;}, }, bookOne = { name = \u0026#34;bookOne\u0026#34;, versions = {\u0026#34;en\u0026#34;, \u0026#34;jp\u0026#34;}, titles = {en=\u0026#34;bookOne\u0026#34;, jp=\u0026#34;\u0026#34;}, descriptions = {en=\u0026#34;desc\u0026#34;,jp=\u0026#34;\u0026#34;}, isFree = false, isOnlineImg = true, image = \u0026#34;App/bookOne/assets/images/title/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookOne\u0026#34;, google = \u0026#34;bookOne\u0026#34;, amazon = \u0026#34;bookOne\u0026#34;}, } } BookServer\ncompress_assets/main.lua\ncompress and copy each assets of books to BookServer/bookstore folder with assets.json\nedit the book table and run it with Solar2D simulator\nlocal books = { {project = \u0026#34;bookFree\u0026#34;, serverFolder = \u0026#34;bookFree\u0026#34;}, {project = \u0026#34;bookOne\u0026#34;, serverFolder = \u0026#34;bookOne\u0026#34;}, } local onLineImages = { {project = \u0026#34;bookFree\u0026#34;, serverFolder = \u0026#34;bookFree\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;bookOne\u0026#34;, serverFolder = \u0026#34;bookOne\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, } bookstore folder\nbookFree/assets.json page1/assets.zip page2/assets.zip bookOne/assets.json run http-server and it check json is available\nhttp://localhost:8080/bookstore/bookFree/assets.json\nSolar2D simulator menu \u0026gt; show sand box folder\nyou need to clean the following folders if you want to recover the initial state. * Application Support * Documents * TemporaryFiles\nFor device build, you must set the valid product IDs from apple, google or amazon. For IAP Debug Mode, set the same name value to each filed.\nDebug mode IAP Badger https://github.com/happymongoose/iap_badger\nWhen you test it with debug as true for components/bookstore/model.lua , you need to set the book names as its dummies for the productNames.\nDon\u0026rsquo;t use the official product names from apple, google or amazon. With official IDs, debug mode fails to return a book name and IAP not work correctly.\nproductNames = {apple = \u0026#34;bookFree\u0026#34;, google = \u0026#34;bookFree\u0026#34;, amazon = \u0026#34;bookFree\u0026#34;}, build.settings iOS if you use http server instead of https, please set your domain in build.settings\nNSExceptionDomains\nhttps://docs.coronalabs.com/guide/hardware/appleATS/index.html\nAndroid config.lua needs google license key build.settings needs the permissions "},{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/server/","title":"Book Server","tags":[],"description":"","content":"Book Server Preparation After published your Book\u0026rsquo;s projects, you can use compress_assets/main.lua\nBookServer/compress_assets/main.lua\nthe script makes json and zip files\ncompress_assets/main.lua\nlocal command = require(\u0026#34;compress_assets\u0026#34;) command.setServerFolder(\u0026#34;macos\u0026#34;, \u0026#34;bookstore\u0026#34;) --command.setServerFolder(\u0026#34;win32\u0026#34;, \u0026#34;bookstore\u0026#34;) -- the name of Kwik project and the name of In App Purchase product -- local books = { {project = \u0026#34;Book01\u0026#34;, serverFolder = \u0026#34;book01\u0026#34;}, {project = \u0026#34;Book02\u0026#34;, serverFolder = \u0026#34;book02\u0026#34;}, } -- Use Online Images needs an image file -- local onLineImages = { {project = \u0026#34;Book01\u0026#34;, serverFolder = \u0026#34;book01\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book02\u0026#34;, serverFolder = \u0026#34;book02\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, } Notice: For bookstoe with multiple languaes, and Use Online Image is true, a thumbnail image from online server will be requested with lang ID. For instance,\nhttp://localserver:8080/bookshefl/book01en/bg.png\nFor this case, BookServer needs book01en, book01jp folders. Please modify the script with lang ID for onLineImages table\nlocal onLineImages = { {project = \u0026#34;Book01\u0026#34;, serverFolder = \u0026#34;book01en\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book01\u0026#34;, serverFolder = \u0026#34;book01jp\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book02\u0026#34;, serverFolder = \u0026#34;book02en\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book02\u0026#34;, serverFolder = \u0026#34;book02jp\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, } http-server Please prepare a http-server and put the contents of BookServer folder.\nhttp-server\ncd BookServer http-server http://127.0.0.1:8080 Hit CTRL-C to stop the server http://localhost:8080/bookstore/book01/assets.json\nPlease check the url in components/bookstore/model.lua\nlocal YourHost = \u0026#34;http://localhost:8080 M.URL = YourHost..\u0026#34;/bookstore/\u0026#34; Update an asset compress_assets/main.lua has command.updateAsset function\n-- -- update page1, videos -- local project = \u0026#34;Book02\u0026#34; local serverFolder = \u0026#34;book02\u0026#34; local page = 1 local type = \u0026#34;images\u0026#34; -- command.updateAsset(project, serverFolder, page, type) --[[ \u0026#34;audios\u0026#34; \u0026#34;read2me\u0026#34; \u0026#34;PNGs\u0026#34; \u0026#34;sprites\u0026#34; \u0026#34;particles\u0026#34; \u0026#34;WWW\u0026#34; \u0026#34;thumbnails\u0026#34; \u0026#34;images\u0026#34; \u0026#34;shared\u0026#34; ]] Assets folder Spritesheet Word audio Video use pngs Particles Web View "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/components/","title":"Components","tags":[],"description":"","content":"Components For instance components/pageX/page/swip.lua enables a page transition, and components/pageX/audios folder can have multiple audio lua files for instance short/audioOne.lua, long/audioTwo.lua. short audio file is loaded in to memory with audio.loadSound(), and long audio file is streaming with audio.loadStream().\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;pageX\u0026#34;, components = { layers = { { bg={} }, }, audios = { short = {\u0026#34;audioOne\u0026#34;}, long= {\u0026#34;audioTwo\u0026#34; }, groups = { }, timers = { }, variables = { }, page = { \u0026#34;controllers.swipe\u0026#34; } }, commands = { myAction,myEvents.testHandler }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene page common controllers swipe keyboard audio group timer Common components You can add a common component to components/common directory\nAnd let it pass in arguments of bootstrap function in main.lua\nlocal common = {commands = {\u0026#34;myEvent\u0026#34;}, components = {\u0026#34;myComponent\u0026#34;}} require(\u0026#34;controller.index\u0026#34;).bootstrap({ name=\u0026#34;book\u0026#34;, sceneIndex = 1, position = {x=0, y=0}, common =common }) Common components are executed after all the layer components of a scene are rendered. So you can access a layer component by UI.layers table.\nfor instance, myComponent.lua attaches a tap listener\nfunction _M:didShow(UI) local sceneGroup = UI.scene.view UI.layers.bg:addEventListener(\u0026#34;tap\u0026#34;, function(event) print(\u0026#34;bg is taaped\u0026#34;) end) end "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/events/","title":"Commands &amp; Events","tags":[],"description":"","content":"Commands \u0026amp; Events For an event for a page in a book commands/myAction.lua are triggeded with a dispatchEvent fucntion\nUI:dispatchEvent({ name = \u0026#34;myAction\u0026#34;, UI = UI }) this myAction is defined in commands table in components/pageX/index.lua\nFor a button, you see in components/pageX/index.lua, buttonOne layer has two events. they are tap and drag. These tap and drag events are handleld with commands/buttonOne/tap.lua and commands/buttonOne/drag.lua\ncommands are called as Action in Kwik. You can dispatchEvent with params to myAction.lua, myEvents.testHandler.lua\n{ name = \u0026#34;kwik4_1280x1920\u0026#34;, layers = { { bg={} }, { buttonOne={ events = {tap, drag}} }, }, components = { audios = { }, groups = { }, timers = { }, variables = { }, others = { } }, commands = { \u0026#34;myAction\u0026#34;, \u0026#34;myEvents.testHandler\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end } The assicated lua files are located in the commands folder\neditor.template/commands/pageX buttonOne tap.lua drag.lua myAction.lua myEvents/testHandler.lua For a common action for a book create a command lua in commands/common directory, for example\ncommands/common/myEvent.lua\nlocal instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local UI = params.UI print(\u0026#34;myEvent\u0026#34;) end) return instance And let it pass in arguments of bootstrap function in main.lua\nlocal common = {commands = {\u0026#34;myEvent\u0026#34;}, components = {myComponent={}}} require(\u0026#34;controller.index\u0026#34;).bootstrap({ name=\u0026#34;book\u0026#34;, sceneIndex = 1, position = {x=0, y=0}, common =common }) context:init function of controller/ApplicationContext.lua automtaically adds it\nthis context init is called everytime when a scene is loaded. You can dispatch an event to executre myEvent.lua like this\nUI:dispatchEvent({ name = \u0026#34;common.myEvent\u0026#34;, UI = UI }) "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/photoshop/","title":"Photoshop File","tags":[],"description":"","content":"Photoshop File https://www.ios-resolution.com/\niPhone 13 Pro Max\t1284x2778\niPad Pro 2048 x 2732\niPhone X 1125 x 2436\niPhone 11 Pro 1242 x 2688\nhttps://forums.solar2d.com/t/iphone-11-pro-max-screen-shots-in-simulator/151266/11\nKwik4 Ulitimate Config\n1280 x 1920\nhttps://kwiksher.com/doc/getting_startted/guidelines/blend_mode/\nhttps://kwiksher.com/doc/getting_startted/guidelines/screenshot/\nbackground\n1440 x 2280\niPhone X 1440 × 2772\nhttps://forums.solar2d.com/t/how-to-define-application-working-area-on-the-screen/351066/11\nhttps://forums.solar2d.com/t/safe-area-on-iphone-x-and-11-problem/353608\nhttps://github.com/SpyricGames/Solar2D-Plugins-Public\n"},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/tools/","title":"Tools","tags":[],"description":"","content":"Tools Kwik Visual Code Editor Launcher Harness Custom Code generate_scene_index tool Kwik Visual Code Editor update the test-proj/Solar2D/component/editor to develop/Solar2D/tools/kwik-editor\nThis tool visually edits Soar2D/src files of a Kwik project and is harnessed by Pegasus http-server\n↑ Select a layer or an event to review. You can edit values of properties\nTODO each kwik component with default values\nTODO ui components like checkbox/selectors \u0026hellip; for each component ⭐️\nreact compnents on webview \u0026ndash; can be shared with UXP panel which may send params via http to pegasus in kwik editor\ncurrent editPorpsTable.lua servers as plain table viewer \u0026amp; editor\nTODO save/copy params to .http (YAML) for httpYac\nTODO how to send text to clipboard from Solar2D　⭐️\nLauncher develop/Solar2D/tools/pegasus-launcher\ntest-Solar2D-SampleCode.http You can open a solar2D project from VS Code with httpYac\nHarness develop/Solar2D/tools/pegasus-harness\ntest_character_transitions.http test_Loading_animation.http You can post params with httpYac in VS Code to a Solar2D project\nTODO set Layer varaible with samples\nTODO create models: animation, transition2, button \u0026hellip;, and pegasus-receiver in kwik-editor ⭐️\nAnimation_bounce.http\nPOST /layers/logo Content-Type: application/yaml - transition: bounce - params: height: 400 width: 200 time: 1000 iterations: 0 Custom Code you can put your own code(.lua) into commands/pageX/ and componets/pageX/layers folder.\ncommands/pageX/*.lua components/pageX/layers/*.lua Kwik Exporter traverses folders of Solar2D project to integrate your additons. Or you can manually add the file names to components/pageX/index.lua\nfor instance, myrect.lua calls myEvents.testHandler when user taps the rect.\nThe $weight in a comment line at the top is a variable for Kwik. A scene componet(layer or your custom code)with lower value will be placed upper. The top layer from Photoshop is zero. Then values are increases to until the background layer. For your custom code , you can use minus or positive with decimal. For example, myrect is -2, mycircle is -1. If you change weight values of custom code files, don\u0026rsquo;t forget to publish code again.\n-- $weight=-2 -- local _M = {} -- function _M:init(UI) end -- function _M:create(UI) local sceneGroup = UI.scene.view local obj = display.newRect( sceneGroup, display.contentCenterX, display.contentCenterY-100, 100, 100 ) obj:setFillColor(0.2,0.2,0.2); obj:addEventListener(\u0026#34;tap\u0026#34;, function() UI.scene:dispatchEvent({ name = \u0026#34;myEvents.testHandler\u0026#34;, UI = UI }) end) end -- function _M:didShow(UI) end -- function _M:didHide(UI) end -- function _M:destory() end -- return _M myEvents.testHandker.lua\nlocal instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local UI = params.UI print(\u0026#34;commands.myEvents.testhander\u0026#34;) UI.scene:dispatchEvent({ name = \u0026#34;myAction\u0026#34;, UI = UI }) end ) -- return instance You can find your custom code are inserted in components/pageX/index.lua. The layers are sorted internally by values of $weight variable.\nlocal sceneName = ... -- local model = { name = \u0026#34;page01\u0026#34;, components = { layers = { {bg = {}}, {mycircle={}}, {myrect={}} }, audios = {}, groups = {}, others = {}, timers {}, variables = {} }, commands = { \u0026#34;myAction\u0026#34;, \u0026#34;myEvnets.testHandler\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end } -- local scene = require(\u0026#39;components.kwik.scene\u0026#39;).new(sceneName, model) return scene generate_scene_index tool create .lua for commands or components\nrun the follwoing tool to update scenes/pageX/index.lua to append the new .lua to the index.lua\n/develop/Solar2D/tools/generate_scene_index is a Solar2D application. You can open the main.lua in Solar2D simulator.\nthe table in the index.lua is updated by iterating files in editor.template/components and template/commands\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/icons/","title":"Icons Launch/Splash screens","tags":[],"description":"","content":"https://forums.solar2d.com/t/new-icon-size-for-ios/354492\n114x114 iOS loads Apple’s launch images of LaunchScreen.storyboardc made by Xcode. You can create it with Xcode.\nOn Android:\nStart App Show the default splash screen App\u0026rsquo;s first screen shows. On iOS:\nStart App Show Apple\u0026rsquo;s launch images Show the default splash screen App\u0026rsquo;s first screen shows. Kwik4 https://kwiksher.com/doc/kwik_toolset/project_and_pages/project_properties/publish/\nCopy these png files to ./build folders ?\niOS\nhttps://docs.coronalabs.com/guide/distribution/buildSettings/index.html#custom-app-icons\n├── Images.xcassets ├── AppIcon.appiconset │ ├── Contents.json │ ├── Icon-1024.png │ ├── Icon-120.png │ ├── Icon-152.png │ ├── Icon-167.png │ ├── Icon-180.png │ ├── Icon-40.png │ ├── Icon-58.png │ ├── Icon-76.png │ ├── Icon-80.png │ └── Icon-87.png └── Contents.json ├── launchimage-master ├── Launch.png ├── Launch@2x.png ├── Launch@3x.png ├── LaunchImage ├── LaunchImage.xcodeproj └── README.md Android\nTBI for Adaptive Icons Android 8 and Later\nhttps://docs.coronalabs.com/guide/distribution/androidResources/index.html\nhttps://developer.android.com/develop/ui/views/launch/icon_design_adaptive AndroidResources\nres/mipmap-anydpi-v26 res/mipmap-*dpi res/values ├── AndroidResources └── res ├── mipmap-anydpi-v26 │ └── ic_launcher.xml ├── mipmap-hdpi │ ├── ic_launcher.png │ └── ic_launcher_foreground.png ├── mipmap-mdpi │ ├── ic_launcher.png │ └── ic_launcher_foreground.png ├── mipmap-xhdpi │ ├── ic_launcher.png │ └── ic_launcher_foreground.png ├── mipmap-xxhdpi │ ├── ic_launcher.png │ └── ic_launcher_foreground.png ├── mipmap-xxxhdpi │ ├── ic_launcher.png │ └── ic_launcher_foreground.png └── values └── values.xml TODO kwik4 icons in build4 should be remapped to each ic_launcher.png Icon-xxxhdpi.png 192 × 192 Icon-xxhdpi.png 144 × 144 Icon-xhdpi.png 96 × 96 Icon-hdpi.png 72 × 72 Icon-mdpi.png 48 × 48 Icon-ldpi.png 36 × 36 HTML5\nhttps://forums.solar2d.com/t/home-screen-icon-bookmark/347798/4\n57×57 px\n60×60 px\n72×72 px\n76×76 px\n114×114 px\n120×120 px\n128×128 px\n144×144 px\n152×152 px\n180×180 px\n192×192 px\n\u0026lt;!-- To support old sizes --\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;57x57\u0026#34; href=\u0026#34;http://www.example.com/apple-touch-icon-57x57.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;72x72\u0026#34; href=\u0026#34;http://www.example.com/apple-touch-icon-72x72.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;114x114\u0026#34; href=\u0026#34;http://www.example.com/apple-touch-icon-114x114.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;144x144\u0026#34; href=\u0026#34;http://www.example.com/apple-touch-icon-144x144.png\u0026#34;\u0026gt; \u0026lt;!– To support new sizes –\u0026gt; \u0026lt;link rel=”apple-touch-icon” sizes=”60×60″ href=”http://www.example.com/touch-icon-iphone-60×60.png”\u0026gt; \u0026lt;link rel=”apple-touch-icon” sizes=”76×76″ href=”http://www.example.com/touch-icon-ipad-76×76.png”\u0026gt; \u0026lt;link rel=”apple-touch-icon” sizes=”120×120″ href=”http://www.example.com/touch-icon-iphone-retina-120×120.png”\u0026gt; \u0026lt;link rel=”apple-touch-icon” sizes=”152×152″ href=”http://www.example.com/touch-icon-ipad-retina-152×152.png”\u0026gt; \u0026lt;link rel=”apple-touch-icon” sizes=”180×180″ href=”http://www.example.com/apple-touch-icon-180×180.png”\u0026gt; \u0026lt;!– To support Android –\u0026gt; \u0026lt;link rel=”icon” sizes=”192×192″ href=”http://www.example.com/touch-icon-192×192.png”\u0026gt; \u0026lt;link rel=”icon” sizes=”128×128″ href=”http://www.example.com/niceicon.png”\u0026gt; Linux\nhttps://github.com/DanS2D/Solar2DTux-AppImageWIPStuff/blob/master/Solar2DTux.AppDir/Solar2DTux.desktop\n[Desktop Entry] Name=Solar2DTux Comment=Solar2DTux SDK Exec=usr/bin/Solar2DSimulator Icon=Solar2DTux Terminal=false Type=Application StartupNotify=true StartupWMClass=Solar2DSimulator Categories=Utility; https://docs.appimage.org/packaging-guide/from-source/linuxdeploy-user-guide.html#ref-linuxdeploy-package-manually\n/\u0026lt;app_name\u0026gt;. \u0026gt; ./linuxdeploy-x86_64.AppImage --appdir AppDir --executable ./foobar --icon-file ./icon.png --output appimage Windows\nassets/DeskTopIcon/Icon-win32.ico macOS\nassets/DeskTopIcon/Icon-osx.icns android(FireTV)\nassets/tvAsset/Default-Landscape-assets/Default-Landscape.png assets/tvAsset/tvosLaunch-assets/Banner-xhdpi.png tvos(appleTV)\nassets/tvAsset/tvosLaunch-assets/Icon-tvOS-Launch.png assets/tvAsset/tvosLaunch-assets/Icon-tvOS-TopShelf.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-Background.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoA.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoB.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoC.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoD.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-Background.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoA.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoB.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoC.png assets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoD.png "},{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/simulator/","title":"Simulator","tags":[],"description":"","content":"Simulator \u0026amp; Device Build Run with Simulator loading main.lua of BookShelfEmbedded with Corona Simulator, clicking purchase text will show up the IAP dialog Files \u0026gt; Show Project Sandbox, you find downloaded zip and bg.png. If you want to refresh the state beginning, delete the files from the Sandbox folders. TemporaryFiles must be cleared because the files from Internet are cached there. Build for device After everything all right with simulator, turn off debug mode IAP.lua and set the valid product IDs of apple, google or amazon in the following lua files of BookShelfTOC project. You may edit the files in App/TOC.\nApp/TOC/components/store/IAP.lua App/TOC/components/store/model.lua components/store/IAP.lua\niapOptions.salt change it as your own text iapOptions.debugMode false for device build function M:init(catalogue, restoreAlert, purchaseAlert) print(\u0026#34;iap init\u0026#34;) self.catalogue = catalogue self.restoreAlert = restoreAlert self.purchaseAlert = purchaseAlert local iapOptions = { catalogue = catalogue, filename = \u0026#34;episodes_inventory.txt\u0026#34;, --Salt for the hashing algorithm salt = \u0026#34;something tr1cky to gue55!\u0026#34;, failedListener = failedListener, cancelledListener = failedListener, --Once the product has been purchased, it will remain in the inventory. Uncomment the following line --to test the purchase functions again in future. It\u0026#39;s also useful for testing restore purchases. --doNotLoadInventory=true, debugMode = true, } iap.init(iapOptions) print(\u0026#34;iap init end\u0026#34;) end components/store/model.lua\nproductNames.apple, productNames.google, productNames.amazon to be set for device build. If not used, make it empty string as \u0026quot;\u0026quot; M.catalogue = { products = { Episode02 = { productNames = { apple=\u0026#34;Episode02_apple\u0026#34;, google=\u0026#34;Episode02_googgle\u0026#34;, amazon=\u0026#34;Episode02_amazon\u0026#34;}, productType = \u0026#34;non-consumable\u0026#34;, onPurchase = function() IAP.setInventoryValue(\u0026#34;unlock_Episode02\u0026#34;) end, onRefund = function() IAP.removeFromInventory(\u0026#34;unlock_Episode02\u0026#34;) end, }, Episode03 = { productNames = { apple=\u0026#34;Episode03_apple\u0026#34;, google=\u0026#34;Episode03_googgle\u0026#34;, amazon=\u0026#34;Episode03_amazon\u0026#34;}, productType = \u0026#34;non-consumable\u0026#34;, onPurchase = function() IAP.setInventoryValue(\u0026#34;unlock_Episode03\u0026#34;) end, onRefund = function() IAP.removeFromInventory(\u0026#34;unlock_Episode03\u0026#34;) end, }, }, inventoryItems = { unlock_Episode02 = { productType=\u0026#34;non-consumable\u0026#34; }, unlock_Episode03 = { productType=\u0026#34;non-consumable\u0026#34; }, } } "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/unittest/","title":"Unit Test","tags":[],"description":"","content":"Unit Test Examples cmponents/editor/tests/suite_controller.lua cmponents/editor/tests/suite_selector.lua components/editor/index.lua\nlocal unitTestOn = true components/editor/tests/index.lua\nrequire \u0026#34;extlib.lunatest\u0026#34; local M = { run = function (props) print(\u0026#34;============ lunatest =============\u0026#34;) lunatest.suite(\u0026#34;components.editor.tests.suite_controller\u0026#34;) lunatest.suite(\u0026#34;components.editor.tests.suite_selector\u0026#34;, props) lunatest.run() print(\u0026#34;============ end =============\u0026#34;) end } return M Examples cmponents/editor/tests/suite_controller.lua it tests editor/controller/index.lua\ncontroller:render(book, page, layer, tool, class, props)\ncontroller:save(book, page, layer,tool, nil, props ) assert_string(dst, \u0026ldquo;fail\u0026rdquo;)\n\u0026hellip;\nmodule(..., package.seeall) function suite_setup() controller = require \u0026#34;components.editor.controller.index\u0026#34; files = {} updatedScene = nil end function setup() book = \u0026#34;bookFree\u0026#34; page = \u0026#34;page1\u0026#34; tool = \u0026#34;interaction\u0026#34; layer = \u0026#34;butWhite\u0026#34; -- Update scenes.components.layers.butWhite with the props class = \u0026#34;button\u0026#34; props = {name=\u0026#34;helloBTN\u0026#34;, class=\u0026#34;button\u0026#34;, kind=\u0026#34;tap\u0026#34;, actionName = \u0026#34;onClick\u0026#34;, over=\u0026#34;helloOver\u0026#34;, btaps = 1, mask=\u0026#34;\u0026#34;} scene = { name = \u0026#34;canvas\u0026#34;, components = { layers = { { back={ } }, { butBlue={ class={\u0026#34;button\u0026#34;}, {A={}}, {B={}} } }, { butWhite={ } }, }, audios = { }, groups = { }, timers = { }, variables = { }, others = { } }, commands = { \u0026#34;blueBTN\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end } end function teardown() end function test_render() local dst = controller:render(book, page, layer, tool, class, props) assert_string(dst, \u0026#34;fail\u0026#34;) -- local path = system.pathForFile(dst, system.TemporaryDirectory ) local file = io.open( path, \u0026#34;r\u0026#34; ) assert_userdata(file, \u0026#34;fail\u0026#34;) files[#files + 1] = dst end cmponents/editor/tests/suite_selector.lua automatically it loads eventOne.json in page1\nlocal M = {} local selectors local UI local bookTable local pageTable function M.init(props) selectors = props.selectors UI = props.UI bookTable = props.bookTable pageTable = props.pageTable end function M.suite_setup() selectors.projectPageSelector:show() selectors.projectPageSelector:onClick(true) -- UI.scene.app:dispatchEvent { name = \u0026#34;editor.selector.selectApp\u0026#34;, UI = UI } -- appFolder = system.pathForFile(\u0026#34;App\u0026#34;, system.ResourceDirectory) -- default -- useTinyfiledialogs = false -- default --- bookTable:commandHandler({book=\u0026#34;bookFree\u0026#34;}, nil, true) pageTable:commandHandler({page=\u0026#34;page1\u0026#34;},nil, true) end function M.setup() end function M.teardown() end -- function M.test_component() -- selectors.projectPageSelector:show() -- end function M.test_action() selectors.componentSelector:show() selectors.componentSelector:onClick(true, \u0026#34;actionTable\u0026#34;) UI.editor.currentAction = \u0026#34;eventOne\u0026#34; UI.scene.app:dispatchEvent { name = \u0026#34;editor.action.selectAction\u0026#34;, UI = UI } end return M "},{"uri":"https://kwiksher.github.io/kwik5docs/get_started/vscode/","title":"Visual Studio Code","tags":[],"description":"","content":"VS Code the following extensions helps your coding with Solar2D simulator.\nSolar2D Autocomplete Solar2d Companion for Visual Studio Code Local Lua Debugger Run Terminal Command Local Lua Debugger For debugging with Local Lua Deubgger, launch.json should be placed in your workspace folder. For instance,\nAssuming Kwik projects are located in ~/Kwik folder and this is your workplace folder of Visual Studio Code. launch.json will be created under .vscode/ folder\n~/Kwik/.vscode/launch.json\nCorona Simulator.app is specified and ${file} is in the last argurment\nthis is for Mac\n\u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;lua-local\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;/Applications/Corona/Corona Simulator.app/Contents/MacOS/Corona Simulator\u0026#34;, }, \u0026#34;args\u0026#34;: [ \u0026#34;-no-console\u0026#34; \u0026#34;YES\u0026#34; \u0026#34;-debug\u0026#34; \u0026#34;1\u0026#34; \u0026#34;-project\u0026#34; \u0026#34;${file}\u0026#34; ] } ] } for Windwos\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;lua-local\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;C:\\\\Program Files (x86)\\\\Corona Labs\\\\Corona\\\\Corona Simulator.exe\u0026#34;, }, \u0026#34;args\u0026#34;: [ \u0026#34;/no-console\u0026#34;, \u0026#34;/debug\u0026#34;, \u0026#34;${file}\u0026#34; ] }] } SingleBook project contains Photsohop/book/*.psd and lua files under Solar2D/src folder\n~/Kwik/SingleBook/Solar2D/src/main.lua open main.lua in Visual Studio Code and press F5 (Run \u0026gt; Start Debugging)\nmain.lua needs lldebugger.start()\nif os.getenv(\u0026#34;LOCAL_LUA_DEBUGGER_VSCODE\u0026#34;) == \u0026#34;1\u0026#34; then local lldebugger = loadfile(os.getenv(\u0026#34;LOCAL_LUA_DEBUGGER_FILEPATH\u0026#34;))() lldebugger.start() end Run Terminal Command this is a utility to run terminal commands. You can select a folder and right click opens a dialog to select a terminal command\nYou can add a terminal command to settings.json\nfor Mac\n{ \u0026#34;command\u0026#34;:\u0026#34;\\\u0026#34;/Applications/Corona/Corona Simulator.app/Contents/MacOS/Corona Simulator\\\u0026#34; ./ -no-console YES\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;Solar2D\u0026#34; }, "},{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/versions/","title":"Book Versions","tags":[],"description":"","content":"Book Versions It is a feature to download a different language version of a book. A user pays for a book and choose to download a book with his/her language\nModified sample project is here.\nbook01en book01jp book02en book02jp bookTOC library.psd dialog.psd\nBookSever BookSever/compress_assets/main.lua\ncommand.setServerFolder(\u0026#34;macos\u0026#34;, \u0026#34;bookshelf\u0026#34;) --command.setServerFolder(\u0026#34;win32\u0026#34;, \u0026#34;bookshelf\u0026#34;) local books = { {project = \u0026#34;Book01en\u0026#34;, serverFolder = \u0026#34;book01en\u0026#34;}, {project = \u0026#34;Book01jp\u0026#34;, serverFolder = \u0026#34;book01jp\u0026#34;}, {project = \u0026#34;Book02en\u0026#34;, serverFolder = \u0026#34;book02en\u0026#34;}, {project = \u0026#34;Book02jp\u0026#34;, serverFolder = \u0026#34;book02jp\u0026#34;}, } local onLineImages = { {project = \u0026#34;Book01en\u0026#34;, serverFolder = \u0026#34;book01en\u0026#34;, image = \u0026#34;build4/assets/images/p1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book01jp\u0026#34;, serverFolder = \u0026#34;book01jp\u0026#34;, image = \u0026#34;build4/assets/images/p1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book02en\u0026#34;, serverFolder = \u0026#34;book02en\u0026#34;, image = \u0026#34;build4/assets/images/p1/bg@4x.png\u0026#34;}, {project = \u0026#34;Book02jp\u0026#34;, serverFolder = \u0026#34;book02jp\u0026#34;, image = \u0026#34;build4/assets/images/p1/bg@4x.png\u0026#34;}, } Solar2D/components/bookstore/model.lua\nthe versions are added\nM.books = { bookFree = { name = \u0026#34;bookFree\u0026#34;, versions = {\u0026#34;en\u0026#34;, \u0026#34;jp\u0026#34;}, titles = {en=\u0026#34;Book Free\u0026#34;, jp=\u0026#34;ブック フリー\u0026#34;}, descriptions = {en=\u0026#34;free\u0026#34;, jp =\u0026#34;無料\u0026#34;}, isFree = true, isOnlineImg = false, image = \u0026#34;App/bookFree/assets/images/title/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookFree\u0026#34;, google = \u0026#34;bookFree\u0026#34;, amazon = \u0026#34;bookFree\u0026#34;}, }, bookOne = { name = \u0026#34;bookOne\u0026#34;, versions = {\u0026#34;en\u0026#34;, \u0026#34;jp\u0026#34;}, titles = {en=\u0026#34;book\u0026#34;, jp=\u0026#34;ブック\u0026#34;}, descriptions = {en=\u0026#34;$10\u0026#34;,jp=\u0026#34;1000円\u0026#34;}, isFree = false, isOnlineImg = true, image = \u0026#34;App/bookOne/assets/images/title/bg.png\u0026#34;, productNames = {apple = \u0026#34;bookOne_apple\u0026#34;, google = \u0026#34;bookOne_google\u0026#34;, amazon = \u0026#34;bookOne_amazon\u0026#34;}, } } when user purchase template, user can download the default of template or en, jp. Kwik internally downloads template.zip or bookXen/asset zip files or bookXjp/asset zip files\nuse case memo TODO direct open a book according to the language code of the page\nwhen user click purchase button and the transaction is completed, next user needs to click download-version button to get an asset zip of a selected language from Book server\nlibrary.psd\npurchase button is not available in library page. It is removed (alpha=0)\nuser can not directly open a book from a thumbnail icon. Click the icon to pop up the dilaog, and then user choose one of version of a book\nfrom dialog, user can open a book if it has been purchased and been downloaded in the app "},{"uri":"https://kwiksher.github.io/kwik5docs/design/architecture/","title":"Architecure","tags":[],"description":"","content":"Architecure UXP panel\nflowchart LR Designer((fas:fa-user Designer)) Developer((fas:fa-user Developer)) User((fas:fa-user User or AI)) subgraph Photoshop[Photoshop UXP] graphics(images/lua renderer\u0026lt;br\u0026gt;scaffolder) end subgraph Editor[Kwik Visual Editor] subgraph App assets[(assets/images\u0026lt;br\u0026gt;models/json)] lua[(Source .lua)] end tools(GUI tools\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;renderer\u0026lt;br\u0026gt;scaffolder) httpServer RestApi(RestApi\u0026lt;br\u0026gt;transform\u0026lt;br\u0026gt;animation) RestApi -.- tools end subgraph RestApi[REST API] form(Properties \u0026lt;br\u0026gt; CRUD) end subgraph VSCode httpYac(httpYac) coding end Photoshop -.img/json.-\u0026gt; assets RestApi \u0026lt;-.img/json.-\u0026gt; httpServer httpServer \u0026lt;-.-\u0026gt; assets httpServer -.- tools tools -.- App User -.- Browser Browser-.maybe in future.- RestApi httpYac -.- RestApi coding -.- lua RestApi -.- assets Designer --- tools Designer --- Photoshop Developer --- VSCode rest api\npegasus is runningin Editor\nrun Editor\nupload an image to pegasus server\nsave it assets/images/book/ create display.object .json Kwik Visual Editor\noutputs images/json to App/book\nrun App/book\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/builder/","title":"Command line Build","tags":[],"description":"","content":"Command line Build https://github.com/joehinkle11/Automated-Corona-Builder\nWindows\nhttps://forums.solar2d.com/t/command-line-build/347047/20\ncd \u0026ldquo;%CORONA_PATH%\u0026rdquo; Native\\Corona\\win\\bin\\CoronaBuilder.exe build \u0026ndash;lua Z:\\Projects\\b2-win-html.lua\nMac\nhttps://forums.solar2d.com/t/command-line-build-documentation-macos/348547/5\n~/Library/Application\\ Support/Corona/Native/Corona/mac/bin/CoronaBuilder.app/Contents/MacOS/CoronaBuilder build /path/to/params.lua\n--Android: local params = { platform=\u0026#39;android\u0026#39;, appName=\u0026#39;appName\u0026#39;, appVersion=\u0026#39;1.1.2\u0026#39;, certificatePath = \u0026#39;path\\_to\\_keystore\u0026#39;, keystorePassword = \u0026#39;\\*\\*\\*\\*\\*\u0026#39;, keystoreAlias = \u0026#39;alias\u0026#39;, keystoreAliasPassword = \u0026#39;\\*\\*\\*\\*\\*\\*\u0026#39;, androidVersionCode = \u0026#39;3\u0026#39;, dstPath=\u0026#39;/path/to/destination/folder\u0026#39;, projectPath=\u0026#39;/path/to/project/folder\u0026#39;, androidAppPackage=\u0026#39;com.example.myapp\u0026#39;, androidStore = \u0026#39;none\u0026#39; } return params --HTML: local params = { platform=\u0026#39;html5\u0026#39;, appName=\u0026#39;My app\u0026#39;, appVersion=\u0026#39;3.2.1\u0026#39;, dstPath=\u0026#39;/path/to/destination/folder\u0026#39;, projectPath=\u0026#39;/path/to/project/folder\u0026#39;, includeStandardResources = \u0026#39;true\u0026#39;, } return params --iOS: local params = { platform=\u0026#39;ios\u0026#39;, appName=\u0026#39;My App\u0026#39;, appVersion=\u0026#39;1.1.1\u0026#39;, certificatePath = \u0026#39;/path/to/certificate/myapp.mobileprovision\u0026#39;, dstPath=\u0026#39;/path/to/destination/folder\u0026#39;, projectPath=\u0026#39;/path/to/project/folder\u0026#39;, } return params -- Mac: { platform=\u0026#39;macos\u0026#39;, appName=\u0026#39;My App\u0026#39;, appVersion=\u0026#39;3.2.1\u0026#39;, certificatePath = \u0026#39;/path/to/certificate/myapp.mobileprovision\u0026#39;, dstPath=\u0026#39;/path/to/destination/folder\u0026#39;, projectPath=\u0026#39;path/to/project/folder\u0026#39;, } return params Node.js ( HTML5 Builder )\nhttps://github.com/develephant/corona-html5-builder/blob/master/README.md "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/content/","title":"Content X Structure","tags":[],"description":"","content":"Content X Structure test/base-proj/Solar2D/editor.template\nobsolete develop/UXP/kwik-exporter/plugin/kwik/base-proj/Solar2D/editor.template\n. ├── assets │ ├── audios │ │ ├── long │ │ ├── short │ │ └── sync │ │ ├── en │ │ ├── jp │ ├── fonts │ ├── images │ │ └── pageX │ ├── model.json │ ├── particles │ ├── sprites │ ├── thumbnails │ ├── videos │ └── www ├── build.settings ├── commands │ └── pageX ├── components │ └── pageX │ ├── audios │ ├── layers │ │ ├── layer_image.lua │ ├── groups │ ├── page │ │ └── controllers │ ├── timers │ ├── variables │ └──index.lua ├── config.lua ├── mediators ├── models example bookFree/page1\n. ├── assets │ ├── images │ │ ├── page1 │ │ │ ├── bg.png │ │ │ ├── bg@2x.png │ │ │ ├── bg@4x.png │ │ │ ├── gotoBtn.png │ │ │ ├── gotoBtn@2x.png │ │ │ ├── gotoBtn@4x.png │ │ │ ├── title.png │ │ │ ├── title@2x.png │ │ │ └── title@4x.png │ │ └── page2 │ └── thumbnails │ ├── page1.png │ └── page2.png ├── commands │ ├── page1 │ │ └── eventOne.lua │ └── page2 ├── components │ ├── page1 │ │ ├── audios │ │ ├── layers │ │ │ ├── bg.lua │ │ │ ├── gotoBtn.lua │ │ │ ├── gotoBtn_animation.lua │ │ │ ├── title.lua │ │ │ └── title_animation.lua │ │ ├── groups │ │ ├── page │ │ ├── times │ │ ├── variables │ │ └── index.lua │ └── page2 ├── main.lua ├── mediators │ ├── page1Mediator.lua │ └── page2Mediator.lua ├── models ├── page1 │ ├── bg.json │ ├── events │ │ └── eventOne.json │ ├── gotoBtn.json │ ├── gotoBtn_animation.json │ ├── index.json │ ├── title.json │ └── title_animation.json └── page2 "},{"uri":"https://kwiksher.github.io/kwik5docs/design/","title":"Design","tags":[],"description":"","content":"Design Project model\nrobotlegs template components commands Tools\nimage exporter\nPS/XD UXP\nvisual editor (frontEnd)\nSolar2D\nlive editor (Maybe) React\nuxp plugin for Ps or XD web app REST server\npegasus-harness\npegasus-launcher\nfrontEnd app sends REST API requests to harness of pegasus lua server\nthis server offers the renderer of .lua for components and commands\nother tools\ngenerate_scene_index Sample projects\nImage Exporter plugin for Adobe Photoshop\nProject Model\nsample-projects/Pegasus\ntest/base-proj/Solar2D/App/bookFree\nVisual Editor(React)\n{{webview html panel}}\nUXP Browser Visual Live Editor(Solar2D)\nSolar2D/tools/kwik-editor/App/kwikEditor to be copied into a project? Or make them as components like a AtoB?\nbooks/pages(scenes)/layers\nmenu\ntools/actions with icons\nselectPage\nselectLayer with filter\nselect class show an event with class name like button-\u0026gt;onTap, anim-\u0026gt;onComplete button (-\u0026gt; New Action Icon) selectComponent\naudio event group timer event var add a component to a layer or a page selected\nselectAction\nlist actions\ncross references to components\nAction Editor\nAdd a command user select Animation list animations user select an animation, select an operation editt props Drag \u0026amp; Drop to change the order of commands Pegasus \u0026amp; httpYac to get/post properteis of components and actions? yaml props in .http\nCopy/(optional)EditRawJSON/Apply\ncopy json-props in a buffer (optional) show Edit JSON panel: json-props in text field, then you can copy it or modify select components and click paste button? audio/group/timer/var are independent from layers\ncomponents w/o events\npage\ngroup variable layer replacements\nset lang multiplier particles dynamic text text mask interactions\ncanvas scroll physics\nenv body force joint components with events\ntimer\naudio\nlayer (replacements)\nonComplete\nanimation video countdown text input transition\nonStart onComplete onPause onResume onCancel onRepeat sprite\nbegan ended bounce loop next sync audio text\nword timecode interactions\nbutton\ntap # press release drag\ndrop area dragging release swipe\npinch\npinching release spin\nclockwise anti clockwise shake\nparallax\nforward backword physics\ncollision preCollision postCollision create \u0026lsquo;select book/page/layer\u0026rsquo; menu at the bottom\nlayers table for a seclection . showOverlay?\nlayer name with \u0026lsquo;Add Class\u0026rsquo; button?\ncreate tools/actions with icons at the bottom\nselect animation \u0026gt; linear save/load\nscene/layers create? read update crud a class save table in lua into json publish json to lua TODO\nadd audio icon, action icon initApp to select an app folder? rename it to select App? move menu position to top/buttom/right/left Tools\ndevelop/Solar2D/tools/pegasus-harness\ndevelop/Solar2D/tools/pegasus-launcher\nREST API requests from httpYac are sent to pegasus\ngenerate_scene_index\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/image/","title":"Layer","tags":[],"description":"","content":"Layer page1\npage4 for demonstrating layers and groups\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page4\u0026#34;, components = { layers = { { bg={} }, { copyright={} }, { star={} }, { GroupA={ { Ellipse = {} }, { SubA = { { Triangle = {} }, } }, } }, { hello={} }, }, audios = {}, groups = {\u0026#34;SubA\u0026#34;, \u0026#34;GroupA\u0026#34;, \u0026#34;myGroup\u0026#34; }, timers = {}, variables = {}, page = {} }, commands = { -- \u0026#34;myAction\u0026#34;, \u0026#34;myEvents.testHandler\u0026#34;, }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene scenes/pageX/background.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 1 local Props = { blendMode = \u0026#34;normal\u0026#34;, height = 520, width = 1000, kind = pixel, name = \u0026#34;bg\u0026#34;, x = 1000 -1000/2, y = 520/2, alpha = 100/100, } -- _M.imageWidth = Props.width/4 _M.imageHeight = Props.height/4 _M.mX, _M.mY = _K.ultimatePosition(Props.x, Props.y, \u0026#34;\u0026#34;) _M.randXStart = _K.ultimatePosition() _M.randXEnd = _K.ultimatePosition() _M.dummy, _M.randYStart = _K.ultimatePosition(0, ) _M.dummy, _M.randYEnd = _K.ultimatePosition(0, ) _M.infinityDistance = (parseValue() or 0)/4 .... .... .... -- function _M:localVars(UI) end -- function _M:localPos(UI) end -- function _M:didShow(UI) end -- function _M:toDispose(UI) end -- function _M:toDestory() end -- return _M \u0026lsquo;_M.weight = num\u0026rsquo; controlls the order of display objects for kwik-genereate-index tool that outputs scenes/pageX/index.lua\nscenes/pageX/groupOne/index.lua\n_M = {} _M.weight = 1 -- -- this index.lua is for kwik-generate-model -- you may put additional code here -- return _M scenes/pageX/groupOne/imageOne.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 1 local Props = { ... .... } scenes/pageX/groupOne/imageTwo.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 2 local Props = { ... .... } scenes/pageX/index.lua\nBottom to Top order\n{ name = \u0026#34;pageX\u0026#34;, layers = { {background={}}, {groupOne = { {imageTwo}, {imageOne}, }}, }, components = {}, events = {}, } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/workflow/lua/","title":"Lua Code","tags":[],"description":"","content":"Lua you don\u0026rsquo;t need to use kwik-generate-model nor kwik-editor to output lua files. You can skip making .json files of these tools, and you create a lua file manually into a folder, and append a name of additional file to scenes/pageX/index.lua\ncommands/pageX/**/*.lua components/pageX/**/*.lua At runtime, Kwik Code Framework reads scenes/pageX/index.lua to load each .lua files of pageX. The object names for commands, compnents, scenes are defined in the index.lua.\ncomponents/pageX/index.lua kwik-genereate-index is a tool to update the index.lua from traversing the folders above.\ncreate .lua for commands, components, layers of pageX, run the tool to generate components/pageX/index.lua you don\u0026rsquo;t need to use kwik-generate-index tool. You can manually edit it but it would be better to generate the index.lua with the tool.\nAlternatively, there is another tool named kwik-scaffold-lua. This tool scafolds .lua files from components/pageX/index.lua. The tool does not overwrite .lua if exists, and may delete .lua if not defined in index.lua\nWhich Workflow do you like?\nA\nuse kwik-generate-index everytime after you update commands, components, senes lua files.\nB\nuse kwik-scaffold-lua to create a lua for commands, components then edit the lua file.\nI like A because thinking about files/folders strcure with a file explorer, and coping/pasting an exsiting file could be easier when coding is in progress.\nTo initiate a project, B would work quicky to make a skelton structure.\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/","title":"Project Model","tags":[],"description":"","content":"Project Model test/base-proj/\nPhotoshop/bookshop\n├── bookFree │ ├── page1.psd │ ├── page2.psd ├── bookOne ├── page1.psd └── page2.psd Solar2D\nTODO add a layer group\n. ├── AndroidResources ├── App │ ├── bookFree │ ├── assets │ │ ├── images │ │ │ ├── page1 │ │ │ │ ├── bg.png │ │ │ │ ├── bg@2x.png │ │ │ │ ├── bg@4x.png │ │ │ │ ├── gotoBtn.png │ │ │ │ ├── gotoBtn@2x.png │ │ │ │ ├── gotoBtn@4x.png │ │ │ │ ├── title.png │ │ │ │ ├── title@2x.png │ │ │ │ └── title@4x.png │ │ │ ├── page2 │ │ └── thumbnails │ ├── commands │ │ ├── page1 │ │ │ ├── eventOne.lua │ │ │ └── eventTwo.lua │ │ └── page2 │ ├── components │ │ ├── page1 │ │ │ ├── audios │ | | ├── layers │ | | │ ├── bg.lua │ | | │ ├── gotoBtn.lua │ | | │ ├── gotoBtn_animation.lua │ | | │ ├── index.lua │ | | │ ├── title.lua │ | | │ └── title_animation.lua │ │ │ ├── groups │ │ │ ├── page │ │ │ ├── times │ │ │ └── variables │ | ├── page2 │ │ └── index.lua │ ├── models │ ├── page1 │ │ ├── audios │ │ ├── layers │ │ ├── groups │ │ ├── page │ │ ├── times │ │ ├── variables │ │ ├── bg.json │ │ ├── commands │ │ │ └── eventOne.json │ │ ├── gotoBtn.json │ │ ├── gotoBtn_animation.json │ │ ├── index.json │ │ ├── title.json │ │ └── title_animation.json │ └── page2 │ ├── Images.xcassets ├── LaunchScreen.storyboardc ├── assets ├── build.settings ├── commands │ ├── app │ ├── common │ │ └── myEvent.lua │ └── kwik ├── components │ ├── bookstore │ ├── common │ │ ├── bookstoreNavigation.lua │ │ ├── index.lua │ │ ├── keyboardNavigation.lua │ │ ├── myComponent.lua │ │ └── thumbnailNavigation.lua │ ├── editor │ └── kwik ├── config.lua ├── controller ├── en.lproj ├── extlib ├── lib ├── mySplashScreen.png └── main.lua "},{"uri":"https://kwiksher.github.io/kwik5docs/design/workflow/workflow/","title":"REST API","tags":[],"description":"","content":"REST API - YAML put images in App/demo/assets/page01\nlogo panel message button background shape1 shape2 Tool\nFinder/File Expolorer Plugin for Photoshop or XD will export images Editor html post image form network display.loadRemoteImage\nhttps://solar2d.com/images/logo.png\naccess images of XD shared view? or able to load them all?\nnetwork.download\nCreate layer structure\nEditor lists the images Order Top/Bottom/Up/Down frontEnd uses Adobe React Spectrum (in future, support screen reader etc)\nREST API to get the list of images and post the orderd list back\nGET /layers\n- background: [] - button: [] - logo: [] - message: [] - panel: Change the order of layers\nPOST /layers - logo: [] - panel: - message: [] - button: [] - background: [] Set animation and button\ntest KwikTheCat for evaluation\none by one\nPOST /layers/logo classes: - animation Or\nPOST /layers/logo Content-Type: application/yaml - transition: bounce - params: height: 400 width: 200 time: 1000 iterations: 0 GUI in Edtior(Solar2D) for transformation, draggable to set a position\nPOST /layers/panel/button classes: - button All together\nPOST /layers - logo: [] classes: - animation - panel: - message: [] - button: [] classes: - button - background: [] "},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/","title":"Tools","tags":[],"description":"","content":"Tools Exporrter plugin for PS, XD\nUXP\nexport images export source code traverse photoshop layers\ncomponents/pageX/layers/**/*.lua\nkwik-exporter\\src\\photoshop\\publishCode.ts\ntraverse App/contentX/\ncommands/pageX/ for envets components/pageX for components such as audios,groups .. components/pageX/layers from Photoshop and attached animation, button generate_scene_index\\generate_models.lua\nmerge the both results to ouput components/pageX/index.lua ⭐️\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page01\u0026#34;, components = { layers = {{bg = {}}, {layerX = {class={button}}}}, audios = {}, groups = {}, others = {}, timers = {}, variables = {} }, commands = {\u0026#34;bg.clickLayer\u0026#34;}, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) return scene develop/UXP/kwik-exporter\nA layer set is exported as one single image if assets/images/pageX has the foler with the same name of the layer set.\nexport images\nexport props\noutput .json/.lua develop\\UXP\\kwik-exporter\\plugin\\kwik\\templates\\components\\\nlayer_image.json layer_image.lua (TODO) Update develop\\Solar2D\\template to sync with the two files.\n(TODO) UXP/plugin/kwik/template is a clone of template/App/contentX\n├─Solar2D │ ├─robotlegs │ │ ├─App │ │ │ ├─book │ │ │ │ ├─assets │ │ │ │ │ ├─images │ │ │ │ │ │ └─page01 │ │ │ │ ├─commands │ │ │ │ │ └─page01 │ │ │ │ │ └─layers │ │ │ │ ├─components │ │ │ │ │ └─page01 │ │ │ │ ├──models │ │ │ │ └─page01 │ ├─template │ │ ├─App │ │ │ └─contentX │ │ │ ├─assets │ │ │ ├─commands │ │ │ │ └─pageX │ │ │ ├─components │ │ │ │ ├─pageX │ │ │ │ │ ├─audios │ │ │ │ │ ├─layers │ │ │ │ │ │ ├─animations │ │ │ │ │ │ ├─images │ │ │ │ │ │ ├─interactions │ │ │ │ │ │ ├─physics │ │ │ │ │ │ └─replacements │ │ │ │ │ │ ├─particles │ │ │ │ │ │ ├─sprites │ │ │ │ │ │ ├─syncAudioText │ │ │ │ │ │ ├─videos │ │ │ │ │ │ └─www │ │ │ │ │ ├─groups │ │ │ │ │ ├─page │ │ │ │ │ │ ├─controls │ │ │ │ │ ├─timers │ │ │ │ │ └─variables │ │ │ │ └─store ? │ │ │ ├─models │ │ │ │ └─pageX │ │ │ │ ├─commands │ │ │ │ └─components │ └─tools │ ├─kwik-editor └─UXP └─kwik-exporter ├─plugin │ ├─icons │ └─kwik │ ├─templates │ │ ├─components │ │ │ └─kwik │ │ ├─model │ │ │ ├─components │ │ │ ├─events │ │ │ └─layers │ │ └─scenes Editor\nSolar2D Desktop App\n/develop/Solar2D/tools/kwik-editor (Maybe) Web App (React)\nREST Server\nreceives Props and Commands and then renders .lua/.json\n/develop/Solar2D/tools/pegasus-harness\n/develop/Solar2D/tools/pegasus-launcher\nUtilities\ngenerating scene/pageX/index.lua\nthe table in the index.lua is created by interating files in editor.template/components and template/commands\nscafolding (optional)\nit outputs .lua files to components and commands folder by reading scene/pageX/index.lua\n/develop/Solar2D/tools/generate_scene_index\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/plugins/","title":"UXP Plugins","tags":[],"description":"","content":"UXP Plugins Kwik4 created a project folder where psd files are placed. Kwik5 you can creat a folder for your psd files on your own. When Kwik Exporter opens, it asks for the folder location.\nExporter plugins for PS, XD develop/UXP/kwik-exporter\nthe folder name/path is saved in a json\nPhotoshop Files\nOpen psd files from a folder\nDrag \u0026amp; Drop to change the order of psd files\none psd file corresponds one scene in Solar2D code.\na psd can be marked for being ignored. .ignore file?\nSolar2D Project\nApp/book folder should be selected\nPublish\nselected psd files\nActive Document\nExport images Export code Layer Groups\nYou can export images of a layer group\nPublish all images of selected documents\nmark checkboxes of document\u0026rsquo;s names you want to publish https://developer.adobe.com/xd/uxp/uxp/reference-spectrum/User%20Interface/\nspectrum tableview is not yet supported in UXP\nhttps://react-spectrum.adobe.com/react-spectrum/TableView.html\n- Ctl(Win) or Option(Mac) + Space key toggles selection for the focused row - toggle all on/off clcik\nopendFileDialog asks a book folder under App folder.\nActive Document Export Images for an active document document\nopen .psd by cliking the psd name in the list\nKwik4_1280x1920.psd with background image 1440x2776\nkwik5 does not request the canvas size of .psd as 1280x1920 when publising\nclcik Export Images\nopenFileDialog asks a book folder under App folder.\nActive Document Export each image of a layerSet(layer group) in .psd\ncreate a folder with same name as layerSet in book/assets/images/FILE_NAME_OF_PSD\nfor instance, \u0026ldquo;bg\u0026rdquo; is a layer group of kwik4_1280x1920.psd\nyou can manually create the bg folder under App/book/assets/images/kwik4_1280x1920 so the export images function knows where to put images of sub layers of a group.\nIf such no folder with the same name as a layer group, the one image of a layer group is exported.\nA concept of Kwik5 is to use App folder as a project base. It is a kind of file based database where .json, .lua and assets files are placed. No more .kwk xml file of Kwik4\nDireclty Editing a file under App folder while running Solar2D Simulator means a live editing. No more build4 folder of Kwik4 either\nTODO Active Document \u0026gt; Layer Selection Only\nEditor Frontend for PS, XD ref Anima plugin for Adobe XD\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/workflow/","title":"Workflow","tags":[],"description":"","content":"Workflow Overview\nput .png/.jpg into App/contentX/assets/images manually or use kwik-export plugin for Ps/XD to publish images to App folder\nimages without coordinates images with coordinates from Ps, XD with kwik-export plugin models/assets/images/*.json kwik-editor traverses the assets folder to output .json for models and .lua for scenes/pageX and components/pageX\nkwik-generate-model kwik-generate-index kwik-scaffold-lua you can edit props or positions of images or attach a type of class such as animation, button \u0026hellip;\nyou can creat an event and a corresponding action of code such as playAnimation, hideLayer, playAudio \u0026hellip;\nif you manually add a .lua file, you need to update scenes/pageX/index.lua too. You can use kwik-generate-index that traverses pageX folder of commands, components and scenes for synclonizing the lisf of .lua for pageX context defined in the index.lua.\n1. assets ├── App ├── contentX ├── assets ├── audios │ ├── short │ ├── long │ └── sync ├── images │ └── pageX │ ├── bg.png ├── folder | ├─ .png | └── .png └── .png 1-1 images Manually put images in App/contentX/images/pageX folder\nkwik-generate-model\nit creates .json under models folder\nAlternatively\nPhotoshop\nselect .psd files to export kwik-export plugin create folders for a layer group in order to export each image of the group\nthe plugin exports index.json too\nassets/images/.png models/scenes/pageX/index.json ├── models │ ├── assets │ │ ├── audios │ │ │ ├── short │ │ │ ├── long │ │ │ └── sync │ │ ├── index.json │ │ ├── images | | ├── pageX | | ├── layerX.json (ReadOnly) │ ├── pageX │ ├── index.json │ └── layers │ ├── layerX.json (RW from KwikLiveEditor) later you edit it with KwikLiveEditor, then layerX.json is created under models/pageX/layers folder. images/pageX/layerX.json is readonly.\n1-2 audios put audio files under assets/audios folder\n. ├── assets │ ├── audios │ │ ├── short │ │ │ └── ballsCollide.mp3 │ │ ├── long │ │ │ ├── Gentle-Rain.mp3 │ │ │ └── Tranquility.mp3 │ │ └── sync │ │ ├── en │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── jp │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── pageX_Text1.mp3 │ │ ├── pageX_Text1.txt │ │ ├── page02_Text1.mp3 │ │ └── page02_Text1.txt kwik-generate-model\ncreates .json under models/assets/audios\n├── models │ ├── assets │ │ ├── audios │ │ │ ├── short | | | | ├── audioX.json │ │ │ ├── long │ │ │ └── sync │ │ ├── index.json │ │ ├── images │ ├── pageX │ ├── index.json kwik-editor\naudio files are not subjected to a page yet. So you can assign an audio to any pages with the tool.\nedit audio properties\nauto play channnel \u0026hellip; models/assets/audios/sounds/audioX.json\n{ \u0026#34;name\u0026#34;:\u0026#34;audioX\u0026#34;, \u0026#34;autoPlay\u0026#34;:false, \u0026#34;channel\u0026#34;:2, \u0026#34;type\u0026#34;:\u0026#34;sound\u0026#34; } you assign an audio entry to a page with kwik-editor. Then the tool adds the entry in models/pageX/index.json\npageX/index.json\n{ \u0026#34;components\u0026#34;: { \u0026#34;audios\u0026#34;: {\u0026#34;short\u0026#34;: [{\u0026#34;name\u0026#34;:\u0026#34;audioX\u0026#34;}], \u0026#34;layers\u0026#34;: [{}] }, \u0026#34;commands\u0026#34;: [], } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/commands/editor/","title":"action editor","tags":[],"description":"","content":"Action editor model index.lua\n. ├── actionCommand │ ├── cancel.lua │ ├── delete.lua │ └── save.lua ├── actionCommandButtons.lua ├── actionCommandPropsTable.lua ├── actionCommandTable.lua ├── actionTable.lua ├── buttons.lua ├── commandbox.lua ├── controller │ ├── cancel.lua │ ├── copy.lua │ ├── create.lua │ ├── delete.lua │ ├── index.lua │ ├── paste.lua │ ├── save.lua │ ├── selectAction.lua │ └── selectActionCommand.lua ├── index.lua ├── model.lua └── selector.lua local M = {name = name, views = { \u0026#34;index\u0026#34;, -- this creates actionIcon button \u0026#34;selector\u0026#34;, -- context:mapCommands \u0026#34;selectAction\u0026#34;, \u0026#34;selectActionCommand\u0026#34; \u0026#34;actionTable\u0026#34;, -- lists actions in a page \u0026#34;actionCommandTable\u0026#34;, \u0026#34;actionCommandPropsTable\u0026#34;, \u0026#34;commandbox\u0026#34;, -- animation.play, pause, .. \u0026#34;buttons\u0026#34;, \u0026#34;actionCommandButtons\u0026#34; }} ... ... function M:create(UI) if self.sceneGroup then return end -- self.sceneGroup = UI.editor.sceneGroup controller:init(UI, self.sceneGroup, categoryMap, selectbox) -- print(\u0026#34;create\u0026#34;, self.name) local posX, posY = display.contentCenterX/2 + 42, -2 ----------------------------------------- self:createIcon(UI, posX, posY) ----------------------------------------- self:createSelectbox(UI, posX, posY) ----------------------------------------- local scrollListener = function(e) end local scrollView = widget.newScrollView{ top = 22, left = display.contentCenterX, width = 100, height = 240, -- height = #models*18, scrollWidth = display.contentWidth*0.5, scrollHeight = display.contentHeight*0.8, hideBackground = false, isBounceEnabled = false, verticalScrollDisabled = false, backgroundColor = {1.0}, listener = scrollListener } self.sceneGroup:insert(scrollView) ----------------------------------------- self:createTable(scrollView, models) ----------------------------------------- UI.editor.actionEditor = self self.sceneGroup.actionEditor = scrollView -- self:hide() -- self:show() end "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/commands/","title":"Commands","tags":[],"description":"","content":"Commands Commands editor.action.model template/commands/pageX/actionX.lua commands.kwik.actionCommand editor.action.model M.commands = { action = { play = {_trigger = \u0026#34;\u0026#34;}, playAll = {actions = {}, random = true}, }, animation = { pause = {_target = \u0026#34;\u0026#34;}, resume = {_target = \u0026#34;\u0026#34;}, play = {_target = \u0026#34;\u0026#34;}, playAll = { animations = {}} }, audio = { record = { duration = 0, mmFile = \u0026#34;\u0026#34;, malfa = \u0026#34;\u0026#34;, audiotype = \u0026#34;\u0026#34; }, muteUnmute = { _target = {} }, play = { _target = \u0026#34;\u0026#34;, type = \u0026#34;\u0026#34;, channel = \u0026#34;\u0026#34;, repeatable = \u0026#34;\u0026#34;, delay = \u0026#34;\u0026#34;, loop = \u0026#34;\u0026#34;, fade = \u0026#34;\u0026#34;, volume = \u0026#34;\u0026#34;, tm = \u0026#34;\u0026#34;, -- timer id _trigger = \u0026#34;\u0026#34;, }, rewind = { _target = \u0026#34;\u0026#34;, type = \u0026#34;\u0026#34;, channel = \u0026#34;\u0026#34;, repeatable = \u0026#34;\u0026#34;, }, ... template/commands/pageX/actionX.lua local ActionCommand = {} local AC = require(\u0026#34;commands.kwik.actionCommand\u0026#34;) --- function ActionCommand:new() local command = {} -- function command:execute(params) local UI = params.UI local sceneGroup = UI.scene.view local layers = UI.layers local obj = params.obj {{#actions}} {{#animation}} -- -- target layer :sceneGroup[layerName] -- target animation : layer.animations[index] -- {{#pause}} AC.Animation:pause(\u0026#34;{{target}}\u0026#34;) {{/pause}} {{#resume}} AC.Animation:resume(\u0026#34;{{target}}\u0026#34;) {{/resume}} {{#play}} AC.Animation:play(\u0026#34;{{target}}\u0026#34;, {{index}}) {{/play}} {{/animation}} {{#button}} {{#onOff}} AC.Button:onOff(\u0026#34;{{target}}\u0026#34;, {{enable}}, {{toggle}} ) -- enable, toggle {{/onOff}} {{/button}} {{/actions}} end return setmetatable( command, {__index=AC}) end commands.kwik.actionCommand animationAction.lua\nlocal M = {} -- function _M:pause(anim) end -- function _M:resume(anim) end -- function _M:play(anim) end -- return _M "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/commands/ui/","title":"UI","tags":[],"description":"","content":"UI UI action is selected one actionCommand is selected action is selected one actionCommand is selected "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/animation/","title":"Animation","tags":[],"description":"","content":"Animation UI\nindex template\neditor.template.componetns/pageX/index.lua template\neditor.template.components.pageX.animations\nlayer_animation\nmodule\ncomponents.kwik.layer_animation editor\ncomponents.editor.animation\ntree .lua defaults\ncomponents.editor.animation.defaults "},{"uri":"https://kwiksher.github.io/kwik5docs/design/class/class_animation/","title":"Animation Editor","tags":[],"description":"","content":"classDiagram editorIndex editorIndex *-- menu : 1. User clicks Layer commands o-- selectBook commands o-- selectPage commands o-- selectLayer commands o-- selectTool class selectors{ - List: App, Book,Page - List: Layer, Audio, Group, Timer .. + projectPageSelector + componentSelector - componentHandler() } class selectorBase{ + selectorIcon + entries + onClick() } selectors \u0026lt;|..selectorBase: 1.1 onClick calls componentHandler menu *-- selectors selectors ..\u0026gt; store :1.2 commandHandler sets Layer entries class commands { + page + book + layer * class store.set() } class selectTool { controller:command() } class editorAnimation { + layerTable as selectbox + controlbox + buttons + controller } class layerTable { + name + class entries: animation, interaction, replacement create() displays name and class entries oncllick() name for propsTable, animation for editorAnimation } class layerTableCommands{ + commandHandler + commandHanderClass } class selectLayer { propsTable:setValue(decoded) propsTable:show() propsButtons:show() } class propsTable { can be editable } propsTable *-- buttons selectLayer ..\u0026gt;propsTable layerTable *--layerTableCommands class controller { selectbox.classEditorHandler() -\u0026gt; reset() -\u0026gt; setValue() -\u0026gt; redraw() command() -\u0026gt; util.decode(params) -\u0026gt; selectbox:setValue(decoded) -\u0026gt; controlbox:didHide(UI) -\u0026gt; controlbox:destroy(UI) -\u0026gt; controlbox:init(UI) -\u0026gt; controlbox:setValue(decoded) -\u0026gt; controlbox:create(UI) -\u0026gt; controlbox:didShow(UI) -\u0026gt; controlbox:show() -\u0026gt; onCompletebox:show() -\u0026gt; buttons:show() } editorAnimation *-- layerTable editorAnimation \u0026lt;|.. controller layerTable \u0026lt;|.. baseTable : create() is overrided in layerTable editorAnimation *-- conrolbox conrolbox \u0026lt;|.. baseProps class baseTable { + entries commandHandler() store.listener() render() } class BTree{ setCondition() setActionStatus() } layerTableCommands ..\u0026gt; BTree : 2. User clicks a animation entry \u0026lt;br\u0026gt; 2.1 BTree select animation TRUE BTree ..\u0026gt; commands : 2.2. load animation (Activated) \u0026lt;br\u0026gt;2.3.1 selectTool for animation class commands ..\u0026gt; selectTool: 2.5. select animation selectTool ..\u0026gt; controller: 2.5 calls command() to display animationEditor store ..\u0026gt; baseTable : 1.3. calls listenr in baseTable class selectbox{ + setTemplate() + commandHandler() } editorAnimation *-- selectbox : User clicks an animation entry selectbox --\u0026gt; controller : commandHandler calls classEdtiorHandler "},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/audio_editor/","title":"Audio Editor","tags":[],"description":"","content":"Audio Editor Audio Editor Read Save Read editor.audio.audioTable receives the string array of audio files via nanostore\neditor/parts/controller/selector/selectAudio receives the onClick event when user selects an audio entry in audioTable\nlocal instance = require(\u0026#34;editor.audio.index\u0026#34;).controller:command() return instance the controller:command() from editor.controller.index decodes the json file of a selected audio and setValue to the UI table which has been initiated in editor.audio.index\nconrolProps onCompletebox buttons are loaded in editor.audio.index and they are initiated with the controller\neditor.audio.index\nlocal selectbox = require(parent .. \u0026#34;audioTable\u0026#34;) local controlProps = require(parent..\u0026#34;controlProps\u0026#34;) local onCompletebox = require(root..\u0026#34;.parts.onCompletebox\u0026#34;) -- this set editor.audio.save, cacnel local buttons = require(parent..\u0026#34;buttons\u0026#34;) -- local controller = require(\u0026#34;editor.controller.index\u0026#34;).new(\u0026#34;audio\u0026#34;) -- local M = require(root..\u0026#34;baseClassEditor\u0026#34;).new(model, controller) function M:init(UI) self.UI = UI self.group = display.newGroup() UI.editor.classEditorGroup = self.group -- selectbox:init(UI) controlProps:init(UI, self.x + self.width*1.5, self.y, self.width, self.height) controlProps.model = model.props controlProps.UI = UI -- onCompletebox:init(UI) buttons:init(UI) -- -- controller:init{ selectbox = selectbox, controlProps = controlProps, onCompletebox = onCompletebox, buttons = buttons } controller.view = self -- UI.useClassEditorProps = function() return controller:useClassEditorProps() end -- end editor.controller.index\nthis is the base class of the controller of editor.audio. and this command() is called in editor/parts/controller/selector/selectAudio mentioned above.\nfunction M:command() local instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local UI = params.UI local name = params[params.class] or \u0026#34;\u0026#34; local decoded = util.decode(params) -- this reads models/xx.json -- print(\u0026#34;From selectors\u0026#34;) self.controlProps:didHide(UI) self.controlProps:destroy(UI) self.controlProps:init(UI) self.controlProps:setValue(decoded) self.controlProps.isNew = params.isNew -- self.controlProps:create(UI) self.controlProps:didShow(UI) -- -- self:show() self.controlProps:show() self.onCompletebox:show() self.buttons:show() -- UI.editor.editPropsLabel = name -- UI.editor.sceneGroup:dispatchEvent{name=\u0026#34;labelStore\u0026#34;, currentBook= UI.editor.currentBook, currentPage= UI.page, currentLayer = name} end) return instance end Save editor.audio.index\nlocal selectbox = require(parent .. \u0026#34;audioTable\u0026#34;) local controlProps = require(parent..\u0026#34;controlProps\u0026#34;) local onCompletebox = require(root..\u0026#34;.parts.onCompletebox\u0026#34;) local buttons = require(parent..\u0026#34;buttons\u0026#34;) overwrites contoroller\u0026rsquo;s render and save functions\nfunction controller:render(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/\u0026#34;..page ..\u0026#34;/components/audios/\u0026#34;..type..\u0026#34;/\u0026#34;..name ..\u0026#34;.lua\u0026#34; local tmplt = \u0026#34;editor/template/components/pageX/audios/audio.lua\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, page, \u0026#34;components\u0026#34;, \u0026#34;audios\u0026#34;, type) util.saveLua(tmplt, dst, model) return dst end function controller:save(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/models/\u0026#34;..page ..\u0026#34;/audios/\u0026#34;..type..\u0026#34;/\u0026#34;..name..\u0026#34;.json\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, \u0026#34;models\u0026#34;, page, \u0026#34;audios\u0026#34;, type) util.saveJson(dst, model) return dst end editor.audio.controller.save\nlocal name = ... local parent,root = parent_root(name) local util = require(\u0026#34;editor.util\u0026#34;) local json = require(\u0026#34;json\u0026#34;) local instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local UI = params.UI local selectbox = require(root..\u0026#34;audioTable\u0026#34;) local controller = require(root..\u0026#34;index\u0026#34;).controller local controlProps = controller.controlProps local onCompletebox = controller.onCompletebox local selected = selectbox.selection or {} local page = params.page or UI.page, local props = { name = selected.audio, -- UI.editor.currentLayer, class= \u0026#34;audio\u0026#34;, subclass = selected.subclass or \u0026#34;short\u0026#34;, controls = {}, actionName = nil, -- the following vales come from read() --class = self.class, index = selected.index, } -- local controls = controlProps:getValue() for i=1, #controls do -- props.subclass -- local name = controls[i].name if name ==\u0026#34;_type\u0026#34; then local t = controls[i].value or \u0026#34;short\u0026#34; if t:len() == 0 then t = \u0026#34;short\u0026#34; elseif t==\u0026#34;audioshort\u0026#34;then t = \u0026#34;short\u0026#34; elseif t==\u0026#34;audiolong\u0026#34; then t= \u0026#34;long\u0026#34; elseif t==\u0026#34;audiosync\u0026#34; then t= \u0026#34;sync\u0026#34; end props.subclass = t name = \u0026#34;type\u0026#34; elseif name== \u0026#34;_file\u0026#34; then name = \u0026#34;filename\u0026#34; end props.controls[name] = controls[i].value end -- -- props.name -- if props.name == nil then -- NEW print(\u0026#34;#NEW\u0026#34;,props.controls.name) -- local t = util.split(props.controls.file or \u0026#34;\u0026#34;, \u0026#39;.\u0026#39;) -- props.name = t[1] props.name = props.controls.name end -- props.actionName props.actionName = onCompletebox.selectedTextLabel print(\u0026#34;porps\u0026#34;) for k, v in pairs(props) do print(\u0026#34;\u0026#34;, k, v) end -- local updatedModel = util.createIndexModel(UI.scene.model) -- print(json.encode(updatedModel)) local files = {} if params.isNew or selected.index == nil then local dst = updatedModel.components.audios[props.subclass] or {} dst[#dst + 1] = props.name else local dst = updatedModel.components.audios[props.subclass] dst[props.index] = props.name -- TBI for audio\u0026#39;s name end -- -- TODO check if name is not duplicated or not -- -- index files[#files+1] = util.renderIndex(UI.editor.currentBook, page,updatedModel) files[#files+1] = util.saveIndex(UI.editor.currentBook, page, props.layer,props.class, updatedModel) -- save lua files[#files+1] = controller:render(UI.editor.currentBook, page, props.subclass, props.name, props.controls) -- save json files[#files+1] = controller:save(UI.editor.currentBook, page, props.subclass, props.name, props.controls) -- publish util.executePubish(files) end ) -- return instance "},{"uri":"https://kwiksher.github.io/kwik5docs/bookstore/","title":"Bookstore","tags":[],"description":"","content":"Bookstore TODO\nlibrary.psd, dialog.psd, textLabels.psd page_custscene.psd\nrestore.psd showOverlay will be used\nlibrary filter\nAll/Downloaded/NotPurchased build.settings\nomit editor.template/assets library page portrait\nrestore\ndownload all status recovered (downloaded) book scroll view for library/table page\nUXP\ncp components/bookstore/booktoreX.lua to bookTOC/scenes/library\nadd filter in library page\nCan create a storybook like? navigation bar?\nTest versions\nBookstore app contains the multiple kwik projects(books) inside. The lua files of each book are embedded in the app binary but the assets such as images, audio files of each book are not embedded in the app binary. They are downloadable from a web server. Due to Apple\u0026rsquo;s regulation, Solar2D does not allow to load the lua files (programming code) via Internet. The lua files must be embedded in the app binary but the other assets can be transfered from http server to the app.\nA library page controls which book to be loaded with In App Purchase. User clicks a book icon on thubnail view on a library page, and a purchase dialog appears if user wants to buy one. A project called bookTOC(Table Of Content) contains library.psd and dialog.psd\nWhen you like to add new books, you need to update the model.lua of bookTOC to include a new book information.\nYou can create as many as books but Bookstore is not designed to hold hundreds of books.\nSample file Please download the sample project from here.\nPhotoshop ├── bookFree │ ├── page1.psd │ └── page2.psd ├── bookOne │ ├── page1.psd │ └── page2.psd └── bookTOC ├── dialog.psd └── library.psd Solar2D ├── App │ ├── bookFree │ ├── bookOne │ └── bookTOC │ ├── components | ├── bookstore | └── model.lua └── main.lua BookServer ├── compress_assets | └── main.lua └── bookstore ├── bookFree └── bookOne BooKServer\ncopy_books script archives each assets.zip of books into BookServer/bookstore folder.\nUsing node.js, install http-server and run\ncd BookServer http-server Set the url of http://localhost:8080/bookstore to Solar2D/components/bookstore/model.lua\nlocal M = require(\u0026#34;components.bookstore.model.base\u0026#34;) -- M.debug = true M.URL = \u0026#34;http://localhost:8080/bookstore/\u0026#34; ... ... Solar2D\nOpen main.lua with the simulator Solar2D Solar2D project has main.lua in the root directory.\n├─App │ ├─book01 │ ├─book02 │ └─bookTOC ├─extlib ├─lib build.settings config.lua main.lua main.lua\nThere is just one line to load \u0026ldquo;bookTOC\u0026rdquo; book\nrequire(\u0026#34;controller.index\u0026#34;).bootstrap({name=\u0026#34;bookTOC\u0026#34;, sceneIndex = 1}) -- scenes.index App/bookTOC/scenes/index.lua has a table of page names, so sceneIdex = 1 means to open library page.\nlocal scenes = { \u0026#34;library\u0026#34;, \u0026#34;dialog\u0026#34; } return scenes build.settings\nYou may need to add permissions for your app. The following permissions are default\nandroid = { usesPermissions = { \u0026#34;android.permission.INTERNET\u0026#34;, \u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34;, \u0026#34;com.android.vending.BILLING\u0026#34;, }, }, config.lua\nplease add google license key for android device.\nlicense = { google = { key = \u0026#34;Please set your google license key\u0026#34;, }, }, bookTOC library.psd shows the thumbnail of books and the buttons for purchase and download\nEach {{bookName}}Icon\nit is a placeholder and the following layers are copied to the position of each {{bookName}}Icon\ndownloadBtn savedBtn savingTxt purchaseBtn restoreBtn\nit restores a book purchased history from one of online store(Apple, Google, Amazon)\ndilaog.psd shows a book image and the IAP buttons and information text\ndownloadBtn savedBtn savingTxt purchaseBtn infoTxt hideOverlayBtn bookFree page1.psd\npage2.psd\nshows the following goto buttons\nGoto TOC\nGOto page1\nGoto Next Book\nbookOne page1.psd\npage2.psd Goto TOC GOto Title Goto Previous Book BookServer Please use the script to zip the image, audio files as zip files\ncompress_assets/main.lua for Corona Simulator\ncommand.setServerFolder(\u0026#34;macos\u0026#34;, \u0026#34;bookstore\u0026#34;) --command.setServerFolder(\u0026#34;win32\u0026#34;, \u0026#34;bookstore\u0026#34;) local books = { {project = \u0026#34;bookFree\u0026#34;, serverFolder = \u0026#34;bookFree\u0026#34;}, {project = \u0026#34;bookOne\u0026#34;, serverFolder = \u0026#34;bookOne\u0026#34;}, } local onLineImages = { {project = \u0026#34;bookFree\u0026#34;, serverFolder = \u0026#34;bookFree\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, {project = \u0026#34;bookOne\u0026#34;, serverFolder = \u0026#34;bookOne\u0026#34;, image = \u0026#34;assets/images/page1/bg@4x.png\u0026#34;}, } ... ... "},{"uri":"https://kwiksher.github.io/kwik5docs/design/class/","title":"Class Diagrams","tags":[],"description":"","content":"Class Diagrams "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/","title":"Components","tags":[],"description":"","content":"Components template.components.pageX.index\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;{{name}}\u0026#34;, components = { layers = { {{#layers}} {{\u0026gt;recursive}} {{/layers}} }, audios = { {{#audios}} long={ {{#long}} \u0026#34;{{.}}\u0026#34;, {{/long}} }, short={ {{#short}}\u0026#34;{{.}}\u0026#34;, {{/short}} } {{/audios}} }, groups = { {{#groups}} \u0026#34;{{.}}\u0026#34;, {{/groups}} }, timers = { {{#timers}} \u0026#34;{{.}}\u0026#34;, {{/timers}} }, variables = { {{#variables}} \u0026#34;{{.}}\u0026#34;, {{/variables}} }, page = { {{#page}}\u0026#34;{{.}}\u0026#34;, {{/page}} } }, commands = { {{#events}} \u0026#34;{{.}}\u0026#34;, {{/events}} }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene editor.util\nplease notice saveLua func uses model.components\nfunction M.renderIndex(book, page, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/\u0026#34;..page ..\u0026#34;/components/index.lua\u0026#34; local tmplt = \u0026#34;editor.template/components/pageX/index.lua\u0026#34; ... ... M.saveLua(tmplt, dst, {name = model.name, events = model.commands, layers = model.components.layers, audios = model.components.audios, timers = model.components.timers, groups = model.components.groups, variables = model.components.variables, page = model.components.page, }, partial) return dst end bookFree.timer.index\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;timer\u0026#34;, components = { layers = { { bg={} }, }, audios = {}, groups = {}, timers = {\u0026#34;timerOne\u0026#34;, \u0026#34;timerTwo\u0026#34;}, variables = {\u0026#34;varOne\u0026#34;, \u0026#34;varTwo\u0026#34;}, page = {} }, commands = { \u0026#34;timerAction\u0026#34;, \u0026#34;variableAction\u0026#34;, }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene example bookFree/timer\nthe editor files\ncomponents.pageX.timers.timer comonents.editor.timer.index comonents.editor.timer.buttons comonents.editor.timer.timerTable components.editor.timer.defaults components.editor.timer.controller.cancel components.editor.timer.controller.save example bookFree/page1\n. ├── assets ├── commands ├── components \u0026lt;==== page components │ ├── page1 │ │ ├── audios │ │ ├── layers │ │ │ ├── bg.lua │ │ │ ├── gotoBtn.lua │ │ │ ├── gotoBtn_animation.lua \u0026lt;=== animation component lua │ │ │ ├── title.lua │ │ │ └── title_animation.lua \u0026lt;=== animation component lua │ │ ├── groups │ │ ├── page │ │ ├── times │ │ ├── variables │ │ └── index.lua │ └── page2 ├── models │ ├── page1 │ │ ├── bg.json │ │ ├── events │ │ │ └── eventOne.json │ │ ├── gotoBtn.json │ │ ├── gotoBtn_animation.json \u0026lt;=== animation component json │ │ ├── index.json │ │ ├── title.json │ │ └── title_animation.json \u0026lt;=== animation component json │ └── page2 "},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/editor/","title":"Editor","tags":[],"description":"","content":"Editor React Solar2D Kwik functions\nCommand\nFile\nProject New Project Open Project Recent Page New Edit\nPaste/Copy components Delete pages components Publish\nCompress PNGs \u0026ndash; TBI notarized compress.app in Kwik Assemble PNGs A-Gif or A-PNG Publish Images One page or Selected pages Open Solar2D simulator options Enable child components \u0026ndash; TBI as layerSet as a group or independent option Debug show memory (trace/print control) Spritsheet @2x Importer for a Kwik3 project\nLicense\nPerpetual or Subscription Activate Transfer Proxy Settings Template \u0026ndash; TBI as auto update from kwiksher.com and store it as global\nCopy global to local for customization Auto update - TBI\nnotarization and store updater.app in kwik5 Language\nEnglish or Japanese Samples\nAfraid (Get Started) Actions Animations Canvas Multi Lingual Layer Replacements Physics Project And Pages Structure\nProject Properties\nIcon Splash screen Letter/ZoomEven/ZoomStretch Navigation Thumbnail Auto Bookmark Admob (Rating) IAP simple unlock bookshelf Bookshelf pages template embedded normal or versions Languages \u0026ndash; TBI as State in kwik5, global Upate Template Extended\nNormal or Component\nPage Properties\nContext \u0026ndash; load the page images using the context page Scale Enable page swipe Show in navigation Loading option Preload Template \u0026ndash; bookshelf template page Comic \u0026ndash; enable comic rendering for -panels, balloons, background Alias \u0026ndash; bookshelf: the page alias for a master template page IAP Unlock Show Ad Record screen Page components\nAudios Audio global or local Groups Group Change order Hide a group Simple Camera Frame Set Group with Audio with Variable with Common Hide Simple Responsive Random Position Scale Infinity Scroll States local State Actions Action Timers Timers Variables Variable global or local keep track Physics Environment (Joints) (Collisions) External codes \u0026ndash; global, local, self, ace editor? libraries codes onInit onCreate onShow onHide Layer Properties\nCommon\nHide Simple Responsive Random Position Scale Export as Jpeg save as Shared Asset Render as Infinity Scroll Set Group with Audio with Variable with States Gloabl Local Object Extenal Code - self Set Language \u0026ndash; TBI as State function gloal, local, object\nAnimation\nLinear Path Switch Image to Rotation Pulse Bounce Blink Shake Filter Replacements\nSpritesheet Simple Texture Packer Adobe Animate (Spine) Sync Text Audio (Lip Sync - Spine and Papagayo) Video normal or PNGs Web Vector Map Multiplier Particles Importer Editor Text Dynamic Static Input Countdown Mask Interactions\nButton Drag Swipe Pinch Spin Shake Scroll Parallax (Accelerometer) Canvas (Snapeshot Eraser) (Push - OneSignal) Physics\nBody Set Force Set Joint with Set Collision with "},{"uri":"https://kwiksher.github.io/kwik5docs/design/class/class_group/","title":"Group Editor","tags":[],"description":"","content":" menu.controller.selector.selectGroup is linked to group.controller.selectGroup\nlocal instance = require(\u0026#34;components.editor.group.controller.selectGroup\u0026#34;) classDiagram commands o-- selectLayer commands o-- selectGroup selectors ..\u0026gt; store selectGroup --\u0026gt; _selectGroup class _selectGroup{ \u0026lt;\u0026lt;Controller\u0026gt;\u0026gt; decodede = util.read layersbox store.set(decodede) layersTable store.set(decoded) return instance.new() } class add{ \u0026lt;\u0026lt;Controller\u0026gt;\u0026gt; layersbox:set(decodede) layersTable:set(decoded) } class remove{ \u0026lt;\u0026lt;Controller\u0026gt;\u0026gt; layersbox:set(decodede) layersTable:set(decoded) } class editorGroup { + groupTable as selectbox + controlbox + buttons + layersbox + groupTable } class groupTable { + groups oncllick() } class layersbox { + layers setValue() override } layersbox \u0026lt;|.. targetbox layersbox \u0026lt;|.. targetboxMulti targetboxMulti --\u0026gt; util class targetboxMulti{ commandHandler() override } class util { + setSelection() } class layersTable { + layers scrollView = widget.newDragItemsScrollView() } class dragitemscrollview{ \u0026lt;\u0026lt;ext\u0026gt;\u0026gt; } layersTable --\u0026gt; dragitemscrollview layersTable --\u0026gt; util groupTable ..\u0026gt; BTree editorGroup *-- groupTable editorGroup *.. layersbox editorGroup *.. layersTable editorGroup o.. add editorGroup o.. remove editorGroup o.. _selectGroup groupTable \u0026lt;|.. baseTable editorGroup *-- conrolbox conrolbox \u0026lt;|.. baseProps BTree ..\u0026gt; commands commands ..\u0026gt; selectGroup _selectGroup ..\u0026gt; layersbox _selectGroup ..\u0026gt; layersTable store ..\u0026gt; baseTable class selectGroup{ require(group.controller.selectGroup) } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/ios/","title":"iOS","tags":[],"description":"","content":"iOS\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/webapp/","title":"REST Server","tags":[],"description":"","content":"Rest Server Get\nreturns .json of layer components(classes) or events/commands. It also returns default values of compoent properties\nPOST\nreceives Props of layers and Commands and then renders .lua components/commands. It also stores the request params in .json\n/develop/Solar2D/tools/pegasus-harness /develop/Solar2D/tools/pegasus-launcher "},{"uri":"https://kwiksher.github.io/kwik5docs/design/class/class/","title":"Timer Editor","tags":[],"description":"","content":"classDiagram editorIndex editorIndex *-- menu : 1. User clicks Timer commands o-- selectBook commands o-- selectPage commands o-- selectLayer commands o-- selectTimer class selectors{ - List: App, Book,Page - List: Layer, Audio, Group, Timer .. + projectPageSelector + componentSelector - componentHandler() } class selectorBase{ + selectorIcon + entries + onClick() } selectors \u0026lt;|..selectorBase: 1.1 onClick calls componentHandler menu *-- selectors selectors ..\u0026gt; store :1.2 commandHandler sets Timer entries class commands { + page + book + layer * class store.set() } class selectTimer { controller:command() } class editorTimer { + timerTable as selectbox + controlbox + buttons + controller } class timerTable { oncllick() } class controller { command() - util.decode(params) - controlbox:didHide(UI) - controlbox:destroy(UI) - controlbox:init(UI) - controlbox:setValue(decoded) - controlbox:create(UI) - controlbox:didShow(UI) - controlbox:show() - onCompletebox:show() - buttons:show() } timerTable ..\u0026gt; BTree: 2. User clicks a timer entry \u0026lt;br\u0026gt; 2.1 BTree select timer TRUE editorTimer *-- timerTable editorTimer \u0026lt;|.. controller timerTable \u0026lt;|.. baseTable editorTimer *-- conrolbox conrolbox \u0026lt;|.. baseProps class baseTable { + entries commandHandler() store.listener() render() } class BTree{ setCondition() setActionStatus() } BTree ..\u0026gt; commands : 2.2. load timer (Activated) \u0026lt;br\u0026gt; 2.3 menu/controller/selettor/selectTimer commands ..\u0026gt; selectTimer: 2.5. select timer selectTimer ..\u0026gt; controller: 2.5 calls command() to display timerEditor store ..\u0026gt; baseTable : 1.3. calls listenr in baseTable https://zenn.dev/taroman_zenn/articles/3c811b1245240d\n"},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/adding_component/","title":"Adding A Component","tags":[],"description":"","content":"how to add a component editor/index.lua and baseTable.lua handles user\u0026rsquo; selection from xxxTable commands/selectors/selectXXX.lua reads a json\nselectors.lua handles to read values of UI.scene.model.components for xxxTable.\neditor/models.lua\nthis defines layer related components. it does not include audio, group, timer, variables and action.\nlocal models = { { name = \u0026#34;Animations\u0026#34;, icon = \u0026#34;toolAnim\u0026#34;, tools = { {name = \u0026#34;Linear\u0026#34;, icon = \u0026#34;animLinear\u0026#34;}, {name = \u0026#34;Blink\u0026#34;, icon = \u0026#34;animBlink\u0026#34;}, {name = \u0026#34;Bounce\u0026#34;, icon = \u0026#34;animBounce\u0026#34;}, {name = \u0026#34;Pulse\u0026#34;, icon = \u0026#34;animPulse\u0026#34;}, {name = \u0026#34;Rotation\u0026#34;, icon = \u0026#34;animRotation\u0026#34;}, {name = \u0026#34;Shake\u0026#34;, icon = \u0026#34;animShake\u0026#34;}, {name = \u0026#34;Switch\u0026#34;, icon = \u0026#34;animSwitch\u0026#34;}, {name = \u0026#34;Filter\u0026#34;, icon = \u0026#34;animFilter\u0026#34;}, {name = \u0026#34;Path\u0026#34;, icon = \u0026#34;animPath\u0026#34;}, }, id = \u0026#34;animation\u0026#34; }, ... editor/index.lua loads it. The id is used to load a module for editing a component like\nanimation = require(\u0026#34;editor.animation.index\u0026#34;) For audio, group, timer and variables, the icons and the modules are loaded with their table.lua for instance, groupTable.lua\nlocal name = ... local parent = name:match(\u0026#34;(.-)[^%.]+$\u0026#34;) local Props = { name = \u0026#34;group\u0026#34;, anchorName = \u0026#34;selectGroup\u0026#34;, icons = {\u0026#34;Groups\u0026#34;, \u0026#34;Trash\u0026#34;}, id = \u0026#34;group\u0026#34; } local M = require(parent..\u0026#34;baseTable\u0026#34;).new(Props) return M action\u0026rsquo; icon/module ared loaded with action/index.lua. It is called by editor/index.lua\nlocal actionIcon = muiIcon:create { icon = {\u0026#34;actions_over\u0026#34;, \u0026#34;actions_over\u0026#34;,\u0026#34;actions_over\u0026#34;}, text = \u0026#34;\u0026#34;, name = \u0026#34;action-icon\u0026#34;, x = display.contentCenterX/2 + 42, y = -2, -- y = (display.actualContentHeight - display.contentHeight)/2 -2, width = 22, height = 22, fontSize =16, listener = function() self.isVisible = not self.isVisible if self.isVisible then self:show() else self:hide() end end, fillColor = {1.0} } UI.editor.actionIcon = actionIcon editor/index.lua\nAdd {name = \u0026ldquo;selectXXX\u0026rdquo;, btree= \u0026ldquo;load xxx\u0026rdquo;}\nM.commands = {{name=\u0026#34;selectApp\u0026#34;, btree=nil}, {name=\u0026#34;selectBook\u0026#34;, btree=\u0026#34;load book\u0026#34;}, {name=\u0026#34;selectPage\u0026#34;, btree=\u0026#34;load page\u0026#34;}, {name=\u0026#34;selectLayer\u0026#34;, btree=\u0026#34;load layer\u0026#34;}, -- {name=\u0026#34;selectAction\u0026#34;, btree=\u0026#34;\u0026#34;}, {name=\u0026#34;selectTool\u0026#34;, btree=\u0026#34;editor component\u0026#34;}, -- {name=\u0026#34;selectActionCommand\u0026#34;, btree=\u0026#34;\u0026#34;} {name=\u0026#34;selectAudio\u0026#34;, btree=\u0026#34;load audio\u0026#34;}, {name=\u0026#34;selectGroup\u0026#34;, btree=\u0026#34;load group\u0026#34;}, -- {name=\u0026#34;selectTimer\u0026#34;, btree=\u0026#34;load timer\u0026#34;}, -- {name=\u0026#34;selectVariable\u0026#34;, btree=\u0026#34;load variable\u0026#34;}, -- {name=\u0026#34;selectVideo\u0026#34;, btree=\u0026#34;load video\u0026#34;}, } new xxxTable out of baseTable.lua\nwrite like this\nlocal name = ... local parent = name:match(\u0026#34;(.-)[^%.]+$\u0026#34;) local Props = { name = \u0026#34;group\u0026#34;, anchorName = \u0026#34;selectGroup\u0026#34;, icons = {\u0026#34;Groups\u0026#34;, \u0026#34;Trash\u0026#34;}, id = \u0026#34;group\u0026#34; } local M = require(parent..\u0026#34;baseTable\u0026#34;).new(Props) return M this baseTable fires \u0026ldquo;load xxx\u0026rdquo; with a selected entry in xxxTable when user clicks it\nbaseTable.lua\ntree.backboard = { show = true, class = target.class } tree.backboard[self.name] = target[self.name], tree:setConditionStatus(\u0026#34;select component\u0026#34;, bt.SUCCESS, true) tree:setActionStatus(\u0026#34;load \u0026#34;..self.name, bt.RUNNING, true) tree:setConditionStatus(\u0026#34;select \u0026#34;..self.name, bt.SUCCESS) then next, this tree action (load xxx) is called back. It is linked to selectXXX command by editor/index.lua. commands/selectors/selectXXX to load a json of a selected entry\nselectors.lua\nthis is a view model. You see each command to be displayed as a button. It is a anchorName to xxxTable\nAdd set store name \u0026ldquo;xxxTable\u0026rdquo; and btree = \u0026ldquo;select component\u0026rdquo;\nM:create(UI)\nself.componentSelector = selectorBase.new( UI, 33, -2, { {label = \u0026#34;Layer\u0026#34;, command = \u0026#34;selectLayer\u0026#34;, store = \u0026#34;layerTable\u0026#34;, filter = true, btree = \u0026#34;select layer\u0026#34;}, {label = \u0026#34;Audio\u0026#34;, command = \u0026#34;selectAudio\u0026#34;, store = \u0026#34;audioTable\u0026#34;, btree = \u0026#34;select component\u0026#34;}, {label = \u0026#34;Group\u0026#34;, command = \u0026#34;selectGroup\u0026#34;, store = \u0026#34;groupTable\u0026#34;, btree = \u0026#34;select component\u0026#34;}, {label = \u0026#34;Timer\u0026#34;, command = \u0026#34;selectTimer\u0026#34;}, {label = \u0026#34;Var\u0026#34;, command = \u0026#34;selectVariable\u0026#34;}, {label = \u0026#34;Action\u0026#34;, command = \u0026#34;selectAction\u0026#34;, store = \u0026#34;actionTable\u0026#34;} }, \u0026#34;toolLayer\u0026#34;, selectLayerFilter, propsTable, propsButtons ) M:didShow()\nAdd xxxStore:set\nUI.editor.layerStore:set({}) UI.editor.audioStore:set({}) UI.editor.actionStore:set({}) UI.editor.groupStore:set({}) UI.editor.timerStore:set({}) UI.editor.variableStore:set({}) -- if storeTable then -- should we show the last secection? if storeTable == \u0026#34;layerTable\u0026#34; then UI.editor.layerStore:set(UI.scene.model.components.layers) elseif storeTable == \u0026#34;audioTable\u0026#34; then print(storeTable) UI.editor.audioStore:set(UI.scene.model.components.audios) elseif storeTable == \u0026#34;groupTable\u0026#34; then print(storeTable) UI.editor.groupStore:set(UI.scene.model.components.groups) elseif storeTable == \u0026#34;actionTable\u0026#34; then UI.editor.actionStore:set(UI.scene.model.commands) end ... commands/selector/selectXXX\nwrite code to read json and set it to propsTable\nlocal command = function (params) local UI = params.UI local xxx = params.xxx or \u0026#34;\u0026#34; local path = system.pathForFile( \u0026#34;App/\u0026#34;..UI.editor.currentBook..\u0026#34;/models/\u0026#34;..UI.page ..\u0026#34;/audios/\u0026#34;..params.class..\u0026#34;/\u0026#34;..xxx..\u0026#34;.json\u0026#34;, system.ResourceDirectory) local decoded, pos, msg = json.decodeFile( path ) if not decoded then print( \u0026#34;Decode failed at \u0026#34;..tostring(pos)..\u0026#34;: \u0026#34;..tostring(msg), path ) else print( \u0026#34;props is decoded!\u0026#34; ) UI.editor.propsStore:set(decoded) propsButtons:show() end for controllers for components are registered either in index.lua or selectors.lua or buttons.lua\nfor instance, action/selectors.lua\nM.commands = {\u0026#34;selectAction\u0026#34;, \u0026#34;selectActionCommand\u0026#34;} --- function M:init(UI, toggleHandler) local app = App.get() for i = 1, #self.commands do app.context:mapCommand( \u0026#34;editor.action.\u0026#34; .. self.commands[i], \u0026#34;editor.action.controller.\u0026#34; .. self.commands[i] ) end self.togglePanel = toggleHandler end for animation/buttons.lua\nM.commands = {\u0026#34;create\u0026#34;, \u0026#34;delete\u0026#34;, \u0026#34;save\u0026#34;, \u0026#34;cancel\u0026#34;, \u0026#34;copy\u0026#34;, \u0026#34;paste\u0026#34;} --- function M:init(UI, toggleHandler) local app = App.get() for i = 1, #self.commands do app.context:mapCommand( \u0026#34;editor.anim.\u0026#34; .. self.commands[i], \u0026#34;editor.animation.controller.\u0026#34; .. self.commands[i] ) end self.togglePanel = toggleHandler end "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/android/","title":"android","tags":[],"description":"","content":"android\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/audio/","title":"Audio","tags":[],"description":"","content":"Audio UI\nindex template\neditor.template.componetns/pageX/index.lua\n{ name = \u0026#34;pageX\u0026#34;, components = { layers = { {background={}}, }, audios = { long = {\u0026#34;streamOne\u0026#34;, \u0026#34;streamTwo\u0026#34;}, short = {\u0026#34;shortOne\u0026#34;, \u0026#34;shortTwo\u0026#34;} }, }, commands = {}, } template\neditor.template.components.pageX.audios.aduio\nlocal props = { autoPlay = {{autoPlay}}, channel = {{channel}}, delay = {{delay}}, filename = \u0026#34;{{filename}}\u0026#34;, folder = \u0026#34;{{folder}}\u0026#34;, loops = {{loops}}, -- 1 + 3 = 4 times name = \u0026#34;{{name}}\u0026#34;, type = \u0026#34;{{type}}\u0026#34;, } return require(\u0026#34;components.kwik.page_audio\u0026#34;).new(props) module\ncomponents.kwik.page_audio\nfunction M:create(UI) ... ... if self.type == \u0026#34;stream\u0026#34; then self.loader = audio.loadStream self.filename = \u0026#34;long/\u0026#34;..self.filename else self.loader = audio.loadSound self.filename = \u0026#34;short/\u0026#34;..self.filename end local path = App.getProps().audioDir..self.filename self.audioObj = self.loader(path , App.getProps().systemDir) ... ... end function M:play() audio.setVolume(self.volume or 8, { channel=self.channel }); if self.allowRepeat then self.repeatableChannel = audio.play(self.audioObj, { channel=self.channel, loops=self.loops, fadein = self.fadein } ) else audio.play(self.audioObj, {channel=self.channel, loops=self.loops, fadein = self.fadein } ) end end ... ... components.editor.audio audio ├── audioTable.lua ├── buttons.lua ├── controlProps.lua ├── controller │ ├── cancel.lua │ └── save.lua ├── defaults │ └── audio.lua ├── index.lua comonents.editor.audio.index\nlocal model = { id =\u0026#34;audio\u0026#34;, props = { {name=\u0026#34;autoPlay\u0026#34;, value=true}, {name=\u0026#34;channel\u0026#34;, value = \u0026#34;\u0026#34;}, {name=\u0026#34;delay\u0026#34;, value=0}, {name=\u0026#34;filename\u0026#34;, value = \u0026#34;\u0026#34;}, {name=\u0026#34;folder\u0026#34;, value=\u0026#34;\u0026#34;}, {name=\u0026#34;loops\u0026#34;, value = \u0026#34;\u0026#34;}, {name=\u0026#34;name\u0026#34;, value = \u0026#34;\u0026#34;}, {name=\u0026#34;type\u0026#34;, value = \u0026#34;\u0026#34;}, } } ... ... function controller:render(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/\u0026#34;..page ..\u0026#34;/components/audios/\u0026#34;..type..\u0026#34;/\u0026#34;..name ..\u0026#34;.lua\u0026#34; local tmplt = \u0026#34;editor.template/components/pageX/audios/audio.lua\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, page, \u0026#34;components\u0026#34;, \u0026#34;audios\u0026#34;, type) util.saveLua(tmplt, dst, model) return dst end function controller:save(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/models/\u0026#34;..page ..\u0026#34;/audios/\u0026#34;..type..\u0026#34;/\u0026#34;..name..\u0026#34;.json\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, \u0026#34;models\u0026#34;, page, \u0026#34;audios\u0026#34;, type) util.saveJson(dst, model) return dst end components.editor.audio.defaults\nlocal M = { name = \u0026#34;audio_\u0026#34;, class=\u0026#34;audio\u0026#34;, controls = { autoPlay=false, channel = 0, delay=0, filename = \u0026#34;\u0026#34;, -- folder=\u0026#34;\u0026#34;, loops = 0, name = \u0026#34;\u0026#34;, type = \u0026#34;\u0026#34;, } } "},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/btree/","title":"Behavior Tree","tags":[],"description":"","content":"Behavior Tree in Editor This is experimental. A Behavior tree implemetation enables a conditional call for an action node. If conditions are not satisfied for a button, the associated action to the button will not be executed when user clicks it\neditor/controller/BTree/selectors.tree\nBTree calls BThandler when actionNode is activated. The parameters are stored in backboard.\neditor.index\nM.commands = { {name=\u0026#34;selectApp\u0026#34;, btree=nil}, {name=\u0026#34;selectBook\u0026#34;, btree=\u0026#34;load book\u0026#34;}, {name=\u0026#34;selectPage\u0026#34;, btree=\u0026#34;load page\u0026#34;}, {name=\u0026#34;selectLayer\u0026#34;, btree=\u0026#34;load layer\u0026#34;}, {name=\u0026#34;selectPageProps\u0026#34;, btree=nil}, -- {name=\u0026#34;selectAction\u0026#34;, btree=\u0026#34;\u0026#34;}, {name=\u0026#34;selectTool\u0026#34;, btree=\u0026#34;editor component\u0026#34;}, -- {name=\u0026#34;selectActionCommand\u0026#34;, btree=\u0026#34;\u0026#34;} {name=\u0026#34;selectAudio\u0026#34;, btree=\u0026#34;load audio\u0026#34;}, {name=\u0026#34;selectGroup\u0026#34;, btree=\u0026#34;load group\u0026#34;}, {name=\u0026#34;selectTimer\u0026#34;, btree=\u0026#34;load timer\u0026#34;}, {name=\u0026#34;selectVariable\u0026#34;, btree=\u0026#34;load variable\u0026#34;}, -- {name=\u0026#34;selectVideo\u0026#34;, btree=\u0026#34;load video\u0026#34;}, } -- connects with BTree ---- local BTMap = {} for i=1, #M.commands do if M.commands[i].btree then BTMap[M.commands[i].btree] ={eventName = \u0026#34;editor.selector.\u0026#34;..M.commands[i].name, name = M.commands[i].name} end end -- BTree calls this when activating actionNode M.BThandler = function(name, status) -- print(\u0026#34;#BTHandler: dispathEvent\u0026#34;) -- print(\u0026#34;\u0026#34;, name, bt.getFriendlyStatus( nil,status )) local target = BTMap[name] -- print(\u0026#34;\u0026#34;, target) if target then -- print(\u0026#34;\u0026#34;, target.eventName) --local obj = M.UI.editor.sceneGroup[target.name] local params = { name = target.eventName, UI = M.UI, -- beaware UI is belonged to a page -- show = not obj.isVisible, } if tree.backboard then for k, v in pairs(tree.backboard) do params[k] = v end end M.UI.scene.app:dispatchEvent(params) end return bt.SUCCESS end "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/commands/canvas/","title":"canvas","tags":[],"description":"","content":"Canvas Action Command action editor \u0026gt; Interactions \u0026gt; Canvas\n//defined in editor.action.model.lua\nM.commands{ ... canvas = { brush = { size = {size = 10, alpha = 1}, color = {0,0,0,1} }, erase = {}, undo = {}, redo = {} }, ... ``` "},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/","title":"Implementation","tags":[],"description":"","content":"TODO\neditor/controller/save.lua editor/parts/controller/properties/save.lua implementation Details the following functions in editor.controller.index class are mainly used for CRUD of json/lua files in select, save, delete etc. See editor.controller.save.\nseparate controllers for the audio, group, timer and variable components are implemented i.e\nuseClassEditorProps setValue render save read implementation Details select (read) UI.scene.model save (write) select (read) See editor.parts.controller directory. selectXXX lua reads json and displays a UI table. The data is passed by nanostore such as bookStore:set, pageStore:set.\nnanostore is used as an experimental usage\nselectApp.lua\nlocal appFolder = params.appFolder or system.pathForFile( \u0026#34;App\u0026#34;, system.ResourceDirectory ) if params.useTinyfiledialogs then appFolder = tfd.selectFolderDialog({ title = \u0026#34;select App folder\u0026#34;, default_path = path }) -- print(\u0026#34;\u0026#34;, appFolder) end if success then local books = {} for file in lfs.dir( appFolder ) do if util.isDir(file) then -- print(\u0026#34;\u0026#34;, \u0026#34;Found file: \u0026#34; .. file ) -- set them to nanostores if file:len() \u0026gt; 3 and file ~=\u0026#34;kwikEditor\u0026#34; then table.insert(books, {name = file, path= util.PATH(appFolder..\u0026#34;/\u0026#34;..file)}) end end end if #books \u0026gt; 0 then UI.editor.bookStore:set(books) end selectBook.lua\nlocal path =system.pathForFile( \u0026#34;App/\u0026#34;..bookName..\u0026#34;/models\u0026#34;, system.ResourceDirectory) UI.editor.currentBook = bookName local success = lfs.chdir( path ) -- isDir works with current dir if success then local pages = {} for file in lfs.dir( path ) do if util.isDir(file) then -- set them to nanostores if file:len() \u0026gt; 3 and file ~=\u0026#39;assets\u0026#39; then table.insert(pages, {name = file, path= util.PATH(path..\u0026#34;/\u0026#34;..file)}) end end end if #pages \u0026gt; 0 then UI.editor.pageStore:set(pages) end end selectPage.lua\nif params.page:len() \u0026gt; 0 and UI.page ~= params.page then local app = App.get() app:showView(\u0026#34;components.\u0026#34; .. params.page .. \u0026#34;.index\u0026#34;, {effect = \u0026#34;slideDown\u0026#34;}) end selectLayer.lua\nlocal path = system.pathForFile( \u0026#34;App/\u0026#34;..UI.editor.currentBook..\u0026#34;/models/\u0026#34;..UI.page ..\u0026#34;/\u0026#34;..params.path..getFileName(layerName, className)..\u0026#34;.json\u0026#34;, system.ResourceDirectory) ... propsTable:setValue(decoded) ... instead of nanostore, a traditional set/get functions are used here\nselectTool.lua\nthis loads class\u0026rsquo;s properties of a layer\nif params.layer then -- this measn user clicks one of class, anim, button, drag ... UI.editor.currentLayer = params.layer end tool.controller:read(UI.editor.currentBook, UI.page, UI.editor.currentLayer, params.isNew, params.class) if params.isNew then it loads default values to propsTable\nedtior.controller.index\nfunction M:read(book, page, layer, isNew, class) print(\u0026#34;read\u0026#34;, page, layer, isNew, class) -- the values are used in useClassEdtiorProps() self.page = page self.layer = layer self.isNew = isNew self.class = class if isNew then local path = \u0026#34;editor.template.components.pageX.\u0026#34;..self.layerTool..\u0026#34;.defaults.\u0026#34;..class local template = require(path) self:reset() self:setValue(template, nil, true) self:redraw() elseif layer then -- this comes from clicking layerTable.class local layerName = layer or \u0026#34;index\u0026#34; --local path = page ..\u0026#34;/\u0026#34;..layerName..\u0026#34;_\u0026#34;..self.layerTool..\u0026#34;.json\u0026#34; local path = system.pathForFile( \u0026#34;App/\u0026#34;..book..\u0026#34;/models/\u0026#34;..page ..\u0026#34;/\u0026#34;..layerName..\u0026#34;_\u0026#34;..self.layerTool..\u0026#34;.json\u0026#34;, system.ResourceDirectory) if self.lastSelection ~= path then self.lastSelection = path local decoded, pos, msg = json.decodeFile( path ) if not decoded then print( \u0026#34;Decode failed at \u0026#34;..tostring(pos)..\u0026#34;: \u0026#34;..tostring(msg) ) else print( \u0026#34;File successfully decoded!\u0026#34; ) end self:reset() self:setValue(decoded, 1) self:redraw() else self.view.isNew = true toolbar:toogleToolMap() end end end For layer\u0026rsquo;s class, the json is retrived by tool.controller:read above and the read function calls setValue(decoded) inside to display the data to controlProps table.\neditor.controller.index\nfunction M:setValue(decoded, index, template) if decoded == nil then return end if not template then print(json.encode(decoded[index])) self.selectbox:setValue(decoded, index) -- \u0026#34;linear 1\u0026#34;, \u0026#34;rotation 1\u0026#34; ... self.controlProps:setValue(decoded[index].controls) self.onCompletebox:setValue(decoded[index].actionName) else self.selectbox:setTemplate(decoded) -- \u0026#34;linear 1\u0026#34;, \u0026#34;rotation 1\u0026#34; ... self.controlProps:setValue(decoded.controls) self.onCompletebox:setValue(decoded.actionName) end end generic setValue is implemented in edtior.controller.index, and components can have own setValue for their UI table. for instance,\neditor/animation/controller.lua editor/replacement/controller/index.lua editor.controller.index\nthe command() reads json with util.decode() from params.\nfunction M:command() local instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local UI = params.UI local name = params[params.class] or \u0026#34;\u0026#34; local decoded = util.decode(params) -- this reads models/xx.json -- print(\u0026#34;From selectors\u0026#34;) self.controlProps:didHide(UI) self.controlProps:destroy(UI) self.controlProps:init(UI) self.controlProps:setValue(decoded) self.controlProps.isNew = params.isNew -- self.controlProps:create(UI) self.controlProps:didShow(UI) -- -- self:show() self.controlProps:show() self.onCompletebox:show() self.buttons:show() ... util.decode function M.decode(params) local UI = params.UI if params.isNew then local path = \u0026#34;editor.template.components.pageX.\u0026#34;..params.class..\u0026#34;.defaults.\u0026#34;..params.class return require(path) elseif params.isDelete then print(params.class, \u0026#34;delete\u0026#34;) return {} else local name = params[params.class] or \u0026#34;\u0026#34; if params.subclass then name = params.subclass..\u0026#34;/\u0026#34;..name end local path = system.pathForFile( \u0026#34;App/\u0026#34;..UI.editor.currentBook..\u0026#34;/models/\u0026#34;..UI.page ..\u0026#34;/\u0026#34;..params.class..\u0026#34;s/\u0026#34;..name..\u0026#34;.json\u0026#34;, system.ResourceDirectory) decoded, pos, msg = json.decodeFile( path ) if not decoded then print( \u0026#34;Decode failed at \u0026#34;..tostring(pos)..\u0026#34;: \u0026#34;..tostring(msg), path ) decoded = {} end return decoded or {} end end selectAudio.lua\nrequire(\u0026ldquo;editor.audio.index\u0026rdquo;).controller:command()\nselectTimer.lua\nrequire(\u0026ldquo;editor.timer.index\u0026rdquo;).controller:command()\nselectVariable.lua\nrequire(\u0026ldquo;editor.variable.index\u0026rdquo;).controller:command()\nselectGroup.lua\nrequire(\u0026ldquo;editor.group.controller.selectGroup\u0026rdquo;)\nselectGroup returns a command() for Group\nlocal command = function (params) local UI = params.UI local name = params.group or \u0026#34;\u0026#34; print (params.class) print(\u0026#34;selectGroup\u0026#34;, name, path, params.show) --print(debug.traceback()) local tableData if params.isNew then local boxData = util.read( UI.editor.currentBook, UI.page) -- tableData = { name = \u0026#34;(new-group)\u0026#34;, layers = {}, children = {}, alpha = nil, xScale = nil, yScale = nil, rotation = nil, isLuaTable = nll } UI.editor.groupLayersStore:set(tableData) -- layersTable UI.editor.layerJsonStore:set(boxData.layers) -- layersbox elseif params.isDelete then elseif name:len() \u0026gt; 0 then -- -- layersTable -- local path = system.pathForFile( \u0026#34;App/\u0026#34;..UI.editor.currentBook..\u0026#34;/models/\u0026#34;..UI.page ..\u0026#34;/groups/\u0026#34;..name..\u0026#34;.json\u0026#34;, system.ResourceDirectory) tableData, pos, msg = json.decodeFile( path ) if not tableData then print( \u0026#34;Decode failed at \u0026#34;..tostring(pos)..\u0026#34;: \u0026#34;..tostring(msg), path ) tableData = {} end -- -- layersbox -- local boxData = util.read( UI.editor.currentBook, UI.page, function(parent, name) -- let\u0026#39;s remove entries of tableData from boxData -- layers = [\u0026#34;GroupA.Ellipse\u0026#34;, \u0026#34;GroupA.SubA.Triangle\u0026#34;] for i=1, #tableData.layers do local _name = tableData.layers[i] if parent then if parent ..\u0026#34;.\u0026#34;..name == _name then return true end elseif name == _name then return true end end return false end) UI.editor.layerJsonStore:set(boxData.layers) -- layersbox UI.editor.groupLayersStore:set(tableData) -- layersTable end -- editor:show() selectPageProps.lua\nlocal command = function (params) ... local path = system.pathForFile( \u0026#34;App/\u0026#34;..UI.editor.currentBook..\u0026#34;/models/settings.json\u0026#34;, system.ResourceDirectory) ... settingsTable:setValue(decoded) ... create a new component from toolbar\nselectToolbar.lua UI.scene.model UI.scene.model is set when selectPage is called\nlocal scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page1\u0026#34;, components = { layers = { { bg={ } }, { gotoBtn={ --class={\u0026#34;animation\u0026#34;} } }, { title={ class={\u0026#34;linear\u0026#34;} } }, }, audios = {}, groups = {}, timers = {}, variables = {}, page = { } }, commands = { \u0026#34;eventOne\u0026#34;, \u0026#34;eventTwo\u0026#34;, \u0026#34;act01\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) util.read() function parses \u0026ldquo;App/\u0026rdquo;..book..\u0026quot;/models/\u0026quot;..page ..\u0026quot;/index.json\u0026quot;\n... ret.layers = parser(decoded) ... setFiles(ret.audios, \u0026#34;/audios/short\u0026#34;) setFiles(ret.audios, \u0026#34;/audios/long\u0026#34;) setFiles(ret.groups, \u0026#34;/groups\u0026#34;) setFiles(ret.commands, \u0026#34;/commands\u0026#34;) return ret { layers = { {name = \u0026#34;layerOne\u0026#34;, parent=\u0026#34;\u0026#34;, children = { {name=\u0026#34;childOne}, parent=\u0026#34;layerOne\u0026#34;, children = {}} } }, {name = \u0026#34;layerTwo\u0026#34;, parent=\u0026#34;\u0026#34;, children = {}}, }, audios = {} } save (write) CRUD operations on json/lua files are mainly for commands and components in a selected page\nthe editor does not support to create a new entry of App, Book, Page. The properties can be modified for App, Book, Page.\ncreate/update a layer class get props render App/booxX/components/pageX/layers/XXX.lua save it as a json file util.createIndexModel returns the updated scene model if a classname for a layer is newly added layer names must be unique in a scene model.\n```lua util.createIndexModel(UI.scene.model, UI.editor.currentLayer, classname) ``` ```lua scene = { name = \u0026quot;canvas\u0026quot;, components = { layers = { { back={ } }, { butBlue={ class={\u0026quot;button\u0026quot;}, {A={}}, {B={}} } }, { butWhite={ } }, }, audios = { }, groups = { }, timers = { }, variables = { }, others = { } }, } ``` - render App.booxX.components.pageX.index.lua - save json editor.controller.save local name = ... local parent, root = parent_root(name) local util = require(\u0026#34;editor.util\u0026#34;) local json = require(\u0026#34;json\u0026#34;) -- -- save command performs on one entry. -- If user switch to another entry without saving, the previous change will be lost. -- local instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function(params) local UI = params.UI local props = params.props local tool = UI.editor:getTool(props.class) -- each tool.contoller can overide render/save. So page tools of audio, group, timer should use own render/save if tool then local files = {} local toolName = UI.editor:getToolName(props.class) local filename = props.name local classname = props.class:lower() ------------- -- save lua files[#files+1] = tool.controller:render(UI.editor.currentBook, UI.page, UI.editor.currentLayer, toolName, classname, props) ----------- --- save json local decoded = params.decoded or {} decoded[props.index] = props -- files[#files+1] = tool.controller:save(UI.editor.currentBook, UI.page, UI.editor.currentLayer,toolName, decoded) ----------- --- Update components/pageX/index.lua model/pageX/index.json local updatedModel = util.createIndexModel(UI.scene.model, UI.editor.currentLayer, classname) files[#files+1] = tool.controller:renderIndex(UI.editor.currentBook, UI.page, updatedModel) files[#files+1] = tool.controller:saveIndex(UI.editor.currentBook, UI.page, UI.editor.currentLayer,classname, updatedModel) ---------- -- publish util.executePubish(files) else print(\u0026#34;tool not found for\u0026#34;, props.class) end end ) -- return instance "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/macos/","title":"macOS","tags":[],"description":"","content":"Windows Icon\nassets/DeskTopIcon/Icon-osx.icns these .ico and .icns files are created with the following commands in Termnal app. Plese make icon_xx.png files and install image magic to Window PC\nmac_icon.command rm -r icon.iconset cp -r desktop_icon-assets icon.iconset cd icon.iconset rm icon_48x48.png cp icon_32x32.png icon_16x16@2x.png mv icon_64x64.png icon_32x32@2x.png cp icon_256x256.png icon_128x128@2x.png cp icon_512x512.png icon_256x256@2x.png mv icon_1024x1024.png icon_512x512@2x.png cd .. iconutil --convert icns --output Icon-osx.icns icon.iconset "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/commands/screenshot/","title":"screenshot","tags":[],"description":"","content":"Screenshot Action Command action editor \u0026gt; Interactions \u0026gt; screenshot\n//defined in editor.action.model.lua\nM.commands{ ... screenshot = { take = { ptit = \u0026#34;\u0026#34;, message = \u0026#34;\u0026#34;, shutter = true, hideLayers = {} } }, ``` "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/","title":"Settings","tags":[],"description":"","content":"Settings https://docs.coronalabs.com/guide/distribution/buildSettings/index.html\nhttps://docs.coronalabs.com/guide/distribution/advancedSettings/index.html\nWhen orientation supports both of landscape and portrait, the main content area (a display group) should be translated to the center of screen.\neach layers generated from Photoshop has fixed number of coordiate (x, y), for instance the center position of landscape 1920x1080 is at (1920/2, 1080/2) in landscape. If the actual device is rotated to portrait, the center position is (1080/2, 1920/2), for screen rotation event is detected, let\u0026rsquo;s move each layer by (1920/2 - 1080/2, 1080/2- 1920/2)\nsceneGroup.x, sceneGroup.y = display.contentCenterX, display.contentCenterY build.settings orientation\n{ default = \u0026#34;landscapeRight\u0026#34;, supported = { \u0026#34;portrait\u0026#34;, \u0026#34;portraitUpsideDown\u0026#34;, \u0026#34;landscapeLeft\u0026#34;, \u0026#34;landscapeRight\u0026#34; }, plguins\nsplashScreen\n{ enable = true, image = \u0026#34;mySplashScreen.png\u0026#34; }, android\nhttps://docs.coronalabs.com/guide/distribution/buildSettings/index.html#android-build-settings\n{ versionCode = \u0026#34;11\u0026#34;, usesPermissions = { \u0026#34;android.permission.INTERNET\u0026#34;, \u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34;, \u0026#34;android.permission.ACCESS_FINE_LOCATION\u0026#34;, \u0026#34;android.permission.ACCESS_COARSE_LOCATION\u0026#34;, \u0026#34;com.android.vending.CHECK_LICENSE\u0026#34;, \u0026#34;com.android.vending.BILLING\u0026#34;, }, usesExpansionFile = true, usesFeatures = { { name=\u0026#34;android.hardware.camera\u0026#34;, required=true }, { name=\u0026#34;android.hardware.location\u0026#34;, required=false }, { name=\u0026#34;android.hardware.location.gps\u0026#34;, required=false }, }, } iphone\nhttps://docs.coronalabs.com/guide/distribution/buildSettings/index.html#iOSsettings\n{ xcassets = \u0026#34;Images.xcassets\u0026#34;, plist = { -- CFBundleIconFiles = {}, -- Obsolete! UILaunchStoryboardName = \u0026#34;LaunchScreen\u0026#34;, -- Required! UIStatusBarHidden = true, CFBundleDisplayName = \u0026#34;Solar2D App\u0026#34;, CFBundleName = \u0026#34;Solar2D App\u0026#34;, NSCameraUsageDescription = \u0026#34;This app would like to access the camera.\u0026#34;, NSPhotoLibraryUsageDescription = \u0026#34;This app would like to access the photo library.\u0026#34;, NSPhotoLibraryAddUsageDescription = \u0026#34;This app would like to add the photo library.\u0026#34;, NSAppTransportSecurity = { NSExceptionDomains = { [\u0026#34;\u0026#34;] = { NSIncludesSubdomains = true, NSThirdPartyExceptionAllowsInsecureHTTPLoads = true }, } }, } window\n{ defaultMode = \u0026#34;fullscreen\u0026#34;, defaultViewWidth = 640, defaultViewHeight = 960, resizable = true, minViewWidth = 320, minViewHeight = 480, enableCloseButton = true, enableMinimizeButton = true, enableMaximizeButton = true, suspendWhenMinimized = true showWindowTitle = false -- (macOS only) titleText = { default = \u0026#34;Window Title Test\u0026#34;, [\u0026#34;jp\u0026#34;] = \u0026#34;Window タイトル\u0026#34;, }, } macos\nhttps://docs.coronalabs.com/guide/distribution/macOSBuild/index.html\n{ bundleResourcesDirectory = \u0026#34;osx-resources\u0026#34;, plist = { CFBundleURLTypes = { { CFBundleURLName = \u0026#34;My URL Scheme\u0026#34;, CFBundleURLSchemes = { \u0026#34;myscheme\u0026#34;, }, }, }, CFBundleDocumentTypes = { { CFBundleTypeExtensions = { \u0026#34;png\u0026#34;, }, CFBundleTypeIconFile = \u0026#34;app.icns\u0026#34;, CFBundleTypeName = \u0026#34;public.png\u0026#34;, LSHandlerRank = \u0026#34;Alternate\u0026#34;, LSItemContentTypes = { \u0026#34;public.png\u0026#34;, }, }, }, entitlements = { [\u0026#34;com.apple.security.personal-information.location\u0026#34;] = true, }, NSHumanReadableCopyright = \u0026#34;Copyright © 2017 XYZ Company\u0026#34; }, }, win32\nhttps://docs.coronalabs.com/guide/distribution/win32Build/index.html\n{ preferenceStorage = \u0026#34;registry\u0026#34;, singleInstance = false, } splashScreen\n{ ios = { enable = true, image = \u0026#34;mySplashScreen_iOS.png\u0026#34; }, android = { enable = true, image = \u0026#34;mySplashScreen_Android.png\u0026#34; } }, excludeFiles\n{ all = { \u0026#34;Icon*.png\u0026#34;, \u0026#34;Images.xcassets\u0026#34;, \u0026#34;Icon*.ico\u0026#34;, \u0026#34;Icon*.icns\u0026#34; }, android = { \u0026#34;LaunchScreen.storyboardc\u0026#34;, \u0026#34;*.aac\u0026#34; }, ios = { \u0026#34;*.ogg\u0026#34; }, macos = { \u0026#34;Icon*.ico\u0026#34; }, win32 = { \u0026#34;Icon*.icns\u0026#34; }, } config.lua\nscale = \u0026quot;letterBox\u0026quot;, fps = 30, google license key Orientation Implementation Application.lua\nfunction M.getPosition(x, y) local mX = x and (x * 0.25 - 480 * 0.5) or 0 local mY = y and (y * 0.25 - 320 * 0.5) or 0 return mX, mY end scene.lua\nit handles the orientation change event\nfunction scene:create(event) ... self.UI.sceneGroup.x = display.contentCenterX self.UI.sceneGroup.y = display.contentCenterY self.UI.sceneGroup.anchorX = .5 self.UI.sceneGroup.anchorY = .5 self.view:insert(self.UI.sceneGroup) ... end local function onOrientationChange (event) if scene.view then local sceneGroup = scene.UI.sceneGroup local currentOrientation = event.type local ratio = 480/320 local reverse = 320/480 .... sceneGroup.x, sceneGroup.y = display.contentCenterX, display.contentCenterY if event.type ==\u0026#34;portrait\u0026#34; and event.delta == -90 then sceneGroup:scale(ratio, ratio) elseif event.type ==\u0026#34;portraitUpsideDown\u0026#34; and event.delta == -90 then ... end TODO this plugin locks the screen orientation but can not find the document.\n{ [\u0026#34;plugin.orientation\u0026#34;] = { publisherId = \u0026#34;tech.scotth\u0026#34;, }, }, TODO save \u0026amp; cancel buttons goes out at the bottom in landscape\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/tvos/","title":"tvOS","tags":[],"description":"","content":"tvOS Icons\nandroid(FireTV)\nassets/tvAsset/Default-Landscape-assets/Default-Landscape.png assets/tvAsset/tvosLaunch-assets/Banner-xhdpi.png tvos(appleTV)\nassets/tvAsset/tvosLaunch-assets/Icon-tvOS-Launch.png\nassets/tvAsset/tvosLaunch-assets/Icon-tvOS-TopShelf.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-Background.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoA.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoB.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoC.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Large-LogoD.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-Background.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoA.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoB.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoC.png\nassets/tvAsset/tvosPallax-assets/Icon-tvOS-Small-LogoD.png\nParallax Previewer App\nhttps://developer.apple.com/library/tvos/documentation/General/Conceptual/AppleTV_PG/CreatingParallaxArtwork.html#//apple_ref/doc/uid/TP40015241-CH19-SW1 Solar2D does not need .lsr file to buld TVOS app. it needs those Logo.png\nPSD files - Image assets from layers\nhttps://helpx.adobe.com/photoshop/using/generate-assets-layers.html "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/win32/","title":"Win32","tags":[],"description":"","content":"Win32 Icon\nassets/DeskTopIcon/Icon-win32.ico\nwin_icon.bat\nset MYDIR=desktop_icon-assets set ICON_FILE=Icon-win32.ico magick ./%MYDIR%/icon_16x16.png ./%MYDIR%/icon_32x32.png ./%MYDIR%/icon_48x48.png %ICON_FILE% Image Magick http://www.imagemagick.org/\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/button/","title":"Button","tags":[],"description":"","content":"Button "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/canvas/","title":"Canvas","tags":[],"description":"","content":"Canvas PSD\nbookFree \u0026gt; canvas Unit Test\neditor.test.suite_canvas Kwik4\ncomponents.kwik.layer_canvas.lua index\nApp/bookFree/canvas genereated from editor.template.componetns/pageX/index.lua\n{ name = \u0026#34;pageX\u0026#34;, components = { layers = { { back={ } }, { painting={} }, { butBlue={ class={\u0026#34;button\u0026#34;}} }, { butWhite={class={\u0026#34;button\u0026#34;}} }, { butOrange={class={\u0026#34;button\u0026#34;}} }, { butCamera={class={\u0026#34;button\u0026#34;}} }, { butLarge={class={\u0026#34;button\u0026#34;}} }, { butMedium={class={\u0026#34;button\u0026#34;}} }, { bigCandice={class={\u0026#34;button\u0026#34;}} }, { Candice={class = {\u0026#34;canvas\u0026#34;}}, }, }, commands = {}, } editor/template/components/pageX/interaction/defaults/canvas.lua\n// TODO add attributes\nlocal M = { name = \u0026#34;canvas\u0026#34;, class=\u0026#34;canvas\u0026#34;, controls = { isActive = true } } return M template\neditor/template/components/pageX/interaction/layer_canvas\n//TODO create it from kwik4\u0026rsquo;s components.kwik.layer_canvas.lua\nlocal name = ... local parent,root = parent_root(name) local layerProps = require(parent..\u0026#34;{{layer}}\u0026#34;) local M = { name =\u0026#34;{{name}}\u0026#34;, class = \u0026#34;{{class}}\u0026#34;, -- button, drag, canvas ... -- {{#controls}} UI.canvas.name = \u0026#34;UI.canvas\u0026#34; UI.canvas.cR, UI.canvas.cG, UI.canvas.cB = {{bc}} UI.canvas.brushSize = {{bs}} UI.canvas.brushAlpha = 1 UI.canvas.lineTable = {} UI.canvas.undone = {} {{/controls}} layerProps = layerProps } function M:create(UI) local sceneGroup = UI.scene.view local obj = self:createCanvas(UI) UI.layers[self.name] = obj sceneGroup[self.name] = obj sceneGroup:insert(obj) end ... ... return require(\u0026#34;components.kwik.layer_canvas\u0026#34;).new(M) module\ncomponents.kwik.layer_canvas\u0026quot; editor\n// editor.ihdex:getTool() returns a component editor from id of editor.model\ncomponents.editor.interaction.index\n// TODO implement a color selector for the attributes with Color\naction commands Please see design/project_model/commands/canvas and screenshot\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/group/","title":"Group","tags":[],"description":"","content":"Group TODO page4\u0026rsquo;s groups = {\u0026ldquo;SubA\u0026rdquo;, \u0026ldquo;GroupA\u0026rdquo;, \u0026ldquo;myGroup\u0026rdquo; }\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/html5/","title":"HTML5","tags":[],"description":"","content":"HTML5\nGetting started with HTML5\nhttps://docs.coronalabs.com/guide/html5/plugins/index.html\nhttps://www.solar2dplayground.com/\n"},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/selectors/","title":"Selectors","tags":[],"description":"","content":"Selectors editor.parts.selectors\nuser selects one of entries of layers, audios, actions, groups, timers, variables\nthe tables of layers, audios, actions, groups, timers, variables are made with nanostore:set when user clicks one of the menu\ncomponentHandler is attached to the onClick event of menu and then each XXXStore:listener creates each table\nlocal function componentHandler(UI, storeTable) ... -- should we show the last secection? if storeTable == \u0026#34;layerTable\u0026#34; then UI.editor.layerStore:set(UI.scene.model.components.layers) elseif storeTable == \u0026#34;audioTable\u0026#34; then UI.editor.audioStore:set(UI.scene.model.components.audios) elseif storeTable == \u0026#34;groupTable\u0026#34; then UI.editor.groupStore:set(UI.scene.model.components.groups or {}) elseif storeTable == \u0026#34;timerTable\u0026#34; then print(storeTable, #UI.scene.model.components.timers) UI.editor.timerStore:set(UI.scene.model.components.timers) elseif storeTable == \u0026#34;variableTable\u0026#34; then UI.editor.variableStore:set(UI.scene.model.components.variables) elseif storeTable == \u0026#34;actionTable\u0026#34; then UI.editor.actionStore:set(UI.scene.model.commands) end ... UI.scene.model.components.layers is rendered in editor.parts.layerTable\nlocal scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page1\u0026#34;, components = { layers = { { bg={ } }, { gotoBtn={ --class={\u0026#34;animation\u0026#34;} } }, { title={ class={\u0026#34;linear\u0026#34;} } }, }, audios = {}, groups = {}, timers = {}, variables = {}, page = { } }, commands = { \u0026#34;eventOne\u0026#34;, \u0026#34;eventTwo\u0026#34;, \u0026#34;act01\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) editor.parts.layerTable\nthe entries of componets.layers are recursively parsed\nlocal function parse(model) ... return name, class, children end local function render(models, xIndex, yIndex, parentObj) ... for i = 1, #models do local model = models[i] local entry = {} ... entry.name, entry.class, entry.children = parse(model) -- children if entry.children and #entry.children \u0026gt; 0 then ... local childEntries, c = render(entry.children, xIndex + 1, count + yIndex, obj ) for k, v in pairs(childEntries) do objs[#objs + 1] = v end obj.childEntries = childEntries end end ... return objs, count end UI.editor.layerStore:listen( function(foo, fooValue) M:destroy() M.selection = nil M.selections = {} M.objs = render(fooValue, 0, 0) end ) note: util.read() function parses \u0026ldquo;App/\u0026rdquo;..book..\u0026quot;/models/\u0026quot;..page ..\u0026quot;/index.json\u0026quot;\n... ret.layers = parser(decoded) ... setFiles(ret.audios, \u0026#34;/audios/short\u0026#34;) setFiles(ret.audios, \u0026#34;/audios/long\u0026#34;) setFiles(ret.groups, \u0026#34;/groups\u0026#34;) setFiles(ret.commands, \u0026#34;/commands\u0026#34;) return ret { layers = { {name = \u0026#34;layerOne\u0026#34;, parent=\u0026#34;\u0026#34;, children = { {name=\u0026#34;childOne}, parent=\u0026#34;layerOne\u0026#34;, children = {}} } }, {name = \u0026#34;layerTwo\u0026#34;, parent=\u0026#34;\u0026#34;, children = {}}, }, audios = {} } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/template/","title":"Template strurcture","tags":[],"description":"","content":"template structure ├── App ├── contentX ├── assets │ ├── audios │ │ ├── short │ │ ├── long │ │ └── sync │ ├── images │ └── model.json ├── commands │ └── pageX ├── components │ ├── pageX │ │ ├── audios │ │── layers │ │ ├── animations │ │ ├── images │ │ ├── interactions │ │ ├── physics │ │ └── replacements │ ├── groups │ ├── page │ ├── timers │ ├── variables │ └── index.lua │ ├── defaults │ ├── audio_properties.xml │ ├── layer_properties.xml │ ├── linear_anim_properties.xml │ └── spritesheet_properties.xml ├── models ├── assets │ ├── audios │ │ ├── short │ │ ├── long │ │ └── sync │ ├── index.json │ ├── particles │ ├── sprites │ ├── videos │ └── www ├── lproj └── pageX ├── components │ ├── audios │ ├── layers │ ├── groups │ ├── page │ ├── timers │ └── variables ├── commands ├── index.json "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/settings/linux/","title":"Linux","tags":[],"description":"","content":"Linux\nhttps://forums.solar2d.com/c/beta-testing/linux/118\nhttps://snapcraft.io/solar2d\nhttps://forums.solar2d.com/t/how-to-build-solar2d-on-linux/354787/3\naudio.loadSound() won\u0026rsquo;t work https://forums.solar2d.com/t/audio-loadsound-wont-work/355589\nLinux and Zerobrane Setup https://forums.solar2d.com/t/linux-and-zerobrane-setup/354500\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/particles/","title":"Particles","tags":[],"description":"","content":"Particles create main.lua file\ndisplay.setStatusBar( display.HiddenStatusBar ) local particleDesigner = require( \u0026#34;particleDesigner\u0026#34; ) local kaboom = particleDesigner.newEmitter( \u0026#34;\u0026#39;+jname+\u0026#39;_temp.json\u0026#34; ) kaboom.x = display.contentWidth / 2 kaboom.y = display.contentHeight / 2 Model\n{ configName = \u0026#39;\u0026#39;, textureFileName = \u0026#39;\u0026#39;, common = { duration = 0, sourcePositionVariancex = 0, sourcePositionVariancey = 0, maxParticles = 0, }, emitter = { emittyerType = 0, -- 0=grevity, 1=radial angle = 0, angleVariance = 0, gravity = { speed = 0, speedVariance = 0, gravityx = 0, gravityy = 0, radialAcceleration = 0, radialAccelVariance = 0, tangentialAcceleration = 0, tangentialAccelVariance = 0, }, radial = { maxRadius = 0, maxRadiusVariance = 0, minRadius = 0, minRadiusVariance = 0, rotatePerSecond = 0, rotatePerSecondVariance = 0, } }, particles = { particleLifespan = 0, particleLifespanVariance = 0, startParticleSize = 0, startParticleSizeVariance = 0, finishParticleSize = 0, finishParticleSizeVariance = 0, rotationStart = 0, rotationStartVariance = 0, rotationEnd = 0, rotationEndVariance = 0, }, colors = { startColorAlpha = 0, startColorRed = 0, startColorGreen = 0, startColorBlue = 0, startColorVarianceRed = 0, startColorVarianceGreen = 0, startColorVarianceBlue = 0, startColorVarianceAlpha = 0, finishColorAlpha = 0, finishColorRed = 0, finishColorGreen = 0, finishColorBlue = 0, blendFuncSource = 0, finishColorVarianceRed = 0, finishColorVarianceGreen = 0, finishColorVarianceBlue = 0, finishColorVarianceAlpha = 0, blendFuncDestination = 0, }, } var st = String(myParticles.blendFuncSource)\rswitch (st) {\rcase '0':\rst=0;\rbreak;\rcase '1':\rst=1;\rbreak;\rcase '774':\rst=2;\rbreak;\rcase '775':\rst=3;\rbreak;\rcase '770':\rst=4;\rbreak;\rcase '771':\rst=5;\rbreak;\rcase '772':\rst=6;\rbreak;\rcase '773':\rst=7;\rbreak;\rcase '776':\rst=8;\rbreak;\r}\r//\rvar st2 = String(myParticles.blendFuncDestination)\rswitch (st2) {\rcase '0':\rst2=0;\rbreak;\rcase '1':\rst2=1;\rbreak;\rcase '774':\rst2=2;\rbreak;\rcase '775':\rst2=3;\rbreak;\rcase '770':\rst2=4;\rbreak;\rcase '771':\rst2=5;\rbreak;\rcase '772':\rst2=6;\rbreak;\rcase '773':\rst2=7;\rbreak;\rcase '776':\rst2=8;\rbreak;\r}\r//Default\r//image/texture\rif (oriParticleFile != true \u0026amp;\u0026amp; preview == true) {\rmyParticles.textureFileName = '\u0026quot;'+newParticleFile+'\u0026quot;';\r} else if (oriParticleFile != true \u0026amp;\u0026amp; preview != true) {\rico = dlg.partName.e.text+\u0026quot;.png\u0026quot;;\rico = ico.replace(/\u0026quot;/gi, \u0026quot;\u0026quot;)\rmyParticles.textureFileName = '\u0026quot;'+ico+'\u0026quot;';\r} else if (oriParticleFile == true \u0026amp;\u0026amp; preview != true) {\rico = dlg.partName.e.text+\u0026quot;.png\u0026quot;;\rico = ico.replace(/\u0026quot;/gi, \u0026quot;\u0026quot;)\rmyParticles.textureFileName = '\u0026quot;'+ico+'\u0026quot;';\r} else {\rico = ico.replace(/\u0026quot;/gi, \u0026quot;\u0026quot;)\rmyParticles.textureFileName = '\u0026quot;'+ico+'\u0026quot;';\r}\r//particles content\r//Color content\rswitch (st) {\rcase 'Zero':\rst=0;\rbreak;\rcase 'One':\rst=1;\rbreak;\rcase 'Dst_Color':\rst=774;\rbreak;\rcase 'One_Minus_Dst_Color':\rst=775;\rbreak;\rcase 'Src_Alpha':\rst=770;\rbreak;\rcase 'One_Minus_Src_Alpha':\rst=771;\rbreak;\rcase 'Dst_Alpha':\rst=772;\rbreak;\rcase 'One_Minus_Dst_Alpha':\rst=773;\rbreak;\rcase 'Source_Alpha_Saturate':\rst=776;\rbreak;\r}\rmyParticles.blendFuncSource = st;\rswitch (st1) {\rcase 'Zero':\rst1=0;\rbreak;\rcase 'One':\rst1=1;\rbreak;\rcase 'Dst_Color':\rst1=774;\rbreak;\rcase 'One_Minus_Dst_Color':\rst1=775;\rbreak;\rcase 'Src_Alpha':\rst1=770;\rbreak;\rcase 'One_Minus_Src_Alpha':\rst1=771;\rbreak;\rcase 'Dst_Alpha':\rst1=772;\rbreak;\rcase 'One_Minus_Dst_Alpha':\rst1=773;\rbreak;\rcase 'Source_Alpha_Saturate':\rst1=776;\rbreak;\r}\rmyParticles.blendFuncDestination = st1;\rfunction jsonXML(file) { if (garb == \u0026#34;{\u0026#34;) { toxml += garb.replace(\u0026#34;{\u0026#34;, \u0026#34;\u0026lt;particles\u0026gt;\u0026#34;); } else if (garb == \u0026#34;}\u0026#34;) { toxml += garb.replace(\u0026#34;}\u0026#34;, \u0026#34;\u0026lt;/particles\u0026gt;\u0026#34;); } else if (garb.search(\u0026#34;configName\u0026#34;) \u0026gt; 0 ) { toxml += \u0026#39;\u0026lt;configName\u0026gt;\u0026#34;\u0026#39;+configName+\u0026#39;\u0026#34;\u0026lt;/configName\u0026gt;\u0026#39;; } else if (garb.search(\u0026#34;textureFileName\u0026#34;) \u0026gt; 0 ) { toxml += \u0026#39;\u0026lt;textureFileName\u0026gt;\u0026#34;\u0026#39;+imagefile+\u0026#39;\u0026#34;\u0026lt;/textureFileName\u0026gt;\u0026#39;; } else { garb = garb.replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#34;\u0026lt;\u0026#34;) var para = garb.substring(1,garb.search(\u0026#39;\u0026#34;:\u0026#39;)) garb = garb.replace(\u0026#39;\u0026#34;:\u0026#39;, \u0026#34;\u0026gt;\u0026#34;); garb = garb.replace(\u0026#39;,\u0026#39;, \u0026#34;\u0026#34;); garb = garb+\u0026#34;\u0026lt;/\u0026#34;+para+\u0026#34;\u0026gt;\u0026#34;; toxml += garb; } } function xmJSON(file) { var j = \u0026#34;{ \\r\\n\u0026#34; for (var xn=0;xn\u0026lt;=myParticles.elements().length()-1;xn++) { if (xn!=myParticles.elements().length()-1) { j += \u0026#39; \u0026#34;\u0026#39;+myParticles.child(xn).name()+\u0026#39;\u0026#34; : \u0026#39;+myParticles.child(xn)+\u0026#39;, \\r\\n\u0026#39;; } else { j += \u0026#39; \u0026#34;\u0026#39;+myParticles.child(xn).name()+\u0026#39;\u0026#34; : \u0026#39;+myParticles.child(xn)+\u0026#39; \\r\\n\u0026#39;; } } j += \u0026#34;}\u0026#34; } "},{"uri":"https://kwiksher.github.io/kwik5docs/implementation/rest_server/","title":"REST Server","tags":[],"description":"","content":"Rest Server editor.pegasus\npegasus is a open-souce lua http-server\nhttpYac in vscode to send a REST request to editor.pegasus\nselectPage.http\nthis calls these commnands in editor\nselectApp selectBook selectPage ref edtior.tests\npegasus harness receives the request in REST format (json)\ndispatch events to commands\nselectXXX reads App/bookX/pageX/index.lua or models/pageX/.json files, and the data are stored in nanstores for components such bookStore, pageStore, layerStore, audioStore\nResponse of http Rest in pegasus are retreived by nanostores:get(xxxStore)\nselectLayer.http - Read\nselect a layer and shows the properties\nselectTool.http - Write\nattach a tool (animation) to a selected layer\ngraph LR subgraph vscode httpYac end subgraph solar2D pegasus subgraph commands selectApp selectBook selectPage selectLayer selectTool[selectTool \u0026lt;br\u0026gt; new or update class props] end subgraph controllers_save updateIndex[index model \u0026lt;br\u0026gt; layer model] save[save .json] render[render lua] updateIndex -.-\u0026gt; render updateIndex -.-\u0026gt; save end subgraph nanosotres bookStore pageStore layerStore end subgraph UI bookTable pageTable layerTable subgraph animation selectBox contropProps pointABBox onCompletebox end subgraph audio selectBox_[selectBox] contropProps_[controlProps] onCompletebox_[onCompletebox] end end subgraph models subgraph runtime lua[pageX.index \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; scene.components \u0026lt;br\u0026gt; - layers \u0026lt;br\u0026gt; - audios \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; layerX.lua \u0026lt;br\u0026gt; layerX_anim.lua] end subgraph persistent json[models/pageX/.json] layerX.json layerX_anim.json end end end httpYac -.- pegasus pegasus -. 1.onGet.-\u0026gt;selectLayer selectLayer -. read .- lua lua -. 1.onGet set .-\u0026gt; layerStore selectLayer -. show .- layerTable layerStore -. 1.onGet subscribed data.-\u0026gt; layerTable selectTool -. nanostores get .- layerStore selectTool -.read class.- lua save -. write .- json save -. write .- layerX_anim.json save -. write .- layerX.json render -.write .- lua pegasus -. 2-1.onPost class.-\u0026gt;selectTool pegasus -. 2-2.onPost save.-\u0026gt;updateIndex layerX_anim.json -.setValue .-\u0026gt; contropProps lua -. read .- layerX.json lua -. 2-1 onPost read .- layerX_anim.json "},{"uri":"https://kwiksher.github.io/kwik5docs/design/sample-projects/","title":"Sample Projects","tags":[],"description":"","content":"Sample Projects sample-projects/SingleBook sample-projects/Pegasus sample-projects/Misc/Transition2 sample-projects/MusicLibrary sample-projects/MultilingualBook sample-projects/GameCenter "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/spritesheet/","title":"Spritesheet","tags":[],"description":"","content":"Spritesheet TODO\nactionName with sprite event phase like began, ended, bounce, loop, next file selector for sheetInfo and filename? UI\nindex template\neditor.template.componetns/pageX/index.lua template\neditor.template.components.pageX.replacement\nlayer_spritesheet\nmodule\ncomponents.kwik.layer_spritesheet editor\ncomponents.editor.replacement\n. ├── controller │ ├── add.lua │ ├── cancel.lua │ ├── delete.lua │ ├── index.lua │ ├── save.lua │ └── select.lua ├── index.lua ├── listButtons.lua ├── listPropsTable.lua ├── listbox.lua ├── model.lua ├── onCompletebox.lua ├── particles │ └── controller └── videobox.lua defaults\neditor.template.components.pageX.replacement.defaults.spritesheet\nlocal M = { name = \u0026#34;spritesheet\u0026#34;, class = \u0026#34;spritesheet\u0026#34;, type = \u0026#34;uniform-sized\u0026#34;, -- TexturePacker, Animate controls = { filename = \u0026#34;imagesheet.png\u0026#34;, sheetInfo = \u0026#34;spritesheet\u0026#34;, sheetContentWidth = 376, -- same size or loaded from sheetInfo sheetContentHeight = 188, -- same size or loaded from sheetInfo numFrames = 2, -- same size or loaded from sheetInfo width = 188, -- same size, disable for TP, Aniamte height = 188, -- same size, disable for TP, Animate }, sequenceData = { { name = \u0026#34;default\u0026#34;, count = 2, loopCount = 0, loopDirection = \u0026#34;forward\u0026#34;, -- reverse after last frame pause = false, start = 1, time = 1000, }, { name = \u0026#34;test\u0026#34;, frames = {1,2}, loopCount = 0, loopDirection = \u0026#34;forward\u0026#34;, -- reverse after last frame pause = false, time = 1000, } }, actioneName = \u0026#34;\u0026#34;, -- event.phase -- began -- ended -- bounce — The animation bounced from forward to backward while playing. -- loop — The animation looped from the beginning of the sequence. -- next - The animation played a subsequent frame that\u0026#39;s not one of the above phases. } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/template_model/","title":"Template Model","tags":[],"description":"","content":"Code Template Model assets/model/schema\nembedded in codes \u0026ndash; TBI to be extracted\nexternal codes - export it to .lua or can be imported directly physics path read2me - timecodes spritesheet info TODO:add ext codes\nextCodes libs p1 user_codes.lua ext_001.lua ext_002.lua commands/ button_name_001.lua action_name_001.lua user_codes.lua p2/ =\u0026gt; build4/\n```lua function ActionCommand:new() local command = {} -- function command:execute(params) local UI = params.UI local sceneGroup = UI.scene.view local layer = UI.layer local phase = params.event.phase local event = params.event {{#vvar}} {{vvar}} {{/vvar}} {{#arqCode}} {{arqCode}} {{/arqCode}} end return command end ``` or ext_lib_codes.lua ``` local _K = require \u0026quot;Application\u0026quot; {{#extLib}} local {{name}} = requireKwik(\u0026quot;{{libname}}\u0026quot;) {{/extLib}} -- {{#TV}} local kInputDevices = require(\u0026quot;extlib.tv.kInputDevices\u0026quot;) {{/TV}} function _M:localVars(UI) local sceneGroup = UI.scene.view local layer = UI.layer {{#extCodeTop}} {{ccode}} {{arqCode}} {{/extCodeTop}} end ``` model.json\n{ \u0026#34;page\u0026#34;:1,\u0026#34;alias\u0026#34;:\u0026#34;title\u0026#34;,\u0026#34;isTmplt\u0026#34;:false, \u0026#34;audios\u0026#34;:[null], \u0026#34;read2me\u0026#34;:[null], \u0026#34;videos\u0026#34;:[null], \u0026#34;PNGs\u0026#34;:[null], \u0026#34;sprites\u0026#34;:[null], \u0026#34;particles\u0026#34;:[null], \u0026#34;WWW\u0026#34;:[null], \u0026#34;thumbnails\u0026#34;:[null], \u0026#34;images\u0026#34;:[ \u0026#34;bg@4x.png\u0026#34;, \u0026#34;bg@2x.png\u0026#34;, \u0026#34;bg.png\u0026#34;, null ], \u0026#34;shared\u0026#34;:[ null ] } { \u0026#34;page\u0026#34;:{{page}},\u0026#34;alias\u0026#34;:\u0026#34;{{alias}}\u0026#34;,\u0026#34;isTmplt\u0026#34;:{{isTmplt}}, {{#layers}} \u0026#34;{{layer}}\u0026#34;:{ \u0026#34;x\u0026#34;:{{x}}, \u0026#34;y\u0026#34;:{{y}}, \u0026#34;width\u0026#34;:{{width}}, \u0026#34;height\u0026#34;:{{height}}, \u0026#34;alpha\u0026#34;:{{alpha}}, \u0026#34;ext\u0026#34;:\u0026#34;{{ext}}\u0026#34; }, {{/layers}} \u0026#34;audios\u0026#34;:[ {{#audios}}\u0026#34;{{filename}}\u0026#34;,{{/audios}} null], \u0026#34;read2me\u0026#34;:[ {{#read2me}}{\u0026#34;foldername\u0026#34;:\u0026#34;{{foldername}}\u0026#34;, \u0026#34;filenames\u0026#34;:[{{#filenames}}\u0026#34;{{.}}\u0026#34;,{{/filenames}} null] },{{/read2me}} null], \u0026#34;videos\u0026#34;:[ {{#videos}}\u0026#34;{{filename}}\u0026#34;,{{/videos}} null], \u0026#34;PNGs\u0026#34;:[ {{#PNGs}}\u0026#34;{{foldername}}\u0026#34;,{{/PNGs}} null], \u0026#34;sprites\u0026#34;:[ {{#sprites}}\u0026#34;{{filename}}\u0026#34;,{{/sprites}} null], \u0026#34;particles\u0026#34;:[ {{#particles}}{\u0026#34;filename\u0026#34;:\u0026#34;{{filename}}\u0026#34;,\u0026#34;PNG\u0026#34;:\u0026#34;{{PNG}}\u0026#34;},{{/particles}} null], \u0026#34;WWW\u0026#34;:[ {{#WWW}}{\u0026#34;filename\u0026#34;:\u0026#34;{{filename}}\u0026#34;,\u0026#34;foldername\u0026#34;:\u0026#34;{{foldername}}\u0026#34;},{{/WWW}} null], \u0026#34;thumbnails\u0026#34;:[ {{#thumbnails}}{{#filenames}}\u0026#34;{{.}}\u0026#34;,{{/filenames}} {{/thumbnails}}null], \u0026#34;images\u0026#34;:[ {{#images}} \u0026#34;{{filename}}@4x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}@2x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}.{{filetype}}\u0026#34;, {{/images}} null ], \u0026#34;shared\u0026#34;:[ {{#shared}} \u0026#34;{{filename}}@4x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}@2x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}.{{filetype}}\u0026#34;, {{/shared}} null ] } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/tools/utilities/","title":"Utilities","tags":[],"description":"","content":"Utilities /develop/Solar2D/tools/yaml2lua\nthere is a vscode extention to convert yaml to json , json to yaml etc\n- name: Loading01 from: from to: x: 100 y: 100 alpha: 1 duration: 2000 xScale: 1.5 yScale: 1.5 rotation: 0 controls: restart: false easing: Linear reverse: false delay: 1000 loop: 1 angle: 45 xSwipe: 0 ySwipe: 0 referncePoint: Center breadcrumbs: dispose: true shape: \u0026#34;\u0026#34; color: - 1 - 0 - 1 interval: 300 time: 2000 width: 30 height: 30 lua\n{ breadcrumbs = { color = { 1, 0, 1 }, dispose = true, height = 30, interval = 300, shape = \u0026#34;\u0026#34;, time = 2000, width = 30 }, controls = { referncePoint = \u0026#34;Center\u0026#34;, angle = 45, delay = 1000, easing = \u0026#34;Linear\u0026#34;, loop = 1, restart = false, reverse = false, xSwipe = 0, ySwipe = 0 }, from = \u0026#34;from\u0026#34;, name = \u0026#34;Loading01\u0026#34;, to = { alpha = 1, duration = 2000, rotation = 0, x = 100, xScale = 1.5, y = 100, yScale = 1.5 } } } /develop/Solar2D/tools/generate_scene_index (TODO update ⭐️)\ngenerating scene/pageX/index.lua\nindex.lua is created by iterating files from\nApp/conentX/scene/pageX App/contentX/components/pageX App/conentX/commands/pageX scafolding (optional)\nit outputs .lua files to components and commands folder by reading scene/pageX/index.lua\n"},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/sync_audio_text/","title":"Sync Audio&amp;Text","tags":[],"description":"","content":" Sync Audio \u0026amp; Text A: alphabet B: i am cat C: my name is kwik D: my father is nice TODO\nthe latest model defaults.sync has audioProps and textProps but UI does not have them yet\nupdate page3/layers\nalphabet_sync.lua, iamacat_sync.lua mynameiskwik_sync.lua props.text \u0026ndash;\u0026gt; props.line\nprops.languge \u0026ndash;\u0026gt; props.line.en, props.line.jp and textProps.language = {\u0026ldquo;en\u0026rdquo;, \u0026ldquo;jp\u0026rdquo;}\nUI\ndefault\nlocal M = { name = \u0026#34;alphabet\u0026#34;, class = \u0026#34;sync\u0026#34;, controls = { autoPlay = true, delay = nil, fadeDuration = 1000, speakerIcon = true, wordTouch = true, }, audioProps = { filename = \u0026#34;alphabet.mp3\u0026#34;, channel = 2, volume = 10, }, textProps = { folder = nil, font = nil1, fontColor = { 1,1,1 }, fontColorHi = { 1, 1, 0 }, fontSize = 36, language = nil, padding = 10, readDir = \u0026#34;leftToRight\u0026#34;, sentenceDir = \u0026#34;alphabet\u0026#34;, -- wordTouch } } M.line = { { start = 0, out = 1000, dur = 0, name = \u0026#34;A\u0026#34;, file = \u0026#34;a.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, { start = 1000, out = 2000, dur = 0, name = \u0026#34;B\u0026#34;, file = \u0026#34;b.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, { start = 2000, out = 3000, dur = 0, name = \u0026#34;C\u0026#34;, file = \u0026#34;c.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } Sync Audio \u0026amp; Text test/base-proj/Solar2D/App/bookFree/components/page3/index.lua\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page3\u0026#34;, components = { layers = { { test={}}, { alphabet = {class={\u0026#34;sync\u0026#34;}}}, { iamacat = {class={\u0026#34;sync\u0026#34;}}}, { mynameiskwik = {class={\u0026#34;sync\u0026#34;}}}, }, audios = { long = {\u0026#34;GentleRain\u0026#34;, \u0026#34;Tranquility\u0026#34; }, short ={\u0026#34;ballsCollision\u0026#34;} , }, groups = {}, timers = {}, variables = {}, page = { } }, commands = { \u0026#34;onComplete\u0026#34;, \u0026#34;play\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene files(mp3 and text) are structeud in the following patterns A-D. See the examples of sync audio text in page3/index.lua\nA: alphabet\nnot multi-lingual\nword touch enabled and files are in alphabet folder\nclicking a word in a line, the word.mp3 is played\n── sync ├── alphabet │ ├── a.mp3 │ ├── b.mp3 │ └── c.mp3 ├── alphabet.mp3 ├── alphabet.txt B: iamcat\nen and jp word touch enabeld and mp3 files of words are in i_am_cat folder ── sync ├── en │ ├── i_am_a_cat │ │ ├── am.mp3 │ │ ├── cat.mp3 │ │ └── i.mp3 │ ├── i_am_a_cat.mp3 │ ├── i_am_a_cat.txt └── jp ├── i_am_a_cat │ ├── am.mp3 │ ├── cat.mp3 │ └── i.mp3 ├── i_am_a_cat..txt ├── i_am_a_cat.mp3 C: mynameiskwik\nen and jp mp3 and txt are in page3 folder no word touch ── sync ├── en │ └── page3 │ ├── my_name_is_kwik.mp3 │ └── my_name_is_kwik.txt └── jp └── page3 ├── my_name_is_kwik.mp3 └── my_name_is_kwik.txt D: my father is nice\nen and jp no word touch ── sync ├── en │ ├── my_father_is_nice.mp3 │ ├── my_father_is_nice.txt └── jp ├── my_father_is_nice.mp3 ├── my_father_is_nice.txt A: alphabet local props = { name = \u0026#34;alphabet\u0026#34;, filename = \u0026#34;alphabet.mp3\u0026#34;, type = \u0026#34;sync\u0026#34;, autoPlay = true, channel = 2, folder = nil } props.text = { { start = 0, out = 1000, dur = 0, name = \u0026#34;A\u0026#34;, file = \u0026#34;a.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, { start = 1000, out = 2000, dur = 0, name = \u0026#34;B\u0026#34;, file = \u0026#34;b.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, { start = 2000, out = 3000, dur = 0, name = \u0026#34;C\u0026#34;, file = \u0026#34;c.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } props.wordTouch = true props.sentenceDir = \u0026#34;alphabet\u0026#34; -- wordTouch props.layer = \u0026#34;alphabet\u0026#34; B: i am cat local props = { name = \u0026#34;i_am_a_cat\u0026#34;, filename = \u0026#34;i_am_a_cat.mp3\u0026#34;, type = \u0026#34;sync\u0026#34;, language = {}, autoPlay = true, channel = 2, folder = nil } props.language.en = { { start = 0, out = 500, dur = 0, name = \u0026#34;I\u0026#34;, file = \u0026#34;i.mp3\u0026#34;}, { start = 500, out = 1000, dur = 0, name = \u0026#34;am\u0026#34;, file = \u0026#34;am.mp3\u0026#34;}, -- { start = 1000, out = 1000, dur = 0, name = \u0026#34;a\u0026#34;, file = nil}, { start = 1000, out = 1500, dur = 0, name = \u0026#34;a cat.\u0026#34;, file = \u0026#34;cat.mp3\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } props.language.jp ={ {start = 0, out = 500, dur = 0, name = \u0026#34;ぼく\u0026#34;, file = \u0026#34;i\u0026#34;}, {start = 500, out = 1000, dur = 0, name = \u0026#34;ねこ\u0026#34;, file = \u0026#34;cat\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } props.wordTouch = true props.sentenceDir = \u0026#34;i_am_a_cat\u0026#34; -- wordTouch props.layer = \u0026#34;iamacat\u0026#34; C: my name is kwik local props = { name = \u0026#34;my_name_is_kwik\u0026#34;, filename = \u0026#34;my_name_is_kwik.mp3\u0026#34;, type = \u0026#34;sync\u0026#34;, language = {}, folder = \u0026#34;page3\u0026#34;, } -- -- action is added by sync props -- props.language.en = { { start = 0, out = 500, dur = 0, name = \u0026#34;My\u0026#34;, file = \u0026#34;\u0026#34; }, { start = 500, out = 1000, dur = 0, name = \u0026#34;name\u0026#34;, file = \u0026#34;\u0026#34;}, { start = 1000, out = 1000, dur = 0, name = \u0026#34;is\u0026#34;, file = \u0026#34;\u0026#34;}, { start = 1000, out = 1500, dur = 0, name = \u0026#34;Kwik.\u0026#34;, file = \u0026#34;\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } props.language.jp = { {start = 0, out = 500, dur = 0, name = \u0026#34;なまえ\u0026#34;, file = \u0026#34;\u0026#34;}, {start = 500, out = 500, dur = 0, name = \u0026#34;は\u0026#34;, file = \u0026#34;\u0026#34;}, {start = 500, out = 1000, dur = 0, name = \u0026#34;くいっく\u0026#34;, file = \u0026#34;\u0026#34;, action = \u0026#34;onComplete\u0026#34;}, } props.wordTouch = false props.sentenceDir = nil -- wordTouch props.readDir = \u0026#34;leftToRight\u0026#34; props.layer = \u0026#34;mynameiskwik\u0026#34; D: my father is nice local props = { name = \u0026#34;myfatherisnice\u0026#34;, filename = \u0026#34;my_father_is_nice.mp3\u0026#34;, type = \u0026#34;sync\u0026#34;, language = {}, folder = nil, } -- -- action is added by sync props -- props.language.en = { } props.language.jp = { } props.wordTouch = false props.sentenceDir = nil -- wordTouch props.readDir = \u0026#34;leftToRight\u0026#34; props.layer = \u0026#34;myfatherisnice\u0026#34; "},{"uri":"https://kwiksher.github.io/kwik5docs/design/project_model/components/timer/","title":"Timer","tags":[],"description":"","content":"Timer UI\ntemplate\neditor.template.components.pageX.timers.timer\nlocal props = { actionName = \u0026#34;{{actionName}}\u0026#34;, delay = {{delay}}, iterations = {{iterations}}, name = \u0026#34;{{name}}\u0026#34;, } return require(\u0026#34;components.kwik.page_timer\u0026#34;).new(props) module\ncomponents.kwik.page_timer\nlocal M = {} ... ... function M:didShow(UI) self.timerObj = timer.performWithDelay( self.delay, function() if self.actionName then UI.scene:dispatchEvent({name = self.actionName }) end end, self.iterations) end -- components.editor.timer timer ├── buttons.lua ├── controller │ ├── cancel.lua │ └── save.lua ├── defaults │ └── timer.lua ├── index.lua └── timerTable.lua comonents.editor.timer.index\nlocal model = { id =\u0026#34;timer\u0026#34;, props = { {name=\u0026#34;actionName\u0026#34;, value=\u0026#34;\u0026#34;}, {name=\u0026#34;delay\u0026#34;, value=0}, {name=\u0026#34;iterations\u0026#34;, value = 1}, {name=\u0026#34;name\u0026#34;, value = \u0026#34;\u0026#34;}, } } ... ... function controller:render(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/\u0026#34;..page ..\u0026#34;/components/timers/\u0026#34;..type..\u0026#34;/\u0026#34;..name ..\u0026#34;.lua\u0026#34; local tmplt = \u0026#34;editor.template/components/pageX/timers/timer.lua\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, page, \u0026#34;components\u0026#34;, \u0026#34;timers\u0026#34;, type) util.saveLua(tmplt, dst, model) return dst end function controller:save(book, page, type, name, model) local dst = \u0026#34;App/\u0026#34;..book..\u0026#34;/models/\u0026#34;..page ..\u0026#34;/timers/\u0026#34;..name..\u0026#34;.json\u0026#34; util.mkdir(\u0026#34;App\u0026#34;, book, \u0026#34;models\u0026#34;, page, \u0026#34;timers\u0026#34;, type) util.saveJson(dst, model) return dst end components.editor.timer.defaults\nthe order of the table must be as same as the model.props table in index and must be sorted in alphavetical order\nlocal M = { actionName = \u0026#34;\u0026#34;, delay = 0, iterations = 1, name = \u0026#34;timer-new\u0026#34;, } "},{"uri":"https://kwiksher.github.io/kwik5docs/design/new_features/","title":"New Features","tags":[],"description":"","content":"New Features Solar2D API to be included\nAudio\nseek rewind cross fade function Social\ntwitter facebook instagram transition.*\nchaining them mesh\n2.5D — Perspective and Depth\ngame controllers\nSolar2D video texture\nhttps://github.com/ANSH3LL/plugin_movie Tiled\nhttps://forums.solar2d.com/t/smooth-scrolling-of-top-down-tiled-map/150199/2\n\u0026ldquo;cull based on a 3x3 area of sub-screens centered around player. \u0026quot;\nhttps://gamedev.stackexchange.com/questions/83253/is-there-any-way-to-load-pieces-of-a-tile-map-as-and-when-needed-and-not-the-en\nhttps://www.dynetisgames.com/2018/02/24/manage-big-maps-phaser-3/\nA tool to split an existing Tiled tilemap into chunks How to reason about chunks based on their ID’s and the world dimensions How to load and destroy them on the fly using Phaser 3 Texture atlas function in kwik?\nhttps://github.com/shama/atlaspack\nhttp://free-tex-packer.com/\nhttps://github.com/odrick/free-tex-packer\nhttps://github.com/richardjdare/Atlasmaker\nhttps://github.com/soimy/atlasify ⭐️\nhttps://github.com/soimy/maxrects-packer Audio sprites?\nhttps://medium.com/game-development-stuff/how-to-create-audiosprites-to-use-with-howler-js-beed5d006ac1 Interactive\ntexture atlas \u0026ndash; Spine spritesheet \u0026ndash; Adobe Animate movie \u0026ndash; Adobe Animate Lottie ts to lua? ⭐️\nhttps://github.com/bytedance/lottiefy https://github.com/airbnb/lottie-web https://github.com/LottieFiles https://lottiefiles.com/what-is-lottie "},{"uri":"https://kwiksher.github.io/kwik5docs/all/","title":"all","tags":[],"description":"","content":""},{"uri":"https://kwiksher.github.io/kwik5docs/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://kwiksher.github.io/kwik5docs/tags/","title":"Tags","tags":[],"description":"","content":""}]