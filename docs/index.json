[{"uri":"/design/project_model/content/","title":"Content X Structure","tags":[],"description":"","content":"Content X Structure sandbox/Ps/react-uxp-styles/Project/Solar2D/src/App/contentX\n(TODO clean the tree structure below)\n. ├── assets │ ├── audios │ │ ├── sounds │ │ │ └── ballsCollide.mp3 │ │ ├── streams │ │ │ ├── Gentle-Rain.mp3 │ │ │ └── Tranquility.mp3 │ │ └── sync │ │ ├── en │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── jp │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── pageX_Text1.mp3 │ │ ├── pageX_Text1.txt │ │ ├── page02_Text1.mp3 │ │ └── page02_Text1.txt │ ├── images │ │ └── pageX │ │ ├── Loading.png │ │ ├── Loading@2x.png │ │ ├── Loading@4x.png │ │ ├── bg.png │ │ ├── bg@2x.png │ │ ├── bg@4x.png │ │ └── sidepanel │ │ ├── layersList.png │ │ ├── layersList@2x.png │ │ ├── layersList@4x.png │ │ ├── topbar.png │ │ ├── topbar@2x.png │ │ └── topbar@4x.png │ ├── kwik │ │ ├── kAudio.png │ │ ├── kAudioHi.png │ │ ├── shutter.mp3 │ │ └── thumbnails │ ├── particles │ │ ├── kaboom_393.json │ │ └── kaboom_393.png │ ├── sprites │ │ └── butflysprite.png │ ├── videos │ │ └── kwikplanet.mp4 │ └── www ├── components │ └── pag01 │ ├── audios │ ├── groups │ ├── others │ │ ├── page_IAP.lua │ │ ├── page_ads.lua │ │ ├── page_ext_lib_code.lua │ │ ├── page_navigation.lua │ │ ├── page_parallax.lua │ │ └── page_shake.lua │ ├── timers │ └── variables ├── models │ ├── assets │ │ ├── audios │ │ │ ├── sounds │ │ │ ├── streams │ │ │ └── sync │ │ ├── index.json │ │ ├── particles │ │ ├── sprites │ │ ├── videos │ │ └── www │ ├── pageX │ ├── components │ │ └── audios │ ├── events │ │ └── doDistanceModel.json │ ├── index.json │ └── layers │ ├── Loading.json │ ├── Loading_animation.json │ ├── Loading_button.json │ ├── Loading_properties.json │ ├── bg.json │ └── sidepanel │ ├── layersList.json │ └── topbar.json └── scenes └── pageX ├── Loading.lua ├── Loading_animation.lua ├── Loading_button.lua ├── bg.lua ├── index.lua └── sidepanel ├── index.lua ├── layersList.lua └── topbar.lua "},{"uri":"/","title":"Home","tags":[],"description":"","content":"TOC\n section 1 section 2  2-1     section 1 注釈のようなことを実現可能です1\nsection 2 before\n- - Header 1 - Header 2 - Header 3 - - Column 1-1 - Column 1-2 - Column 1-3 - - Column 2-1 - Column 2-2 - Column 2-3    Header 1 Header 2 Header 3     Column 1-1 Column 1-2 Column 1-3   Column 2-1 Column 2-2 Column 2-3    2-1 これは赤文字です\n2-1-1  これはイタリックです これはボールドです これはイタリック＆ボールドです これは打消し線です これは上付きです これは下付きです  1. 無理やりですが\n"},{"uri":"/get_started/","title":"Get Started","tags":[],"description":"","content":"TODO\n  swipe page or A/D keys for navigation\n  main.lua\n  rendered with Solar2D Project \u0026gt; Select Book, bookFolder\nrequire(\u0026#34;controller.index\u0026#34;).bootstrap({name=\u0026#34;book\u0026#34;, sceneIndex = 1, position = {x=0, y=0}}) -- scenes.index     scenes/index.lua\n  Active Document index should be set to main.lua\u0026rsquo;s sceneIndex\n    mediators/pageXMediator.lua\n when publishing, create the file.      test layer groups and add how to work with a layer group in get started\n  clean image template lua\n  add animation and button\n  add audio \u0026amp; video\n  Get Started {{ %toc% }}\n  Open Adobe UXP Developer Tool\nAdd Plugin to select develop/UXP/kwik-exporter/dist\n TODO alpla release folder structure may be different to the current develop\n Load it\nKwik Exporter Panel apppears\n  Photoshop Files \u0026gt; Open\nyou can select the following folder that comes with demo .psd files and kwikconfig.json. You may open a folder of yours which contains psd files.\n  sample-projects/SingleBook/book01\n page1.psd page2.psd kwikconfig.json  { \u0026#34;name\u0026#34;:\u0026#34;book one\u0026#34;, \u0026#34;output\u0026#34;:\u0026#34;../../Solar2D/src/App/book\u0026#34;, \u0026#34;pages\u0026#34;:[ {\u0026#34;psd\u0026#34;:\u0026#34;page01.psd\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;page one\u0026#34;}, {\u0026#34;psd\u0026#34;:\u0026#34;page02.psd\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;page two\u0026#34;} ] }    TODO Project Name Text Box to display a selected folder name as default.\n  TODO User can change it and Kwik uses it for a folder name when publshing\n  TODO kwikconfig.json will be created in the selected folder.\n   Double Click the one of .psd in the list to open for editing.\n  Solar2D Project \u0026gt; Select Book\n    New button, a set of Solar2D project will be generated to a selected folder.\n  Select Book\nplease select an output folder where each psf files are published. It must be under App folder.\n    Publish\nselected psd files are publihsed to App/book folder\n  checkbox all\nit will select all the psd files in the list\n  Input text box\nyou can input the index number of psd files to be published for example,\n0, 2-3\n  Publish button\nExport Settings Dialog appears, click Export\n TODO show the project name with the default output folder\n   Browse button\nSelect the folder for output if you like to change the destination. The default is defined in kwikconfig.json as \u0026quot;../../Solar2D/src/App/book\u0026quot;\n    Kwik will publish images/source code. You can find them in\n TODO change dist to src with SimpleBook sample\n     Active Document\n    Export Images\n  Export Code\n  Solar2D Simulator   Open main.lua in Solar2D/src with Solar2D Simulator\nTODO UXP::Publish to include swipe page or A/D keys for navigation ⭐️\nkwiconfig.lua\ndebug = {enable = true, navigation= \u0026quot;swipe/keys\u0026quot;}   Custom Code you can put your own code into commands and scenes folder. Kwik Exporter traverses folders of Solar2D project to integrate your additional files.\n commands/*.lua scenes/*.lua  for instance, myrect.lua calls myEvents.testHandler when user taps the rect.\nThe $weight is a meta variable. A scene componet(layer or your custom code)with lower value will be placed top. The top layer from Photoshop is zero. Then values are increases to until the background layer. For your custom code , you can use minus or positive with decimal. For example, myrect is -2, mycircle is -1. If you change weight values of custom code files, don\u0026rsquo;t forget to publish code again.\n-- $weight=-2 -- local _M = {} -- function _M:init(UI) end -- function _M:create(UI) local sceneGroup = UI.scene.view local obj = display.newRect( sceneGroup, display.contentCenterX, display.contentCenterY-100, 100, 100 ) obj:setFillColor(0.2,0.2,0.2); obj:addEventListener(\u0026#34;tap\u0026#34;, function() UI.scene:dispatchEvent({ name = \u0026#34;myEvents.testHandler\u0026#34;, UI = UI }) end) end -- function _M:didShow(UI) end -- function _M:didHide(UI) end -- function _M:destory() end -- return _M myEvents.testHandker.lua\nlocal instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local e = params.event local UI = e.UI print(\u0026#34;commands.myEvents.testhander\u0026#34;) UI.scene:dispatchEvent({ name = \u0026#34;myAction\u0026#34;, UI = UI }) end ) -- return instance You can find your custom code are inserted in scenes/{PSD FILENAME}/index.lua. The layers are sorted internally by values of meta weight variables.\n Layer Groups You can export images of a layer group individually.\nSelect layer groups and then click Unmerge button.\nIf you want to cancel a layer group to be unmerged, Check it and click Cancel button. It will disppaer from the list.\nThe source files and the images are exported when you publish.\n TODO fix the bug that unmerged group is not indexed at the right position in index.lua\n local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;kwik4_1280x1920\u0026#34;, layers = { { bg={ } }, { copyright={ } }, { star={ } }, { hello={ } }, { mycircle={ } }, { myrect={ } }, { GroupA={ { SubA = { } }, } }, },  Create a new project   Solar2D Project \u0026gt; New button\nTODO dialog for choice\n create a pair of Photoshop \u0026amp; Solar2D project folder   it will scafold a Solar2D folder of a template to a folder you choose. NG Current implementation copies Solar2D folder w/o App TODO it would be better to scafold the entire structure of SingleBook sample   create a book folder into Photoshop folder  select a distination folder\nTODO select portrait or landscape\n   ├── Photoshop │ └── book01 │ ├── kwikconfig.json │ └── page01.psd └── Solar2D ├── rel ├── src │ ├── App │ │ └── book01 │ ├── Images.xcassets │ ├── LaunchScreen.storyboardc │ ├── assets │ ├── build.settings │ ├── commands │ ├── components │ ├── config.lua │ ├── controller │ ├── en.lproj │ ├── extlib │ ├── jp.lproj │ ├── main.lua │ └── mySplashScreen.png ├── templates └── tools  Tools Kwik Editor develop/Solar2D/tools/kwik-editor\nThis tool visually edits Soar2D/src files of a Kwik project and is harnessed by Pegasus http-server\nTODO Port kwik5/sandbox/Solar2D_MENU/KwikLiveEditor to the folder above. Take diff\nTODO editPorpsTable.lua\n\tmuiButton.listener = function(event) print(\u0026quot;button listener\u0026quot;) local map = {} local objs = tableHelper:getTextFields() for i=1, #objs do print(\u0026quot; \u0026quot;..i..\u0026quot;:\u0026quot;, objs[i].text) models[i].value = objs[i].text map[models[i].name] = objs[i].text -- TODO tonumber? end local tmplt = UI.appFolder..\u0026quot;/../../templates/components/layer_props\u0026quot; local path = UI.currentPage.path ..\u0026quot;/\u0026quot;..UI.currentLayer.name..\u0026quot;_props\u0026quot; util.renderer(tmplt, path, map) ↑ Select a layer or an event to review. You can edit values of properties\nTODO each kwik component with default values\nTODO ui components like checkbox/selectors \u0026hellip; for each component ⭐️\n react compnents on webview \u0026ndash; can be shared with UXP panel which may send params via http to pegasus in kwik editor\n  current editPorpsTable.lua servers as plain table viewer \u0026amp; editor\n TODO save/copy params to .http (YAML) for httpYac\nTODO how to send text to clipboard from Solar2D　⭐️\n Harness develop/Solar2D/tools/pegasus-harness\n test_character_transitions.http test_Loading_animation.http  You can post params with httpYac in VS Code to a Solar2D project\nTODO set Layer varaible with samples\nTODO create models: animation, transition2, button \u0026hellip;, and pegasus-receiver in kwik-editor ⭐️\n  Animation_bounce.http\nPOST /layers/logo Content-Type: application/yaml - transition: bounce - params: height: 400 width: 200 time: 1000 iterations: 0    Launcher develop/Solar2D/tools/pegasus-launcher\n test-Solar2D-SampleCode.http  You can open a solar2D project from VS Code with httpYac\n Coding manually in VS Code   create .lua for commands or components\n  run the follwoing tool to update scenes/pageX/index.lua to append the new .lua to the index.\n/develop/Solar2D/tools/generate_scene_index is a Solar2D application. You can open the main.lua in Solar2D simulator.\nthe table in the index.lua is updated by iterating files in App/bookX/components and bookX/commands\n  "},{"uri":"/get_started/naming_rule/","title":"Naming Rule","tags":[],"description":"","content":"Naming .psd file anad layers in documents   Project and file names\nAvoid long names for your projects and files and, DO NOT use characters like +-\u0026lt;\u0026gt;%,#;!.\n  Layer names\nBefore you start adding buttons and animations, follow the rules below. It is much easier to add interactivity with finalized names rather than to edit all of them afterward. Basic rules include:\n  Only user Western characters are allowed for layer names.\n  DO NOT use characters such as + - \u0026lt;\u0026gt; %,#;!. for naming layers\nThese characters conflict with Lua language. Kwik removes these “strange” characters but, if they were used before in any button actions, it would generate errors during export.\n  Do NOT name your layers starting with numbers.\nFor example, a layer named \u0026ldquo;1\u0026rdquo;, will generate an error. A layer named \u0026ldquo;01_Name\u0026rdquo; will also generate an error. However, a layer named \u0026ldquo;Name_01\u0026rdquo; is correct.\n  Do not use Lua commands as names.\nFor example, a layer named “if” will conflict with the command if. Some Lua commands are: if, end, local, transition, play. A full list of Lua commands is here. Kwik will generate an alert error if it finds layers named with Lua commands\n    Avoid having multiple layers with the same name.\nKwik will not export the second layer with the same name as it will overwrite the first one, (which will make the Lua code crazy). Kwik will provide an alert error if it finds layers with identical names.\n  Avoid long names.\nAll layer names become variables when exported, meaning they use more memory and are more difficult to read. Also, they are going to be shortening anyways, as Lua will not allow variable names with more than 15 characters.\n  Keep Layer Names Short for text layers\nText layer names are originally created using the content of the text from the canvas in Photoshop. If you have a long paragraph, the layer name will be the entire content of the long paragraph! Long layer names cause problems in the generated code, so edit the layer names to make them shorter. (This is the most common problem we have seen from our users reporting issues.) Don’t forget all text, besides the ones used in Sync audio feature, also are exported as images.\n      Grouped layers\nKwik can export grouped layers as a single image. Use them to create more complex elements (for example, a multi-layered button with text, shadows, etc.), or for the creation of static elements. A common issue is to have all page elements in a group layer that images are not rendered separately. If you have a group with several layers, try to flatten them whenever it is possible. It will make the export process much faster.\n  Button and Animation names of Kwik components\nAlthough Kwik offers an auto-naming feature, try to enter your own names (follow the rules above). It will help you to quickly edit your actions from the project view. This is a time saver for a project with several actions.\n  "},{"uri":"/get_started/components/","title":"Components","tags":[],"description":"","content":"Components For instance others/page/swip.lua enables a page transition, and audios can have multiple audio objects.\n TODO should be page={swipe = {}, keyboard={}\n local sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;kwik4_1280x1920\u0026#34;, layers = { { bg={ } }, }, components = { audios = { audioOne = {}, audioTwo = {} }, groups = { }, timers = { }, variables = { }, others = { \u0026#34;page.swipe\u0026#34;, \u0026#34;page.keyboard\u0026#34; } }, events = { myAction,myEvents.testHandler }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) -- return scene  page  swipe keyboard common  audio  Common components You can add a common component to components/common directory\nAnd let it pass in arguments of bootstrap function in main.lua\nlocal common = {events = {\u0026#34;myEvent\u0026#34;}, components = {myComponent={}}} require(\u0026#34;controller.index\u0026#34;).bootstrap({ name=\u0026#34;book\u0026#34;, sceneIndex = 1, position = {x=0, y=0}, common =common }) Common components are executed after all the layer components of a scene are rendered. So you can access a layer component by UI.layers table.\nfor instance, myComponent.lua attaches a tap listener\nfunction _M:didShow(UI) local sceneGroup = UI.scene.view UI.layers.bg:addEventListener(\u0026#34;tap\u0026#34;, function(event) print(\u0026#34;bg is taaped\u0026#34;) end) end "},{"uri":"/get_started/events/","title":"Events &amp; Commands","tags":[],"description":"","content":"Events \u0026amp; Commands For an event for a page in a book there are two types\n layer events general events  For example in scenes/pageX/index.lua, buttonOne layer has two events, tap and drag, and for general events (kwik calls it Action) are defined as \u0026ldquo;myAction\u0026rdquo;, \u0026ldquo;myEvents.testHandler\u0026rdquo;\n{ name = \u0026#34;kwik4_1280x1920\u0026#34;, layers = { { bg={} }, { buttonOne={ events = {tap, drag}} }, }, components = { audios = { }, groups = { }, timers = { }, variables = { }, others = { } }, events = { \u0026#34;myAction\u0026#34;, \u0026#34;myEvents.testHandler\u0026#34; }, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end } The assicated lua files are these in commands folder\n App/bookX/pageX/commands  buttonOne  tap.lua drag.lua   myAction.lua myEvents/testHandler.lua     For a common event for a book create a command lua in commands/common directory, for example\n  commands/common/myEvent.lua\nlocal instance = require(\u0026#34;commands.kwik.baseCommand\u0026#34;).new( function (params) local e = params.event local UI = e.UI print(\u0026#34;commands.myCommonEvent\u0026#34;) end) return instance    And let it pass in arguments of bootstrap function in main.lua\nlocal common = {events = {\u0026#34;myEvent\u0026#34;}, components = {myComponent={}}} require(\u0026#34;controller.index\u0026#34;).bootstrap({ name=\u0026#34;book\u0026#34;, sceneIndex = 1, position = {x=0, y=0}, common =common }) context:init function of controller/ApplicationContext.lua automtaically adds it\nthis context init is called everytime when a scene is loaded. You can dispatch an event to executre myEvent.lua like this\nUI.scene:dispatchEvent({ name = \u0026#34;common.myEvent\u0026#34;, UI = UI }) "},{"uri":"/design/architecture/","title":"Architecure","tags":[],"description":"","content":"Architecure html panel\n browser uxp panel webview  flowchart LR Designer((fas:fa-user Designer)) Developer((fas:fa-user Developer)) subgraph Photoshop graphics UXP end subgraph Editor[Editor] subgraph App assets[(assets/images\u0026lt;br\u0026gt;models/json)] lua[(Source .lua)] end tools(renderer\u0026lt;br\u0026gt;scafolder) httpServer GUI(GUI\u0026lt;br\u0026gt;transform\u0026lt;br\u0026gt;animation) GUI -.- tools end subgraph htmlPanel[REST API] form(Properties \u0026lt;br\u0026gt; CRUD) end subgraph VSCode httpYac(httpYac) end Photoshop -.img/json.-\u0026gt; assets htmlPanel \u0026lt;-.img/json.-\u0026gt; httpServer httpServer \u0026lt;-.-\u0026gt; assets httpServer -.- tools tools -.- App Browser-.- htmlPanel httpYac -.- htmlPanel VSCode -.- lua GUI -.- assets Designer --- GUI Designer --- Photoshop Designer --- Browser Developer --- VSCode rest api\n pegasus is runningin Editor\n   run Editor\n  upload an image to pegasus server\n save it assets/images/book/ create display.object .json    uxp\n indirect, async\n   outputs images/json to App\n offline\n   run Editor\n  flowchart LR Designer((fas:fa-user Designer)) Developer((fas:fa-user Developer)) User((fas:fa-user User)) subgraph Photoshop graphics UXP end subgraph VisualStudioCode httpYac(httpYac .http \u0026lt;br\u0026gt; CRUD) coding(coding src/properties) end subgraph Editor[Editor] subgraph App[ Application] src(lua files \u0026lt;br\u0026gt;layerX.json\u0026lt;br\u0026gt;layerX_animation.json\u0026lt;br\u0026gt;) assets(images, audios ...) runtime(Runtime\u0026lt;br\u0026gt; data) GUI(GUI \u0026lt;br\u0026gt; material widgets for Solar2D? \u0026lt;br\u0026gt; Or webview?) webview setter end subgraph renderer parser(parser\u0026lt;br\u0026gt;lua/json/yaml) writer(writer) templates[(templates)] end subgraph httpServer doGet doPost end subgraph htmlPanel[html panel] form(Properties \u0026lt;br\u0026gt; CRUD) end end parser -.- writer writer -.- templates setter -.- runtime GUI -.- writer GUI -.- setter coding -.-\u0026gt; src UXP -.- graphics UXP -.-\u0026gt; assets doPost -.-\u0026gt; parser writer -.-\u0026gt; src form -.-\u0026gt; httpServer doGet -.- src doGet -.- assets httpYac -.-\u0026gt; httpServer webview -.- form GUI -.- webview User -.- GUI Designer -.-\u0026gt; Photoshop Designer -.-\u0026gt; htmlPanel Developer -.-\u0026gt; htmlPanel Developer -.-\u0026gt; VisualStudioCode "},{"uri":"/design/project_model/components/audio/","title":"Audio","tags":[],"description":"","content":"Audio   components/pageX/audios\n sounds/soundOne.lua streams/songOne.lua  local Props = { name = \u0026#34;soundOne\u0026#34;, type = \u0026#34;sound\u0026#34;, autoPlay = true, channel = 2 } return Props   scenes/pageX/index.lua\n{ name = \u0026quot;pageX\u0026quot;, layers = { {background={}}, }, components = { {audios = { {name=\u0026quot;soundOne\u0026quot;, type=\u0026quot;sound\u0026quot;}, {name=\u0026quot;songOne\u0026quot;, type=\u0026quot;stream\u0026quot;} }}, {others = { {nanostores={}} }} }, events = {}, }   "},{"uri":"/design/project_model/components/","title":"Components","tags":[],"description":"","content":"Components "},{"uri":"/design/","title":"Design","tags":[],"description":"","content":"Design Project model\n robotlegs template  components commands    Tools\n  image exporter\nPS/XD UXP\n  visual editor (frontEnd)\nReact\n uxp plugin for Ps or XD web app  Solar2D\n live editor    REST server\n  pegasus-harness\n  pegasus-launcher\nfrontEnd app sends REST API requests to harness of pegasus lua server\nthis server offers the renderer of .lua for components and commands\n    other tools\n generate_scene_index    Sample projects\n Image Exporter plugin for Adobe Photoshop\n Project Model\n sample-projects/Pegasus\n  /kwik5/sandbox/Ps/react-uxp-styles/Project/Solar2D\n  Visual Editor(React)\n{{webview html panel}}\n UXP Browser   Visual Live Editor(Solar2D)\n Tools\n  develop/Solar2D/tools/pegasus-harness\n  develop/Solar2D/tools/pegasus-launcher\nREST API requests from httpYac are sent to pegasus\n  generate_scene_index\n"},{"uri":"/design/project_model/components/image/","title":"Image","tags":[],"description":"","content":"Image   scenes/pageX/background.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 1 local Props = { blendMode = \u0026#34;normal\u0026#34;, height = 520, width = 1000, kind = pixel, name = \u0026#34;bg\u0026#34;, x = 1000 -1000/2, y = 520/2, alpha = 100/100, } -- _M.imageWidth = Props.width/4 _M.imageHeight = Props.height/4 _M.mX, _M.mY = _K.ultimatePosition(Props.x, Props.y, \u0026#34;\u0026#34;) _M.randXStart = _K.ultimatePosition() _M.randXEnd = _K.ultimatePosition() _M.dummy, _M.randYStart = _K.ultimatePosition(0, ) _M.dummy, _M.randYEnd = _K.ultimatePosition(0, ) _M.infinityDistance = (parseValue() or 0)/4 .... .... .... -- function _M:localVars(UI) end -- function _M:localPos(UI) end -- function _M:didShow(UI) end -- function _M:toDispose(UI) end -- function _M:toDestory() end -- return _M  \u0026lsquo;_M.weight = num\u0026rsquo; controlls the order of display objects for kwik-genereate-index tool that outputs scenes/pageX/index.lua\n   scenes/pageX/groupOne/index.lua\n_M = {} _M.weight = 1 -- -- this index.lua is for kwik-generate-model -- you may put additional code here -- return _M   scenes/pageX/groupOne/imageOne.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 1 local Props = { ... .... }   scenes/pageX/groupOne/imageTwo.lua\nlocal _K = require \u0026#34;Application\u0026#34; local _M = require(\u0026#34;components.kwik.layer_image\u0026#34;).new() _M.weight = 2 local Props = { ... .... }   scenes/pageX/index.lua\n Bottom to Top order\n { name = \u0026quot;pageX\u0026quot;, layers = { {background={}}, {groupOne = { {imageTwo}, {imageOne}, }}, }, components = {}, events = {}, }   "},{"uri":"/design/workflow/lua/","title":"Lua Code","tags":[],"description":"","content":"Lua you don\u0026rsquo;t need to use kwik-generate-model nor kwik-editor to output lua files. You can skip making .json files of these tools, and you create a lua file manually into a folder, and append a name of additional file to scenes/pageX/index.lua\n commands/pageX/**/*.lua components/pageX/**/*.lua scenes/pageX/**/*.lua  At runtime, Kwik Code Framework reads scenes/pageX/index.lua to load each .lua files of pageX. The object names for commands, compnents, scenes are defined in the index.lua.\n scenes/pageX/index.lua  kwik-genereate-index is a tool to update the index.lua from traversing the folders above.\n create .lua for commands, components, layers of pageX, run the tool to generate scenes/pageX/index.lua   you don\u0026rsquo;t need to use kwik-generate-index tool. You can manually edit it but it would be better to generate the index.lua with the tool.\n  Alternatively, there is another tool named kwik-scaffold-lua. This tool scafolds .lua files from scenes/pageX/index.lua. The tool does not overwrite .lua if exists, and may delete .lua if not defined in index.lua\n Which Workflow do you like?\n  A\nuse kwik-generate-index everytime after you update commands, components, senes lua files.\n  B\nuse kwik-scaffold-lua to create a lua for commands, components, scenes then edit the lua file.\n   I like A because thinking about files/folders strcure with a file explorer, and coping/pasting an exsiting file could be easier when coding is in progress.\n  To initiate a project, B would work quicky to make a skelton structure.\n "},{"uri":"/design/project_model/","title":"Project Model","tags":[],"description":"","content":"project Model sandbox/Ps/react-uxp-styles/Project/Solar2D/src\n. ├── App │ ├── contentX // See Content X Structure | ├── Images.xcassets ├── LaunchScreen.storyboardc ├── assets | └── kwik ├── build.settings ├── commands │ ├── contentX │ │ └── pageX │ │ └── injectedAction.lua │ ├── app │ └── kwik ├── components │ ├── contentX │ │ └── pageX │ │ └── injectedLayer.lua │ ├── tiledmap │ ├── crossword │ └── store │ └── kwik ├── config.lua ├── controller │ ├── Application.lua │ ├── contexts | | ├── ApplicationContext.lua | | ├── ApplicationMediator.lua | | ├── ApplicationUI.lua | | ├── componentEventHandler.lua | | ├── mediator.lua | | ├── scene.lua | | └── sceneEventHandler.lua │ ├── mediators │ └── index.lua ⭐️ ├── en.lproj ├── extlib ├── jp.lproj └── main.lua ⭐️  main.lua in App/bookXXX is removed. src/controller handles to load an App context\n "},{"uri":"/design/workflow/workflow/","title":"REST API","tags":[],"description":"","content":"REST API - YAML   put images in App/demo/assets/page01\n logo panel message button background shape1 shape2  Tool\n Finder/File Expolorer Plugin for Photoshop or XD will export images Editor  html post image form   network   display.loadRemoteImage\nhttps://solar2d.com/images/logo.png\n access images of XD shared view? or able to load them all?\n   network.download\n      Create layer structure\n Editor lists the images  Order Top/Bottom/Up/Down    frontEnd uses Adobe React Spectrum (in future, support screen reader etc)\nREST API to get the list of images and post the orderd list back\nGET /layers\n- background: [] - button: [] - logo: [] - message: [] - panel: Change the order of layers\nPOST /layers - logo: [] - panel: - message: [] - button: [] - background: []   Set animation and button\n test KwikTheCat for evaluation\n one by one\nPOST /layers/logo classes: - animation Or\nPOST /layers/logo Content-Type: application/yaml - transition: bounce - params: height: 400 width: 200 time: 1000 iterations: 0 GUI in Edtior(Solar2D) for transformation, draggable to set a position\nPOST /layers/panel/button classes: - button All together\nPOST /layers - logo: [] classes: - animation - panel: - message: [] - button: [] classes: - button - background: []   "},{"uri":"/design/tools/","title":"Tools","tags":[],"description":"","content":"Tools Exporrter plugin for PS, XD\n  UXP\n export images export source code   traverse photoshop layers\nscenes/pageX/**/*.lua\n kwik-exporter\\src\\photoshop\\publishCode.ts\n   traverse App/contentX/\n commands/pageX/ for envets components/pageX for components such as audios,groups .. scenes/pageX for layers from Photoshop and attached animation, button   generate_scene_index\\generate_models.lua\n   merge the both results to ouput scenes/pageX/index.lua ⭐️\nlocal sceneName = ... -- local scene = require(\u0026#39;controller.scene\u0026#39;).new(sceneName, { name = \u0026#34;page01\u0026#34;, layers = {{bg = {}}, {layerX = {types={button}}}}, components = { audios = {}, groups = {}, others = {}, timers = {}, variables = {} }, events = {\u0026#34;bg.clickLayer\u0026#34;}, onInit = function(scene) print(\u0026#34;onInit\u0026#34;) end }) return scene       develop/UXP/kwik-exporter\nA layer set is exported as one single image if assets/images/pageX has the foler with the same name of the layer set.\n  export images\n  export props\n output .json/.lua  develop\\UXP\\kwik-exporter\\plugin\\kwik\\templates\\components\\\n layer_image.json layer_image.lua  (TODO) Update develop\\Solar2D\\template to sync with the two files.\n(TODO) UXP/plugin/kwik/template is a clone of template/App/contentX\n    ├─Solar2D │ ├─robotlegs │ │ ├─App │ │ │ ├─book │ │ │ │ ├─assets │ │ │ │ │ ├─images │ │ │ │ │ │ └─page01 │ │ │ │ ├─models │ │ │ │ │ └─page01 │ │ │ │ │ └─layers │ │ │ │ └─scenes │ │ │ │ └─page01 │ ├─template │ │ ├─App │ │ │ └─contentX │ │ │ ├─assets │ │ │ ├─commands │ │ │ │ └─pageX │ │ │ ├─components │ │ │ │ ├─pageX │ │ │ │ │ ├─audios │ │ │ │ │ ├─groups │ │ │ │ │ ├─interactions │ │ │ │ │ │ └─page │ │ │ │ │ ├─others │ │ │ │ │ │ ├─ext_lib_codes │ │ │ │ │ │ ├─page │ │ │ │ │ │ └─store │ │ │ │ │ ├─timers │ │ │ │ │ └─variables │ │ │ │ └─store │ │ │ ├─models │ │ │ │ └─pageX │ │ │ │ ├─events │ │ │ │ └─layers │ │ │ └─scenes │ │ │ └─pageX │ │ │ ├─animations │ │ │ ├─images │ │ │ ├─interactions │ │ │ ├─physics │ │ │ └─replacements │ │ │ ├─particles │ │ │ ├─sprites │ │ │ ├─syncAudioText │ │ │ ├─videos │ │ │ └─www │ └─tools │ ├─kwik-editor └─UXP └─kwik-exporter ├─plugin │ ├─icons │ └─kwik │ ├─templates │ │ ├─components │ │ │ └─kwik │ │ ├─model │ │ │ ├─components │ │ │ ├─events │ │ │ └─layers │ │ └─scenes Editor\n  Web App (React)\n{{TBI}}\n  Solar2D Desktop App\n  /develop/Solar2D/tools/kwik-editor\n  REST Server\n  receives Props and Commands and then renders .lua/.json\n/develop/Solar2D/tools/pegasus-harness\n/develop/Solar2D/tools/pegasus-launcher\n  Utilities\n  generating scene/pageX/index.lua\nthe table in the index.lua is created by interating files in App/bookX/components and bookX/commands\n  scafolding (optional)\nit outputs .lua files to components and commands folder by reading scene/pageX/index.lua\n/develop/Solar2D/tools/generate_scene_index\n  "},{"uri":"/design/tools/plugins/","title":"UXP Plugins","tags":[],"description":"","content":"UXP Plugins Kwik4 created a project folder where psd files are placed. Kwik5 you can creat a folder for your psd files on your own. When Kwik Exporter opens, it asks for the folder location.\nExporter plugins for PS, XD   develop/UXP/kwik-exporter\n  New\n  Open psd files from a folder (TODO)\nthe folder name/path is saved in a json\n  Publish selected psd files (TODO)\n  Drag \u0026amp; Drop to change the order of psd files\none psd file corresponds one scene in Solar2D code.\na psd can be marked for being ignored\n    Export images\n  Export code\n  Publish all images of selected documents\n mark checkboxes of document\u0026rsquo;s names you want to publish  https://developer.adobe.com/xd/uxp/uxp/reference-spectrum/User%20Interface/\nspectrum tableview is not yet supported in UXP\nhttps://react-spectrum.adobe.com/react-spectrum/TableView.html\n- Ctl(Win) or Option(Mac) + Space key toggles selection for the focused row - toggle all on/off    clcik\nopendFileDialog asks a book folder under App folder.\n  Active Document Export Images for an active document document\n  open .psd by cliking the psd name in the list\nKwik4_1280x1920.psd with background image 1440x2776\n kwik5 does not request the canvas size of .psd as 1280x1920 when publising\n   clcik Export Images\nopenFileDialog asks a book folder under App folder.\n  Active Document Export each image of a layerSet(layer group) in .psd\n  create a folder with same name as layerSet in book/assets/images/FILE_NAME_OF_PSD\nfor instance, \u0026ldquo;bg\u0026rdquo; is a layer group of kwik4_1280x1920.psd\nyou can manually create the bg folder under App/book/assets/images/kwik4_1280x1920 so the export images function knows where to put images of sub layers of a group.\n If such no folder with the same name as a layer group, the one image of a layer group is exported.\n    A concept of Kwik5 is to use App folder as a project base. It is a kind of file based database where .json, .lua and assets files are placed. No more .kwk xml file of Kwik4\n  Direclty Editing a file under App folder while running Solar2D Simulator means a live editing. No more build4 folder of Kwik4 either\n TODO Active Document \u0026gt; Layer Selection Only\n   Editor Frontend for PS, XD  ref Anima plugin for Adobe XD\n "},{"uri":"/design/workflow/","title":"Workflow","tags":[],"description":"","content":"Workflow Overview\n  put .png/.jpg into App/contentX/assets/images manually or use kwik-export plugin for Ps/XD to publish images to App folder\n images without coordinates images with coordinates from Ps, XD with kwik-export plugin  models/assets/images/*.json      kwik-editor traverses the assets folder to output .json for models and .lua for scenes/pageX and components/pageX\n kwik-generate-model kwik-generate-index kwik-scaffold-lua  you can edit props or positions of images or attach a type of class such as animation, button \u0026hellip;\nyou can creat an event and a corresponding action of code such as playAnimation, hideLayer, playAudio \u0026hellip;\n if you manually add a .lua file, you need to update scenes/pageX/index.lua too. You can use kwik-generate-index that traverses pageX folder of commands, components and scenes for synclonizing the lisf of .lua for pageX context defined in the index.lua.\n   1. assets ├── App ├── contentX ├── assets ├── audios │ ├── sounds │ ├── streams │ └── sync ├── images │ └── pageX │ ├── bg.png ├── folder | ├─ .png | └── .png └── .png 1-1 images   Manually put images in App/contentX/images/pageX folder\n  kwik-generate-model\nit creates .json under models folder\n    Alternatively\n  Photoshop\n select .psd files to export kwik-export plugin   create folders for a layer group in order to export each image of the group\n  the plugin exports index.json too\n assets/images/.png models/scenes/pageX/index.json  ├── models │ ├── assets │ │ ├── audios │ │ │ ├── sounds │ │ │ ├── streams │ │ │ └── sync │ │ ├── index.json │ │ ├── images | | ├── pageX | | ├── layerX.json (ReadOnly) │ ├── pageX │ ├── index.json │ └── layers │ ├── layerX.json (RW from KwikLiveEditor)     later you edit it with KwikLiveEditor, then layerX.json is created under models/pageX/layers folder. images/pageX/layerX.json is readonly.\n  1-2 audios put audio files under assets/audios folder\n. ├── assets │ ├── audios │ │ ├── sounds │ │ │ └── ballsCollide.mp3 │ │ ├── streams │ │ │ ├── Gentle-Rain.mp3 │ │ │ └── Tranquility.mp3 │ │ └── sync │ │ ├── en │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── jp │ │ │ ├── cat.mp3 │ │ │ ├── kwik.mp3 │ │ │ └── narration.mp3 │ │ ├── pageX_Text1.mp3 │ │ ├── pageX_Text1.txt │ │ ├── page02_Text1.mp3 │ │ └── page02_Text1.txt   kwik-generate-model\ncreates .json under models/assets/audios\n├── models │ ├── assets │ │ ├── audios │ │ │ ├── sounds | | | | ├── audioX.json │ │ │ ├── streams │ │ │ └── sync │ │ ├── index.json │ │ ├── images │ ├── pageX │ ├── index.json   kwik-editor\naudio files are not subjected to a page yet. So you can assign an audio to any pages with the tool.\n  edit audio properties\n auto play channnel \u0026hellip;  models/assets/audios/sounds/audioX.json\n{ \u0026quot;name\u0026quot;:\u0026quot;audioX\u0026quot;, \u0026quot;autoPlay\u0026quot;:false, \u0026quot;channel\u0026quot;:2, \u0026quot;type\u0026quot;:\u0026quot;sound\u0026quot; }   you assign an audio entry to a page with kwik-editor. Then the tool adds the entry in models/pageX/index.json\n  pageX/index.json\n{ \u0026quot;components\u0026quot;: [ { \u0026quot;audios\u0026quot;: [ {\u0026quot;name\u0026quot;:\u0026quot;audioX\u0026quot;, \u0026quot;type\u0026quot;:\u0026quot;sound\u0026quot;}, ] } ], \u0026quot;events\u0026quot;: [], \u0026quot;layers\u0026quot;: [] }   "},{"uri":"/design/tools/editor/","title":"Editor","tags":[],"description":"","content":"Editor  React Solar2D   Kwik functions\n  Command\n  File\n Project New Project Open Project Recent Page New    Edit\n Paste/Copy components Delete  pages components      Publish\n Compress PNGs \u0026ndash; TBI notarized compress.app in Kwik Assemble PNGs  A-Gif or A-PNG   Publish  Images One page or Selected pages Open Solar2D simulator options  Enable child components \u0026ndash; TBI as layerSet as a group or independent option Debug  show memory (trace/print control)   Spritsheet @2x        Importer for a Kwik3 project\n    License\n Perpetual or Subscription Activate Transfer Proxy Settings    Template \u0026ndash; TBI as auto update from kwiksher.com and store it as global\n Copy global to local for customization    Auto update - TBI\n notarization and store updater.app in kwik5    Language\n English or Japanese     Samples\n Afraid (Get Started) Actions Animations Canvas Multi Lingual Layer Replacements Physics Project And Pages   Structure\n  Project Properties\n Icon Splash screen Letter/ZoomEven/ZoomStretch Navigation Thumbnail Auto Bookmark Admob (Rating) IAP  simple unlock bookshelf   Bookshelf  pages template embedded  normal or versions     Languages \u0026ndash; TBI as State in kwik5, global Upate Template    Extended\n  Normal or Component\n  Page Properties\n Context \u0026ndash; load the page images using the context page Scale Enable page swipe Show in navigation Loading option  Preload Template \u0026ndash; bookshelf template page Comic \u0026ndash; enable comic rendering for -panels, balloons, background Alias \u0026ndash; bookshelf: the page alias for a master template page   IAP Unlock Show Ad Record screen    Page components\n Audios  Audio  global or local     Groups  Group  Change order Hide a group   Simple Camera Frame Set  Group with Audio with Variable with   Common  Hide Simple Responsive Random Position Scale Infinity Scroll     States local  State   Actions  Action   Timers  Timers   Variables  Variable  global or local keep track     Physics  Environment (Joints) (Collisions)   External codes \u0026ndash; global, local, self, ace editor?  libraries codes  onInit onCreate onShow onHide        Layer Properties\n  Common\n Hide Simple Responsive Random Position Scale Export  as Jpeg save as Shared Asset   Render as Infinity Scroll Set  Group with Audio with Variable with   States  Gloabl Local Object   Extenal Code - self    Set Language \u0026ndash; TBI as State function gloal, local, object\n  Animation\n Linear Path Switch Image to Rotation Pulse Bounce Blink Shake Filter    Replacements\n Spritesheet  Simple Texture Packer Adobe Animate (Spine)   Sync Text Audio  (Lip Sync - Spine and Papagayo)   Video  normal or PNGs   Web Vector Map Multiplier Particles  Importer Editor   Text  Dynamic Static Input   Countdown Mask    Interactions\n Button Drag Swipe Pinch Spin Shake Scroll Parallax (Accelerometer) Canvas (Snapeshot Eraser) (Push - OneSignal)    Physics\n Body Set Force Set Joint with Set Collision with         "},{"uri":"/design/tools/webapp/","title":"REST Server","tags":[],"description":"","content":"Rest Server Get\nreturns .json of layer components(classes) or events/commands. It also returns default values of compoent properties\nPOST\nreceives Props of layers and Commands and then renders .lua components/commands. It also stores the request params in .json\n /develop/Solar2D/tools/pegasus-harness /develop/Solar2D/tools/pegasus-launcher  "},{"uri":"/design/project_model/template/","title":"Template strurcture","tags":[],"description":"","content":"template structure ├── App ├── contentX ├── assets │ ├── audios │ │ ├── sounds │ │ ├── streams │ │ └── sync │ ├── images │ └── model.json ├── commands │ └── pageX ├── components │ ├── pageX │ │ ├── audios │ │ ├── groups │ │ ├── interactions │ │ │ └── page │ │ ├── others │ │ ├── timers │ │ └── variables │ └── store? ├── defaults │ ├── audio_properties.xml │ ├── layer_properties.xml │ ├── linear_anim_properties.xml │ └── spritesheet_properties.xml ├── mediators ├── models │ ├── assets │ │ ├── audios │ │ │ ├── sounds │ │ │ ├── streams │ │ │ └── sync │ │ ├── index.json │ │ ├── particles │ │ ├── sprites │ │ ├── videos │ │ └── www │ ├── lproj │ └── pageX │ ├── components │ │ ├── audios │ │ ├── groups │ │ ├── others │ │ ├── timers │ │ └── variables │ ├── events │ ├── index.json │ └── layers ├── scenes └── pageX ├── animations ├── images ├── interactions ├── physics └── replacements "},{"uri":"/design/project_model/photoshop/","title":"Photoshop File","tags":[],"description":"","content":"Photoshop File https://www.ios-resolution.com/\niPhone 13 Pro Max\t1284x2778\n  iPad Pro 2048 x 2732\n  iPhone X 1125 x 2436\n  iPhone 11 Pro 1242 x 2688\nhttps://forums.solar2d.com/t/iphone-11-pro-max-screen-shots-in-simulator/151266/11\n  Kwik4 Ulitimate Config\n  1280 x 1920\nhttps://kwiksher.com/doc/getting_startted/guidelines/blend_mode/\nhttps://kwiksher.com/doc/getting_startted/guidelines/screenshot/\n  background\n1440 x 2280\niPhone X 1440 × 2772\nhttps://forums.solar2d.com/t/how-to-define-application-working-area-on-the-screen/351066/11\nhttps://forums.solar2d.com/t/safe-area-on-iphone-x-and-11-problem/353608\n https://github.com/SpyricGames/Solar2D-Plugins-Public\n   "},{"uri":"/design/sample-projects/","title":"Sample Projects","tags":[],"description":"","content":"Sample Projects  sample-projects/SingleBook sample-projects/Pegasus sample-projects/Misc/Transition2 sample-projects/MusicLibrary sample-projects/MultilingualBook sample-projects/GameCenter  "},{"uri":"/design/project_model/template_model/","title":"Template Model","tags":[],"description":"","content":"Code Template Model assets/model/schema\nembedded in codes \u0026ndash; TBI to be extracted\n external codes - export it to .lua or can be imported directly physics path read2me -  timecodes   spritesheet info  TODO:add ext codes\nextCodes libs p1 user_codes.lua ext_001.lua ext_002.lua commands/ button_name_001.lua action_name_001.lua user_codes.lua p2/ =\u0026gt; build4/\n```lua function ActionCommand:new() local command = {} -- function command:execute(params) local UI = params.UI local sceneGroup = UI.scene.view local layer = UI.layer local phase = params.event.phase local event = params.event {{#vvar}} {{vvar}} {{/vvar}} {{#arqCode}} {{arqCode}} {{/arqCode}} end return command end ``` or ext_lib_codes.lua ``` local _K = require \u0026quot;Application\u0026quot; {{#extLib}} local {{name}} = requireKwik(\u0026quot;{{libname}}\u0026quot;) {{/extLib}} -- {{#TV}} local kInputDevices = require(\u0026quot;extlib.tv.kInputDevices\u0026quot;) {{/TV}} function _M:localVars(UI) local sceneGroup = UI.scene.view local layer = UI.layer {{#extCodeTop}} {{ccode}} {{arqCode}} {{/extCodeTop}} end ```  model.json\n{ \u0026#34;page\u0026#34;:1,\u0026#34;alias\u0026#34;:\u0026#34;title\u0026#34;,\u0026#34;isTmplt\u0026#34;:false, \u0026#34;audios\u0026#34;:[null], \u0026#34;read2me\u0026#34;:[null], \u0026#34;videos\u0026#34;:[null], \u0026#34;PNGs\u0026#34;:[null], \u0026#34;sprites\u0026#34;:[null], \u0026#34;particles\u0026#34;:[null], \u0026#34;WWW\u0026#34;:[null], \u0026#34;thumbnails\u0026#34;:[null], \u0026#34;images\u0026#34;:[ \u0026#34;bg@4x.png\u0026#34;, \u0026#34;bg@2x.png\u0026#34;, \u0026#34;bg.png\u0026#34;, null ], \u0026#34;shared\u0026#34;:[ null ] } { \u0026#34;page\u0026#34;:{{page}},\u0026#34;alias\u0026#34;:\u0026#34;{{alias}}\u0026#34;,\u0026#34;isTmplt\u0026#34;:{{isTmplt}}, {{#layers}} \u0026#34;{{layer}}\u0026#34;:{ \u0026#34;x\u0026#34;:{{x}}, \u0026#34;y\u0026#34;:{{y}}, \u0026#34;width\u0026#34;:{{width}}, \u0026#34;height\u0026#34;:{{height}}, \u0026#34;alpha\u0026#34;:{{alpha}}, \u0026#34;ext\u0026#34;:\u0026#34;{{ext}}\u0026#34; }, {{/layers}} \u0026#34;audios\u0026#34;:[ {{#audios}}\u0026#34;{{filename}}\u0026#34;,{{/audios}} null], \u0026#34;read2me\u0026#34;:[ {{#read2me}}{\u0026#34;foldername\u0026#34;:\u0026#34;{{foldername}}\u0026#34;, \u0026#34;filenames\u0026#34;:[{{#filenames}}\u0026#34;{{.}}\u0026#34;,{{/filenames}} null] },{{/read2me}} null], \u0026#34;videos\u0026#34;:[ {{#videos}}\u0026#34;{{filename}}\u0026#34;,{{/videos}} null], \u0026#34;PNGs\u0026#34;:[ {{#PNGs}}\u0026#34;{{foldername}}\u0026#34;,{{/PNGs}} null], \u0026#34;sprites\u0026#34;:[ {{#sprites}}\u0026#34;{{filename}}\u0026#34;,{{/sprites}} null], \u0026#34;particles\u0026#34;:[ {{#particles}}{\u0026#34;filename\u0026#34;:\u0026#34;{{filename}}\u0026#34;,\u0026#34;PNG\u0026#34;:\u0026#34;{{PNG}}\u0026#34;},{{/particles}} null], \u0026#34;WWW\u0026#34;:[ {{#WWW}}{\u0026#34;filename\u0026#34;:\u0026#34;{{filename}}\u0026#34;,\u0026#34;foldername\u0026#34;:\u0026#34;{{foldername}}\u0026#34;},{{/WWW}} null], \u0026#34;thumbnails\u0026#34;:[ {{#thumbnails}}{{#filenames}}\u0026#34;{{.}}\u0026#34;,{{/filenames}} {{/thumbnails}}null], \u0026#34;images\u0026#34;:[ {{#images}} \u0026#34;{{filename}}@4x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}@2x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}.{{filetype}}\u0026#34;, {{/images}} null ], \u0026#34;shared\u0026#34;:[ {{#shared}} \u0026#34;{{filename}}@4x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}@2x.{{filetype}}\u0026#34;, \u0026#34;{{filename}}.{{filetype}}\u0026#34;, {{/shared}} null ] } "},{"uri":"/design/tools/utilities/","title":"Utilities","tags":[],"description":"","content":"Utilities /develop/Solar2D/tools/generate_scene_index (TODO update ⭐️)\n  generating scene/pageX/index.lua\nindex.lua is created by iterating files from\n App/conentX/scene/pageX App/contentX/components/pageX App/conentX/commands/pageX    scafolding (optional)\nit outputs .lua files to components and commands folder by reading scene/pageX/index.lua\n  "},{"uri":"/design/project_model/icons/","title":"Icons","tags":[],"description":"","content":"https://forums.solar2d.com/t/new-icon-size-for-ios/354492\n 114x114  "},{"uri":"/design/new_features/","title":"New Features","tags":[],"description":"","content":"New Features Solar2D API to be included\n  Audio\n seek rewind cross fade function    Social\n twitter facebook instagram    transition.*\n chaining them    mesh\n  2.5D — Perspective and Depth\n  game controllers\n  Solar2D video texture\n https://github.com/ANSH3LL/plugin_movie  Tiled\n  https://forums.solar2d.com/t/smooth-scrolling-of-top-down-tiled-map/150199/2\n\u0026ldquo;cull based on a 3x3 area of sub-screens centered around player. \u0026quot;\n  https://gamedev.stackexchange.com/questions/83253/is-there-any-way-to-load-pieces-of-a-tile-map-as-and-when-needed-and-not-the-en\n  https://www.dynetisgames.com/2018/02/24/manage-big-maps-phaser-3/\n A tool to split an existing Tiled tilemap into chunks How to reason about chunks based on their ID’s and the world dimensions How to load and destroy them on the fly using Phaser 3    Texture atlas function in kwik?\n  https://github.com/shama/atlaspack\n  http://free-tex-packer.com/\n  https://github.com/odrick/free-tex-packer\n  https://github.com/richardjdare/Atlasmaker\n  https://github.com/soimy/atlasify ⭐️\n https://github.com/soimy/maxrects-packer    Audio sprites?\n https://medium.com/game-development-stuff/how-to-create-audiosprites-to-use-with-howler-js-beed5d006ac1   Interactive\n texture atlas \u0026ndash; Spine spritesheet \u0026ndash; Adobe Animate movie \u0026ndash; Adobe Animate  Lottie ts to lua? ⭐️\n https://github.com/bytedance/lottiefy https://github.com/airbnb/lottie-web https://github.com/LottieFiles https://lottiefiles.com/what-is-lottie  "},{"uri":"/all/","title":"all","tags":[],"description":"","content":""},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]